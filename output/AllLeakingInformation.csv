TromLabel	ToLabel	Context	Invocation	SourceValue
<datahub.shaded.jackson.core.io.ContentReference: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<datahub.shaded.org.apache.commons.lang.enums.ValuedEnum: int getValueInOtherClassLoader(java.lang.Object)>/java.lang.reflect.Method.invoke/0	<datahub.shaded.jackson.core.io.ContentReference: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<datahub.shaded.jackson.core.io.ContentReference: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<datahub.shaded.org.apache.commons.lang.enum.Enum: java.lang.String getNameInOtherClassLoader(java.lang.Object)>/java.lang.reflect.Method.invoke/0	<datahub.shaded.jackson.core.io.ContentReference: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<datahub.shaded.jackson.core.io.ContentReference: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<datahub.shaded.org.apache.commons.lang.enums.Enum: java.lang.String getNameInOtherClassLoader(java.lang.Object)>/java.lang.reflect.Method.invoke/0	<datahub.shaded.jackson.core.io.ContentReference: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<datahub.shaded.com.google.common.collect.HashMultiset: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<datahub.shaded.org.apache.commons.lang.enums.ValuedEnum: int getValueInOtherClassLoader(java.lang.Object)>/java.lang.reflect.Method.invoke/0	<datahub.shaded.com.google.common.collect.HashMultiset: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<datahub.shaded.com.google.common.collect.HashMultiset: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<datahub.shaded.org.apache.commons.lang.enum.Enum: java.lang.String getNameInOtherClassLoader(java.lang.Object)>/java.lang.reflect.Method.invoke/0	<datahub.shaded.com.google.common.collect.HashMultiset: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<datahub.shaded.com.google.common.collect.HashMultiset: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<datahub.shaded.org.apache.commons.lang.enums.Enum: java.lang.String getNameInOtherClassLoader(java.lang.Object)>/java.lang.reflect.Method.invoke/0	<datahub.shaded.com.google.common.collect.HashMultiset: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<datahub.shaded.com.google.common.collect.LinkedHashMultiset: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<datahub.shaded.org.apache.commons.lang.enums.ValuedEnum: int getValueInOtherClassLoader(java.lang.Object)>/java.lang.reflect.Method.invoke/0	<datahub.shaded.com.google.common.collect.LinkedHashMultiset: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<datahub.shaded.com.google.common.collect.LinkedHashMultiset: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<datahub.shaded.org.apache.commons.lang.enum.Enum: java.lang.String getNameInOtherClassLoader(java.lang.Object)>/java.lang.reflect.Method.invoke/0	<datahub.shaded.com.google.common.collect.LinkedHashMultiset: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<datahub.shaded.com.google.common.collect.LinkedHashMultiset: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<datahub.shaded.org.apache.commons.lang.enums.Enum: java.lang.String getNameInOtherClassLoader(java.lang.Object)>/java.lang.reflect.Method.invoke/0	<datahub.shaded.com.google.common.collect.LinkedHashMultiset: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<datahub.shaded.javassist.tools.reflect.Metaobject: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<datahub.shaded.org.apache.commons.lang.enums.ValuedEnum: int getValueInOtherClassLoader(java.lang.Object)>/java.lang.reflect.Method.invoke/0	<datahub.shaded.javassist.tools.reflect.Metaobject: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<datahub.shaded.javassist.tools.reflect.Metaobject: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<datahub.shaded.javassist.tools.reflect.Metaobject: java.lang.Object trapMethodcall(int,java.lang.Object[])>/java.lang.reflect.Method.invoke/0	<datahub.shaded.javassist.tools.reflect.Metaobject: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<datahub.shaded.javassist.tools.reflect.Metaobject: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<datahub.shaded.org.apache.commons.lang.enum.Enum: java.lang.String getNameInOtherClassLoader(java.lang.Object)>/java.lang.reflect.Method.invoke/0	<datahub.shaded.javassist.tools.reflect.Metaobject: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<datahub.shaded.javassist.tools.reflect.Metaobject: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<datahub.shaded.org.apache.commons.lang.enums.Enum: java.lang.String getNameInOtherClassLoader(java.lang.Object)>/java.lang.reflect.Method.invoke/0	<datahub.shaded.javassist.tools.reflect.Metaobject: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<datahub.shaded.org.apache.commons.lang.enums.ValuedEnum: int getValueInOtherClassLoader(java.lang.Object)>/java.lang.reflect.Method.invoke/0	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<datahub.shaded.org.apache.commons.lang.enum.Enum: java.lang.String getNameInOtherClassLoader(java.lang.Object)>/java.lang.reflect.Method.invoke/0	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<datahub.shaded.org.apache.commons.lang.enums.Enum: java.lang.String getNameInOtherClassLoader(java.lang.Object)>/java.lang.reflect.Method.invoke/0	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.LinkedBlockingQueue: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.io.File,java.lang.String)>	<<immutable-context>>	<org.apache.commons.io.filefilter.WildcardFilter: boolean accept(java.io.File,java.lang.String)>/java.io.File.<init>/0	<java.util.concurrent.LinkedBlockingQueue: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.LinkedBlockingQueue: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.io.File,java.lang.String)>	<<immutable-context>>	<org.apache.commons.io.filefilter.AbstractFileFilter: boolean accept(java.io.File,java.lang.String)>/java.io.File.<init>/0	<java.util.concurrent.LinkedBlockingQueue: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.CopyOnWriteArrayList: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.io.File,java.lang.String)>	<<immutable-context>>	<org.apache.commons.io.filefilter.WildcardFilter: boolean accept(java.io.File,java.lang.String)>/java.io.File.<init>/0	<java.util.concurrent.CopyOnWriteArrayList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.CopyOnWriteArrayList: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.io.File,java.lang.String)>	<<immutable-context>>	<org.apache.commons.io.filefilter.AbstractFileFilter: boolean accept(java.io.File,java.lang.String)>/java.io.File.<init>/0	<java.util.concurrent.CopyOnWriteArrayList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.IdentityHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.io.File,java.lang.String)>	<<immutable-context>>	<org.apache.commons.io.filefilter.WildcardFilter: boolean accept(java.io.File,java.lang.String)>/java.io.File.<init>/0	<java.util.IdentityHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.IdentityHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.io.File,java.lang.String)>	<<immutable-context>>	<org.apache.commons.io.filefilter.AbstractFileFilter: boolean accept(java.io.File,java.lang.String)>/java.io.File.<init>/0	<java.util.IdentityHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentLinkedQueue: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.io.File,java.lang.String)>	<<immutable-context>>	<org.apache.commons.io.filefilter.WildcardFilter: boolean accept(java.io.File,java.lang.String)>/java.io.File.<init>/0	<java.util.concurrent.ConcurrentLinkedQueue: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentLinkedQueue: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.io.File,java.lang.String)>	<<immutable-context>>	<org.apache.commons.io.filefilter.AbstractFileFilter: boolean accept(java.io.File,java.lang.String)>/java.io.File.<init>/0	<java.util.concurrent.ConcurrentLinkedQueue: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<com.facebook.presto.hadoop.$internal.org.apache.commons.collections.map.UnmodifiableMap: void readObject(java.io.ObjectInputStream)>	<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>	<<immutable-context>>	<org.apache.beam.sdk.util.SerializableUtils$ContextualObjectInputStream: java.lang.Class resolveProxyClass(java.lang.String[])>/java.lang.ClassLoader.loadClass/0	<com.facebook.presto.hadoop.$internal.org.apache.commons.collections.map.UnmodifiableMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<com.facebook.presto.hadoop.$internal.com.google.common.collect.LinkedHashMultiset: void readObject(java.io.ObjectInputStream)>	<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>	<<immutable-context>>	<org.apache.beam.sdk.util.SerializableUtils$ContextualObjectInputStream: java.lang.Class resolveProxyClass(java.lang.String[])>/java.lang.ClassLoader.loadClass/0	<com.facebook.presto.hadoop.$internal.com.google.common.collect.LinkedHashMultiset: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<com.facebook.presto.hadoop.$internal.com.google.common.collect.TreeMultiset: void readObject(java.io.ObjectInputStream)>	<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>	<<immutable-context>>	<org.apache.beam.sdk.util.SerializableUtils$ContextualObjectInputStream: java.lang.Class resolveProxyClass(java.lang.String[])>/java.lang.ClassLoader.loadClass/0	<com.facebook.presto.hadoop.$internal.com.google.common.collect.TreeMultiset: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.IdentityHashMap: void readObject(java.io.ObjectInputStream)>	<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>	<<immutable-context>>	<org.apache.beam.sdk.util.SerializableUtils$ContextualObjectInputStream: java.lang.Class resolveProxyClass(java.lang.String[])>/java.lang.ClassLoader.loadClass/0	<java.util.IdentityHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>	<java.io.FileOutputStream: void <init>(java.io.File)>	<<immutable-context>>	<org.mockito.internal.creation.bytebuddy.InlineDelegateByteBuddyMockMaker: void <clinit>()>/java.io.FileOutputStream.<init>/0	<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.LinkedBlockingDeque: void readObject(java.io.ObjectInputStream)>	<java.io.FileOutputStream: void <init>(java.io.File)>	<<immutable-context>>	<org.mockito.internal.creation.bytebuddy.InlineDelegateByteBuddyMockMaker: void <clinit>()>/java.io.FileOutputStream.<init>/0	<java.util.concurrent.LinkedBlockingDeque: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.IdentityHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.FileOutputStream: void <init>(java.io.File)>	<<immutable-context>>	<org.mockito.internal.creation.bytebuddy.InlineDelegateByteBuddyMockMaker: void <clinit>()>/java.io.FileOutputStream.<init>/0	<java.util.IdentityHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentLinkedQueue: void readObject(java.io.ObjectInputStream)>	<java.io.FileOutputStream: void <init>(java.io.File)>	<<immutable-context>>	<org.mockito.internal.creation.bytebuddy.InlineDelegateByteBuddyMockMaker: void <clinit>()>/java.io.FileOutputStream.<init>/0	<java.util.concurrent.ConcurrentLinkedQueue: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.SynchronousQueue: void readObject(java.io.ObjectInputStream)>	<java.io.FileOutputStream: void <init>(java.io.File)>	<<immutable-context>>	<org.mockito.internal.creation.bytebuddy.InlineDelegateByteBuddyMockMaker: void <clinit>()>/java.io.FileOutputStream.<init>/0	<java.util.concurrent.SynchronousQueue: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.FileOutputStream: void <init>(java.io.File)>	<<immutable-context>>	<org.mockito.internal.creation.bytebuddy.InlineDelegateByteBuddyMockMaker: void <clinit>()>/java.io.FileOutputStream.<init>/0	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<datahub.shaded.com.google.common.collect.LinkedListMultimap: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<datahub.shaded.org.springframework.beans.factory.support.SimpleInstantiationStrategy: java.lang.Object instantiate(datahub.shaded.org.springframework.beans.factory.support.RootBeanDefinition,java.lang.String,datahub.shaded.org.springframework.beans.factory.BeanFactory,java.lang.Object,java.lang.reflect.Method,java.lang.Object[])>/java.lang.reflect.Method.invoke/0	<datahub.shaded.com.google.common.collect.LinkedListMultimap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<datahub.shaded.com.google.common.collect.LinkedListMultimap: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<datahub.shaded.org.apache.commons.lang.enum.Enum: java.lang.String getNameInOtherClassLoader(java.lang.Object)>/java.lang.reflect.Method.invoke/0	<datahub.shaded.com.google.common.collect.LinkedListMultimap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<datahub.shaded.com.google.common.collect.LinkedListMultimap: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<datahub.shaded.org.apache.commons.lang.enums.Enum: java.lang.String getNameInOtherClassLoader(java.lang.Object)>/java.lang.reflect.Method.invoke/0	<datahub.shaded.com.google.common.collect.LinkedListMultimap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<datahub.shaded.org.springframework.beans.factory.support.DefaultListableBeanFactory: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<datahub.shaded.org.springframework.beans.factory.support.SimpleInstantiationStrategy: java.lang.Object instantiate(datahub.shaded.org.springframework.beans.factory.support.RootBeanDefinition,java.lang.String,datahub.shaded.org.springframework.beans.factory.BeanFactory,java.lang.Object,java.lang.reflect.Method,java.lang.Object[])>/java.lang.reflect.Method.invoke/0	<datahub.shaded.org.springframework.beans.factory.support.DefaultListableBeanFactory: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<datahub.shaded.org.springframework.beans.factory.support.DefaultListableBeanFactory: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<datahub.shaded.org.springframework.beans.factory.support.DisposableBeanAdapter: java.lang.Object lambda$invokeCustomDestroyMethod$4(java.lang.reflect.Method,java.lang.Object[])>/java.lang.reflect.Method.invoke/0	<datahub.shaded.org.springframework.beans.factory.support.DefaultListableBeanFactory: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<datahub.shaded.org.springframework.beans.factory.support.DefaultListableBeanFactory: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<datahub.shaded.org.apache.commons.lang.enum.Enum: java.lang.String getNameInOtherClassLoader(java.lang.Object)>/java.lang.reflect.Method.invoke/0	<datahub.shaded.org.springframework.beans.factory.support.DefaultListableBeanFactory: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<datahub.shaded.org.springframework.beans.factory.support.DefaultListableBeanFactory: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<datahub.shaded.org.apache.commons.lang.enums.Enum: java.lang.String getNameInOtherClassLoader(java.lang.Object)>/java.lang.reflect.Method.invoke/0	<datahub.shaded.org.springframework.beans.factory.support.DefaultListableBeanFactory: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<datahub.shaded.org.springframework.beans.factory.support.DefaultListableBeanFactory: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<datahub.shaded.org.springframework.beans.factory.support.DisposableBeanAdapter: void invokeCustomDestroyMethod(java.lang.reflect.Method)>/java.lang.reflect.Method.invoke/0	<datahub.shaded.org.springframework.beans.factory.support.DefaultListableBeanFactory: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<datahub.shaded.org.springframework.beans.factory.support.DefaultListableBeanFactory: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<datahub.shaded.org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory: void invokeCustomInitMethod(java.lang.String,java.lang.Object,datahub.shaded.org.springframework.beans.factory.support.RootBeanDefinition)>/java.lang.reflect.Method.invoke/0	<datahub.shaded.org.springframework.beans.factory.support.DefaultListableBeanFactory: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<datahub.shaded.org.springframework.beans.factory.support.DefaultListableBeanFactory: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>	<<immutable-context>>	<datahub.shaded.org.springframework.beans.BeanUtils$KotlinDelegate: java.lang.Object instantiateClass(java.lang.reflect.Constructor,java.lang.Object[])>/java.lang.reflect.Constructor.newInstance/0	<datahub.shaded.org.springframework.beans.factory.support.DefaultListableBeanFactory: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<datahub.shaded.org.springframework.beans.factory.support.DefaultListableBeanFactory: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>	<<immutable-context>>	<datahub.shaded.org.springframework.beans.BeanUtils: java.lang.Object instantiateClass(java.lang.reflect.Constructor,java.lang.Object[])>/java.lang.reflect.Constructor.newInstance/0	<datahub.shaded.org.springframework.beans.factory.support.DefaultListableBeanFactory: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<datahub.shaded.com.google.common.util.concurrent.AtomicDoubleArray: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<datahub.shaded.org.springframework.beans.factory.support.SimpleInstantiationStrategy: java.lang.Object instantiate(datahub.shaded.org.springframework.beans.factory.support.RootBeanDefinition,java.lang.String,datahub.shaded.org.springframework.beans.factory.BeanFactory,java.lang.Object,java.lang.reflect.Method,java.lang.Object[])>/java.lang.reflect.Method.invoke/0	<datahub.shaded.com.google.common.util.concurrent.AtomicDoubleArray: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<datahub.shaded.com.google.common.util.concurrent.AtomicDoubleArray: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<datahub.shaded.org.apache.commons.lang.enum.Enum: java.lang.String getNameInOtherClassLoader(java.lang.Object)>/java.lang.reflect.Method.invoke/0	<datahub.shaded.com.google.common.util.concurrent.AtomicDoubleArray: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<datahub.shaded.com.google.common.util.concurrent.AtomicDoubleArray: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<datahub.shaded.org.apache.commons.lang.enums.Enum: java.lang.String getNameInOtherClassLoader(java.lang.Object)>/java.lang.reflect.Method.invoke/0	<datahub.shaded.com.google.common.util.concurrent.AtomicDoubleArray: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<datahub.shaded.com.google.common.util.concurrent.AtomicDoubleArray: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>	<<immutable-context>>	<datahub.shaded.org.springframework.beans.BeanUtils: java.lang.Object instantiateClass(java.lang.reflect.Constructor,java.lang.Object[])>/java.lang.reflect.Constructor.newInstance/0	<datahub.shaded.com.google.common.util.concurrent.AtomicDoubleArray: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<datahub.shaded.com.google.common.collect.CompactHashSet: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<datahub.shaded.org.springframework.beans.factory.support.SimpleInstantiationStrategy: java.lang.Object instantiate(datahub.shaded.org.springframework.beans.factory.support.RootBeanDefinition,java.lang.String,datahub.shaded.org.springframework.beans.factory.BeanFactory,java.lang.Object,java.lang.reflect.Method,java.lang.Object[])>/java.lang.reflect.Method.invoke/0	<datahub.shaded.com.google.common.collect.CompactHashSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<datahub.shaded.com.google.common.collect.CompactHashSet: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<datahub.shaded.org.springframework.beans.factory.support.DisposableBeanAdapter: java.lang.Object lambda$invokeCustomDestroyMethod$4(java.lang.reflect.Method,java.lang.Object[])>/java.lang.reflect.Method.invoke/0	<datahub.shaded.com.google.common.collect.CompactHashSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<datahub.shaded.com.google.common.collect.CompactHashSet: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<datahub.shaded.org.apache.commons.lang.enum.Enum: java.lang.String getNameInOtherClassLoader(java.lang.Object)>/java.lang.reflect.Method.invoke/0	<datahub.shaded.com.google.common.collect.CompactHashSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<datahub.shaded.com.google.common.collect.CompactHashSet: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<datahub.shaded.org.apache.commons.lang.enums.Enum: java.lang.String getNameInOtherClassLoader(java.lang.Object)>/java.lang.reflect.Method.invoke/0	<datahub.shaded.com.google.common.collect.CompactHashSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<datahub.shaded.com.google.common.collect.CompactHashSet: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<datahub.shaded.org.springframework.beans.factory.support.DisposableBeanAdapter: void invokeCustomDestroyMethod(java.lang.reflect.Method)>/java.lang.reflect.Method.invoke/0	<datahub.shaded.com.google.common.collect.CompactHashSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<datahub.shaded.com.google.common.collect.CompactHashSet: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<datahub.shaded.org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory: void invokeCustomInitMethod(java.lang.String,java.lang.Object,datahub.shaded.org.springframework.beans.factory.support.RootBeanDefinition)>/java.lang.reflect.Method.invoke/0	<datahub.shaded.com.google.common.collect.CompactHashSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<datahub.shaded.com.google.common.collect.CompactHashSet: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>	<<immutable-context>>	<datahub.shaded.org.springframework.beans.BeanUtils$KotlinDelegate: java.lang.Object instantiateClass(java.lang.reflect.Constructor,java.lang.Object[])>/java.lang.reflect.Constructor.newInstance/0	<datahub.shaded.com.google.common.collect.CompactHashSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<datahub.shaded.com.google.common.collect.CompactHashSet: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>	<<immutable-context>>	<datahub.shaded.org.springframework.beans.BeanUtils: java.lang.Object instantiateClass(java.lang.reflect.Constructor,java.lang.Object[])>/java.lang.reflect.Constructor.newInstance/0	<datahub.shaded.com.google.common.collect.CompactHashSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<datahub.shaded.com.github.benmanes.caffeine.SingleConsumerQueue: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<datahub.shaded.org.springframework.beans.factory.support.SimpleInstantiationStrategy: java.lang.Object instantiate(datahub.shaded.org.springframework.beans.factory.support.RootBeanDefinition,java.lang.String,datahub.shaded.org.springframework.beans.factory.BeanFactory,java.lang.Object,java.lang.reflect.Method,java.lang.Object[])>/java.lang.reflect.Method.invoke/0	<datahub.shaded.com.github.benmanes.caffeine.SingleConsumerQueue: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<datahub.shaded.com.github.benmanes.caffeine.SingleConsumerQueue: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<datahub.shaded.org.apache.commons.lang.enum.Enum: java.lang.String getNameInOtherClassLoader(java.lang.Object)>/java.lang.reflect.Method.invoke/0	<datahub.shaded.com.github.benmanes.caffeine.SingleConsumerQueue: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<datahub.shaded.com.github.benmanes.caffeine.SingleConsumerQueue: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<datahub.shaded.org.apache.commons.lang.enums.Enum: java.lang.String getNameInOtherClassLoader(java.lang.Object)>/java.lang.reflect.Method.invoke/0	<datahub.shaded.com.github.benmanes.caffeine.SingleConsumerQueue: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.IdentityHashMap: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<datahub.shaded.org.springframework.beans.factory.support.SimpleInstantiationStrategy: java.lang.Object instantiate(datahub.shaded.org.springframework.beans.factory.support.RootBeanDefinition,java.lang.String,datahub.shaded.org.springframework.beans.factory.BeanFactory,java.lang.Object,java.lang.reflect.Method,java.lang.Object[])>/java.lang.reflect.Method.invoke/0	<java.util.IdentityHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.IdentityHashMap: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<datahub.shaded.org.apache.commons.lang.enum.Enum: java.lang.String getNameInOtherClassLoader(java.lang.Object)>/java.lang.reflect.Method.invoke/0	<java.util.IdentityHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.IdentityHashMap: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<datahub.shaded.org.apache.commons.lang.enums.Enum: java.lang.String getNameInOtherClassLoader(java.lang.Object)>/java.lang.reflect.Method.invoke/0	<java.util.IdentityHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.IdentityHashMap: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<datahub.shaded.org.springframework.beans.factory.support.DisposableBeanAdapter: void invokeCustomDestroyMethod(java.lang.reflect.Method)>/java.lang.reflect.Method.invoke/0	<java.util.IdentityHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.IdentityHashMap: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>	<<immutable-context>>	<datahub.shaded.org.springframework.beans.BeanUtils$KotlinDelegate: java.lang.Object instantiateClass(java.lang.reflect.Constructor,java.lang.Object[])>/java.lang.reflect.Constructor.newInstance/0	<java.util.IdentityHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.IdentityHashMap: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>	<<immutable-context>>	<datahub.shaded.org.springframework.beans.BeanUtils: java.lang.Object instantiateClass(java.lang.reflect.Constructor,java.lang.Object[])>/java.lang.reflect.Constructor.newInstance/0	<java.util.IdentityHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.IdentityHashMap: void readObject(java.io.ObjectInputStream)>	<java.lang.ProcessBuilder: java.lang.Process start()>	<<immutable-context>>	<org.apache.hadoop.util.Shell: void runCommand()>/java.lang.ProcessBuilder.start/0	<java.util.IdentityHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.IdentityHashMap: void readObject(java.io.ObjectInputStream)>	<java.lang.ProcessBuilder: java.lang.Process start()>	<<immutable-context>>	<org.apache.hadoop.util.Shell: void runCommand()>/java.lang.ProcessBuilder.start/1	<java.util.IdentityHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.IdentityHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.lang.String)>	<<immutable-context>>	<org.apache.hadoop.util.Shell: java.io.File checkHadoopHomeInner(java.lang.String)>/java.io.File.<init>/0	<java.util.IdentityHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.IdentityHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.io.File,java.lang.String)>	<<immutable-context>>	<org.apache.hadoop.util.Shell: java.io.File getQualifiedBinInner(java.io.File,java.lang.String)>/java.io.File.<init>/0	<java.util.IdentityHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.IdentityHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.io.File,java.lang.String)>	<<immutable-context>>	<org.apache.hadoop.util.Shell: java.io.File getQualifiedBinInner(java.io.File,java.lang.String)>/java.io.File.<init>/1	<java.util.IdentityHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.HashSet: void readObject(java.io.ObjectInputStream)>	<java.lang.ProcessBuilder: java.lang.Process start()>	<<immutable-context>>	<org.apache.hadoop.util.Shell: void runCommand()>/java.lang.ProcessBuilder.start/0	<java.util.HashSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.HashSet: void readObject(java.io.ObjectInputStream)>	<java.lang.ProcessBuilder: java.lang.Process start()>	<<immutable-context>>	<org.apache.hadoop.util.Shell: void runCommand()>/java.lang.ProcessBuilder.start/1	<java.util.HashSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.HashSet: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.lang.String)>	<<immutable-context>>	<org.apache.hadoop.util.Shell: java.io.File checkHadoopHomeInner(java.lang.String)>/java.io.File.<init>/0	<java.util.HashSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.HashSet: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.io.File,java.lang.String)>	<<immutable-context>>	<org.apache.hadoop.util.Shell: java.io.File getQualifiedBinInner(java.io.File,java.lang.String)>/java.io.File.<init>/0	<java.util.HashSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.HashSet: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.io.File,java.lang.String)>	<<immutable-context>>	<org.apache.hadoop.util.Shell: java.io.File getQualifiedBinInner(java.io.File,java.lang.String)>/java.io.File.<init>/1	<java.util.HashSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.lang.ProcessBuilder: java.lang.Process start()>	<<immutable-context>>	<org.apache.hadoop.util.Shell: void runCommand()>/java.lang.ProcessBuilder.start/0	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.lang.ProcessBuilder: java.lang.Process start()>	<<immutable-context>>	<org.apache.hadoop.util.Shell: void runCommand()>/java.lang.ProcessBuilder.start/1	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.lang.String)>	<<immutable-context>>	<org.apache.hadoop.util.Shell: java.io.File checkHadoopHomeInner(java.lang.String)>/java.io.File.<init>/0	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.io.File,java.lang.String)>	<<immutable-context>>	<org.apache.hadoop.util.Shell: java.io.File getQualifiedBinInner(java.io.File,java.lang.String)>/java.io.File.<init>/0	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.io.File,java.lang.String)>	<<immutable-context>>	<org.apache.hadoop.util.Shell: java.io.File getQualifiedBinInner(java.io.File,java.lang.String)>/java.io.File.<init>/1	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>	<java.lang.ProcessBuilder: java.lang.Process start()>	<<immutable-context>>	<org.apache.hadoop.util.Shell: void runCommand()>/java.lang.ProcessBuilder.start/0	<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>	<java.lang.ProcessBuilder: java.lang.Process start()>	<<immutable-context>>	<org.apache.hadoop.util.Shell: void runCommand()>/java.lang.ProcessBuilder.start/1	<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.lang.String)>	<<immutable-context>>	<org.apache.hadoop.util.Shell: java.io.File checkHadoopHomeInner(java.lang.String)>/java.io.File.<init>/0	<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.io.File,java.lang.String)>	<<immutable-context>>	<org.apache.hadoop.util.Shell: java.io.File getQualifiedBinInner(java.io.File,java.lang.String)>/java.io.File.<init>/0	<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.io.File,java.lang.String)>	<<immutable-context>>	<org.apache.hadoop.util.Shell: java.io.File getQualifiedBinInner(java.io.File,java.lang.String)>/java.io.File.<init>/1	<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>	<java.lang.ProcessBuilder: java.lang.Process start()>	<<immutable-context>>	<org.apache.hadoop.util.Shell: void runCommand()>/java.lang.ProcessBuilder.start/0	<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>	<java.lang.ProcessBuilder: java.lang.Process start()>	<<immutable-context>>	<org.apache.hadoop.util.Shell: void runCommand()>/java.lang.ProcessBuilder.start/1	<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.lang.String)>	<<immutable-context>>	<org.apache.hadoop.util.Shell: java.io.File checkHadoopHomeInner(java.lang.String)>/java.io.File.<init>/0	<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.io.File,java.lang.String)>	<<immutable-context>>	<org.apache.hadoop.util.Shell: java.io.File getQualifiedBinInner(java.io.File,java.lang.String)>/java.io.File.<init>/0	<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.io.File,java.lang.String)>	<<immutable-context>>	<org.apache.hadoop.util.Shell: java.io.File getQualifiedBinInner(java.io.File,java.lang.String)>/java.io.File.<init>/1	<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.LinkedBlockingQueue: void readObject(java.io.ObjectInputStream)>	<java.lang.ProcessBuilder: java.lang.Process start()>	<<immutable-context>>	<org.apache.hadoop.util.Shell: void runCommand()>/java.lang.ProcessBuilder.start/0	<java.util.concurrent.LinkedBlockingQueue: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.LinkedBlockingQueue: void readObject(java.io.ObjectInputStream)>	<java.lang.ProcessBuilder: java.lang.Process start()>	<<immutable-context>>	<org.apache.hadoop.util.Shell: void runCommand()>/java.lang.ProcessBuilder.start/1	<java.util.concurrent.LinkedBlockingQueue: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.LinkedBlockingQueue: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.lang.String)>	<<immutable-context>>	<org.apache.hadoop.util.Shell: java.io.File checkHadoopHomeInner(java.lang.String)>/java.io.File.<init>/0	<java.util.concurrent.LinkedBlockingQueue: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.LinkedBlockingQueue: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.io.File,java.lang.String)>	<<immutable-context>>	<org.apache.hadoop.util.Shell: java.io.File getQualifiedBinInner(java.io.File,java.lang.String)>/java.io.File.<init>/0	<java.util.concurrent.LinkedBlockingQueue: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.LinkedBlockingQueue: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.io.File,java.lang.String)>	<<immutable-context>>	<org.apache.hadoop.util.Shell: java.io.File getQualifiedBinInner(java.io.File,java.lang.String)>/java.io.File.<init>/1	<java.util.concurrent.LinkedBlockingQueue: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.HashSet: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>	<<immutable-context>>	<clojure.lang.Reflector: java.lang.Object invokeConstructor(java.lang.Class,java.lang.Object[])>/java.lang.reflect.Constructor.newInstance/0	<java.util.HashSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.HashSet: void readObject(java.io.ObjectInputStream)>	<java.lang.ProcessBuilder: java.lang.Process start()>	<<immutable-context>>	<clojure.java.process$start: java.lang.Object invokeStatic(clojure.lang.ISeq)>/java.lang.ProcessBuilder.start/0	<java.util.HashSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.HashSet: void readObject(java.io.ObjectInputStream)>	<java.lang.ProcessBuilder: java.lang.Process start()>	<<immutable-context>>	<clojure.java.browse$browse_url$fn__11861: java.lang.Object invoke()>/java.lang.ProcessBuilder.start/0	<java.util.HashSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.HashSet: void readObject(java.io.ObjectInputStream)>	<java.io.FileOutputStream: void write(byte[])>	<<immutable-context>>	<clojure.lang.Compiler: void writeClassFile(java.lang.String,byte[])>/java.io.FileOutputStream.write/0	<java.util.HashSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.HashSet: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.lang.String)>	<<immutable-context>>	<clojure.java.io$fn__11525: java.lang.Object invokeStatic(java.lang.Object)>/java.io.File.<init>/0	<java.util.HashSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.HashSet: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.lang.String)>	<<immutable-context>>	<clojure.java.io$fn__11651: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.File.<init>/0	<java.util.HashSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.HashSet: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.lang.String)>	<<immutable-context>>	<clojure.lang.Compiler: java.lang.Object eval(java.lang.Object,boolean)>/java.io.File.<init>/0	<java.util.HashSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.HashSet: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.lang.String)>	<<immutable-context>>	<clojure.lang.Compiler: void writeClassFile(java.lang.String,byte[])>/java.io.File.<init>/0	<java.util.HashSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.HashSet: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.lang.String)>	<<immutable-context>>	<clojure.lang.Compiler: void writeClassFile(java.lang.String,byte[])>/java.io.File.<init>/1	<java.util.HashSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.HashSet: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.lang.String)>	<<immutable-context>>	<clojure.java.io$fn__11653: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.File.<init>/0	<java.util.HashSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.HashSet: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.io.File,java.lang.String)>	<<immutable-context>>	<clojure.java.io$file: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.File.<init>/0	<java.util.HashSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.HashSet: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(int)>	<<immutable-context>>	<clojure.pprint.proxy$java.io.Writer$ff19274a: void write(int)>/java.io.Writer.write/0	<java.util.HashSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.HashSet: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(int)>	<<immutable-context>>	<clojure.pprint$c_write_char: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.HashSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.HashSet: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(int)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/1	<java.util.HashSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.HashSet: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(int)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/3	<java.util.HashSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.HashSet: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(int)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/4	<java.util.HashSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.HashSet: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(int)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/6	<java.util.HashSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.HashSet: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(int)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/14	<java.util.HashSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.HashSet: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(int)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/15	<java.util.HashSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.HashSet: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(int)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/16	<java.util.HashSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.HashSet: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(int)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/17	<java.util.HashSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.HashSet: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(int)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/19	<java.util.HashSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.HashSet: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(int)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/20	<java.util.HashSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.HashSet: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(int)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/21	<java.util.HashSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.HashSet: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(int)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/22	<java.util.HashSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.HashSet: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(int)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/25	<java.util.HashSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.HashSet: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(int)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/26	<java.util.HashSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.HashSet: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(int)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/27	<java.util.HashSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.HashSet: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(int)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/34	<java.util.HashSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.HashSet: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(int)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/38	<java.util.HashSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.HashSet: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(int)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/40	<java.util.HashSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.HashSet: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(int)>	<<immutable-context>>	<clojure.lang.RT: void printInnerSeq(clojure.lang.ISeq,java.io.Writer)>/java.io.Writer.write/0	<java.util.HashSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.HashSet: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(int)>	<<immutable-context>>	<clojure.pprint$p_write_char: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.HashSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.HashSet: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7375: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.HashSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.HashSet: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.instant$print_date: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.HashSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.HashSet: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.instant$print_date: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/1	<java.util.HashSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.HashSet: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.instant$print_date: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/2	<java.util.HashSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.HashSet: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_meta: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.HashSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.HashSet: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_meta: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/1	<java.util.HashSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.HashSet: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7393: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.HashSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.HashSet: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7484: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.HashSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.HashSet: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$emit_nl: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.HashSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.HashSet: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$emit_nl: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/1	<java.util.HashSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.HashSet: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$emit_nl: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/2	<java.util.HashSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.HashSet: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_set: java.lang.Object invokeStatic(java.lang.Object)>/java.io.Writer.write/0	<java.util.HashSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.HashSet: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_simple_list$fn__11152: java.lang.Object invoke()>/java.io.Writer.write/0	<java.util.HashSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.HashSet: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_simple_list$fn__11152: java.lang.Object invoke()>/java.io.Writer.write/1	<java.util.HashSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.HashSet: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_binding_form$fn__11351: java.lang.Object invoke()>/java.io.Writer.write/0	<java.util.HashSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.HashSet: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_binding_form$fn__11351: java.lang.Object invoke()>/java.io.Writer.write/1	<java.util.HashSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.HashSet: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_binding_form$fn__11351: java.lang.Object invoke()>/java.io.Writer.write/2	<java.util.HashSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.HashSet: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/0	<java.util.HashSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.HashSet: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/2	<java.util.HashSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.HashSet: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/5	<java.util.HashSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.HashSet: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/7	<java.util.HashSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.HashSet: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/8	<java.util.HashSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.HashSet: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/9	<java.util.HashSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.HashSet: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/10	<java.util.HashSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.HashSet: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/11	<java.util.HashSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.HashSet: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/12	<java.util.HashSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.HashSet: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/13	<java.util.HashSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.HashSet: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/18	<java.util.HashSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.HashSet: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/23	<java.util.HashSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.HashSet: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/24	<java.util.HashSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.HashSet: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/28	<java.util.HashSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.HashSet: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/29	<java.util.HashSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.HashSet: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/30	<java.util.HashSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.HashSet: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/31	<java.util.HashSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.HashSet: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/32	<java.util.HashSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.HashSet: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/33	<java.util.HashSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.HashSet: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/35	<java.util.HashSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.HashSet: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/36	<java.util.HashSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.HashSet: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/37	<java.util.HashSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.HashSet: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/39	<java.util.HashSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.HashSet: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/41	<java.util.HashSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.HashSet: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/42	<java.util.HashSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.HashSet: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/43	<java.util.HashSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.HashSet: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/44	<java.util.HashSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.HashSet: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/45	<java.util.HashSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.HashSet: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_map: java.lang.Object invokeStatic(java.lang.Object)>/java.io.Writer.write/0	<java.util.HashSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.HashSet: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7403: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.HashSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.HashSet: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.uuid$fn__8526: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.HashSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.HashSet: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_vector: java.lang.Object invokeStatic(java.lang.Object)>/java.io.Writer.write/0	<java.util.HashSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.HashSet: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7511: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.HashSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.HashSet: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7511: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/1	<java.util.HashSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.HashSet: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_simple: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.HashSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.HashSet: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_ns_reference$fn__11215: java.lang.Object invoke()>/java.io.Writer.write/0	<java.util.HashSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.HashSet: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7509: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.HashSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.HashSet: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7509: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/1	<java.util.HashSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.HashSet: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7509: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/2	<java.util.HashSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.HashSet: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7509: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/3	<java.util.HashSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.HashSet: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7509: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/4	<java.util.HashSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.HashSet: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7509: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/5	<java.util.HashSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.HashSet: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7509: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/6	<java.util.HashSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.HashSet: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7509: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/7	<java.util.HashSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.HashSet: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_simple_code_list$fn__11408: java.lang.Object invoke()>/java.io.Writer.write/0	<java.util.HashSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.HashSet: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_simple_code_list$fn__11408: java.lang.Object invoke()>/java.io.Writer.write/1	<java.util.HashSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.HashSet: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$fn__10207: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.HashSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.HashSet: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_sequential: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.HashSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.HashSet: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_sequential: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>/java.io.Writer.write/1	<java.util.HashSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.HashSet: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_sequential: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>/java.io.Writer.write/2	<java.util.HashSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.HashSet: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_sequential: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>/java.io.Writer.write/3	<java.util.HashSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.HashSet: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_sequential: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>/java.io.Writer.write/4	<java.util.HashSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.HashSet: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_sequential: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>/java.io.Writer.write/5	<java.util.HashSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.HashSet: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_condp: java.lang.Object invokeStatic(java.lang.Object)>/java.io.Writer.write/0	<java.util.HashSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.HashSet: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$fn__10219: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.HashSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.HashSet: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7532: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.HashSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.HashSet: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7532: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/1	<java.util.HashSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.HashSet: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$fn__10216: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.HashSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.HashSet: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7419: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.HashSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.HashSet: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7419: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/1	<java.util.HashSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.HashSet: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.instant$print_calendar: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.HashSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.HashSet: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.instant$print_calendar: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/2	<java.util.HashSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.HashSet: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.instant$print_calendar: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/4	<java.util.HashSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.HashSet: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_set$fn__11181: java.lang.Object invoke()>/java.io.Writer.write/0	<java.util.HashSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.HashSet: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_set$fn__11181: java.lang.Object invoke()>/java.io.Writer.write/1	<java.util.HashSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.HashSet: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7468: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.HashSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.HashSet: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7468: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/1	<java.util.HashSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.HashSet: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7468: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/2	<java.util.HashSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.HashSet: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7468: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/3	<java.util.HashSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.HashSet: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.instant$print_timestamp: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.HashSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.HashSet: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.instant$print_timestamp: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/1	<java.util.HashSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.HashSet: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.instant$print_timestamp: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/2	<java.util.HashSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.HashSet: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.instant$print_timestamp: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/3	<java.util.HashSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.HashSet: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7478: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.HashSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.HashSet: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7478: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/1	<java.util.HashSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.HashSet: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_ideref: java.lang.Object invokeStatic(java.lang.Object)>/java.io.Writer.write/0	<java.util.HashSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.HashSet: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_simple_code_list: java.lang.Object invokeStatic(java.lang.Object)>/java.io.Writer.write/0	<java.util.HashSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.HashSet: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7366: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.HashSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.HashSet: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_map$fn__11173: java.lang.Object invoke()>/java.io.Writer.write/0	<java.util.HashSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.HashSet: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_map$fn__11173: java.lang.Object invoke()>/java.io.Writer.write/1	<java.util.HashSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.HashSet: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_map$fn__11173: java.lang.Object invoke()>/java.io.Writer.write/2	<java.util.HashSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.HashSet: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_meta: java.lang.Object invokeStatic(java.lang.Object)>/java.io.Writer.write/0	<java.util.HashSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.HashSet: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_meta: java.lang.Object invokeStatic(java.lang.Object)>/java.io.Writer.write/1	<java.util.HashSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.HashSet: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_throwable$print_via__7561: java.lang.Object invoke(java.lang.Object)>/java.io.Writer.write/0	<java.util.HashSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.HashSet: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_throwable$print_via__7561: java.lang.Object invoke(java.lang.Object)>/java.io.Writer.write/1	<java.util.HashSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.HashSet: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_throwable$print_via__7561: java.lang.Object invoke(java.lang.Object)>/java.io.Writer.write/2	<java.util.HashSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.HashSet: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_throwable$print_via__7561: java.lang.Object invoke(java.lang.Object)>/java.io.Writer.write/3	<java.util.HashSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.HashSet: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_throwable$print_via__7561: java.lang.Object invoke(java.lang.Object)>/java.io.Writer.write/4	<java.util.HashSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.HashSet: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7515: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.HashSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.HashSet: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7515: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/1	<java.util.HashSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.HashSet: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7515: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/2	<java.util.HashSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.HashSet: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_throwable: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.HashSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.HashSet: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_throwable: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/1	<java.util.HashSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.HashSet: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_throwable: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/2	<java.util.HashSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.HashSet: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_throwable: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/3	<java.util.HashSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.HashSet: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_throwable: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/4	<java.util.HashSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.HashSet: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_throwable: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/5	<java.util.HashSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.HashSet: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_throwable: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/6	<java.util.HashSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.HashSet: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_throwable: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/7	<java.util.HashSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.HashSet: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_throwable: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/8	<java.util.HashSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.HashSet: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_throwable: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/9	<java.util.HashSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.HashSet: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_throwable: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/10	<java.util.HashSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.HashSet: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_simple_list: java.lang.Object invokeStatic(java.lang.Object)>/java.io.Writer.write/0	<java.util.HashSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.HashSet: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7584: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.HashSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.HashSet: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7584: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/1	<java.util.HashSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.HashSet: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7417: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.HashSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.HashSet: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7417: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/1	<java.util.HashSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.HashSet: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7417: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/2	<java.util.HashSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.HashSet: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7417: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/3	<java.util.HashSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.HashSet: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7507: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.HashSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.HashSet: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7480: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.HashSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.HashSet: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7480: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/1	<java.util.HashSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.HashSet: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_ns: java.lang.Object invokeStatic(java.lang.Object)>/java.io.Writer.write/0	<java.util.HashSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.HashSet: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_condp$fn__11386: java.lang.Object invoke()>/java.io.Writer.write/0	<java.util.HashSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.HashSet: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_condp$fn__11386: java.lang.Object invoke()>/java.io.Writer.write/1	<java.util.HashSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.HashSet: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_condp$fn__11386: java.lang.Object invoke()>/java.io.Writer.write/2	<java.util.HashSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.HashSet: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7381: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.HashSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.HashSet: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7381: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/1	<java.util.HashSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.HashSet: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7381: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/2	<java.util.HashSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.HashSet: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7381: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/3	<java.util.HashSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.HashSet: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$write_white_space: java.lang.Object invokeStatic(java.lang.Object)>/java.io.Writer.write/0	<java.util.HashSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.HashSet: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7383: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.HashSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.HashSet: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7383: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/1	<java.util.HashSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.HashSet: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7383: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/2	<java.util.HashSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.HashSet: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7383: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/3	<java.util.HashSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.HashSet: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_binding_form: java.lang.Object invokeStatic(java.lang.Object)>/java.io.Writer.write/0	<java.util.HashSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.HashSet: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$write_tokens: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.HashSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.HashSet: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$write_tokens: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object)>/java.io.Writer.write/1	<java.util.HashSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.HashSet: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$write_tokens: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object)>/java.io.Writer.write/2	<java.util.HashSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.HashSet: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_ctor: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.HashSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.HashSet: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_ctor: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object)>/java.io.Writer.write/1	<java.util.HashSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.HashSet: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_ctor: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object)>/java.io.Writer.write/2	<java.util.HashSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.HashSet: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_ctor: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object)>/java.io.Writer.write/3	<java.util.HashSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.HashSet: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_tagged_object: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.HashSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.HashSet: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_tagged_object: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object)>/java.io.Writer.write/1	<java.util.HashSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.HashSet: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_tagged_object: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object)>/java.io.Writer.write/2	<java.util.HashSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.HashSet: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_tagged_object: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object)>/java.io.Writer.write/3	<java.util.HashSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.HashSet: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_tagged_object: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object)>/java.io.Writer.write/4	<java.util.HashSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.HashSet: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_ns_reference: java.lang.Object invokeStatic(java.lang.Object)>/java.io.Writer.write/0	<java.util.HashSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.HashSet: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_reader_macro: java.lang.Object invokeStatic(java.lang.Object)>/java.io.Writer.write/0	<java.util.HashSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.HashSet: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7379: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.HashSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.HashSet: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$format_logical_block: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.HashSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.HashSet: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_defn: java.lang.Object invokeStatic(java.lang.Object)>/java.io.Writer.write/0	<java.util.HashSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.HashSet: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_cond: java.lang.Object invokeStatic(java.lang.Object)>/java.io.Writer.write/0	<java.util.HashSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.HashSet: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7513: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.HashSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.HashSet: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7513: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/1	<java.util.HashSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.HashSet: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_cond$fn__11379: java.lang.Object invoke()>/java.io.Writer.write/0	<java.util.HashSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.HashSet: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_cond$fn__11379: java.lang.Object invoke()>/java.io.Writer.write/1	<java.util.HashSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.HashSet: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_cond$fn__11379: java.lang.Object invoke()>/java.io.Writer.write/2	<java.util.HashSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.HashSet: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_cond$fn__11379: java.lang.Object invoke()>/java.io.Writer.write/3	<java.util.HashSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.HashSet: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_vector$fn__11158: java.lang.Object invoke()>/java.io.Writer.write/0	<java.util.HashSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.HashSet: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_vector$fn__11158: java.lang.Object invoke()>/java.io.Writer.write/1	<java.util.HashSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.HashSet: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_let: java.lang.Object invokeStatic(java.lang.Object)>/java.io.Writer.write/0	<java.util.HashSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.HashSet: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7582: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.HashSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.HashSet: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7582: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/1	<java.util.HashSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.HashSet: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String,int,int)>	<<immutable-context>>	<clojure.instant$print_calendar: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/1	<java.util.HashSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.HashSet: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String,int,int)>	<<immutable-context>>	<clojure.instant$print_calendar: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/3	<java.util.HashSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.HashSet: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: java.io.Writer append(java.lang.CharSequence)>	<<immutable-context>>	<clojure.core$newline: java.lang.Object invokeStatic()>/java.io.Writer.append/0	<java.util.HashSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.HashSet: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: java.io.Writer append(char)>	<<immutable-context>>	<clojure.core$fn__7515: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.append/3	<java.util.HashSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.HashSet: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: java.io.Writer append(char)>	<<immutable-context>>	<clojure.core$fn__7484: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.append/0	<java.util.HashSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.HashSet: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: java.io.Writer append(char)>	<<immutable-context>>	<clojure.core$fn__7484: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.append/1	<java.util.HashSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.HashSet: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: java.io.Writer append(char)>	<<immutable-context>>	<clojure.core$fn__7484: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.append/2	<java.util.HashSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.HashSet: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: java.io.Writer append(char)>	<<immutable-context>>	<clojure.core$fn__7419: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.append/0	<java.util.HashSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.HashSet: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: java.io.Writer append(char)>	<<immutable-context>>	<clojure.core$fn__7419: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.append/1	<java.util.HashSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.HashSet: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: java.io.Writer append(char)>	<<immutable-context>>	<clojure.core$fn__7419: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.append/2	<java.util.HashSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.HashSet: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: java.io.Writer append(char)>	<<immutable-context>>	<clojure.core$fn__7515: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.append/0	<java.util.HashSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.HashSet: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: java.io.Writer append(char)>	<<immutable-context>>	<clojure.core$fn__7515: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.append/1	<java.util.HashSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.HashSet: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: java.io.Writer append(char)>	<<immutable-context>>	<clojure.core$fn__7515: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.append/2	<java.util.HashSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.HashSet: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: java.io.Writer append(char)>	<<immutable-context>>	<clojure.core$pr: java.lang.Object invokeStatic(java.lang.Object,clojure.lang.ISeq)>/java.io.Writer.append/0	<java.util.HashSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.HashSet: void readObject(java.io.ObjectInputStream)>	<java.io.FileInputStream: void <init>(java.io.File)>	<<immutable-context>>	<clojure.java.io$fn__11687: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object)>/java.io.FileInputStream.<init>/0	<java.util.HashSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.HashSet: void readObject(java.io.ObjectInputStream)>	<java.io.FileInputStream: void <init>(java.io.File)>	<<immutable-context>>	<clojure.java.io$fn__11685: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object)>/java.io.FileInputStream.<init>/0	<java.util.HashSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.HashSet: void readObject(java.io.ObjectInputStream)>	<java.io.FileInputStream: void <init>(java.io.File)>	<<immutable-context>>	<clojure.java.io$fn__11639: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.FileInputStream.<init>/0	<java.util.HashSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.HashSet: void readObject(java.io.ObjectInputStream)>	<java.io.FileInputStream: void <init>(java.io.File)>	<<immutable-context>>	<clojure.java.io$fn__11689: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object)>/java.io.FileInputStream.<init>/0	<java.util.HashSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.HashSet: void readObject(java.io.ObjectInputStream)>	<java.io.FileInputStream: void <init>(java.io.File)>	<<immutable-context>>	<clojure.java.io$fn__11643: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.FileInputStream.<init>/0	<java.util.HashSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.HashSet: void readObject(java.io.ObjectInputStream)>	<java.io.FileOutputStream: void <init>(java.io.File)>	<<immutable-context>>	<clojure.java.io$fn__11683: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object)>/java.io.FileOutputStream.<init>/0	<java.util.HashSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.HashSet: void readObject(java.io.ObjectInputStream)>	<java.io.FileOutputStream: void <init>(java.io.File)>	<<immutable-context>>	<clojure.java.io$fn__11689: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object)>/java.io.FileOutputStream.<init>/0	<java.util.HashSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.HashSet: void readObject(java.io.ObjectInputStream)>	<java.io.FileOutputStream: void <init>(java.io.File)>	<<immutable-context>>	<clojure.java.io$fn__11677: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object)>/java.io.FileOutputStream.<init>/0	<java.util.HashSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.HashSet: void readObject(java.io.ObjectInputStream)>	<java.io.FileOutputStream: void <init>(java.io.File)>	<<immutable-context>>	<clojure.lang.Compiler: void writeClassFile(java.lang.String,byte[])>/java.io.FileOutputStream.<init>/0	<java.util.HashSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.HashSet: void readObject(java.io.ObjectInputStream)>	<java.io.FileOutputStream: void <init>(java.io.File,boolean)>	<<immutable-context>>	<clojure.java.io$fn__11641: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.FileOutputStream.<init>/0	<java.util.HashSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.HashSet: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(int)>	<<immutable-context>>	<clojure.pprint$c_write_char: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.HashSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.HashSet: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(int)>	<<immutable-context>>	<clojure.pprint$p_write_char: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.HashSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.HashSet: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$emit_nl: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.HashSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.HashSet: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$emit_nl: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/1	<java.util.HashSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.HashSet: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$emit_nl: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/2	<java.util.HashSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.HashSet: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_set: java.lang.Object invokeStatic(java.lang.Object)>/java.io.Writer.write/0	<java.util.HashSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.HashSet: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_simple_list$fn__11152: java.lang.Object invoke()>/java.io.Writer.write/0	<java.util.HashSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.HashSet: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_simple_list$fn__11152: java.lang.Object invoke()>/java.io.Writer.write/1	<java.util.HashSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.HashSet: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_binding_form$fn__11351: java.lang.Object invoke()>/java.io.Writer.write/0	<java.util.HashSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.HashSet: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_binding_form$fn__11351: java.lang.Object invoke()>/java.io.Writer.write/1	<java.util.HashSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.HashSet: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_binding_form$fn__11351: java.lang.Object invoke()>/java.io.Writer.write/2	<java.util.HashSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.HashSet: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_map: java.lang.Object invokeStatic(java.lang.Object)>/java.io.Writer.write/0	<java.util.HashSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.HashSet: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_vector: java.lang.Object invokeStatic(java.lang.Object)>/java.io.Writer.write/0	<java.util.HashSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.HashSet: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_ns_reference$fn__11215: java.lang.Object invoke()>/java.io.Writer.write/0	<java.util.HashSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.HashSet: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_simple_code_list$fn__11408: java.lang.Object invoke()>/java.io.Writer.write/0	<java.util.HashSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.HashSet: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_simple_code_list$fn__11408: java.lang.Object invoke()>/java.io.Writer.write/1	<java.util.HashSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.HashSet: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$fn__10207: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.HashSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.HashSet: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_condp: java.lang.Object invokeStatic(java.lang.Object)>/java.io.Writer.write/0	<java.util.HashSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.HashSet: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$fn__10219: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.HashSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.HashSet: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$fn__10216: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.HashSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.HashSet: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_set$fn__11181: java.lang.Object invoke()>/java.io.Writer.write/0	<java.util.HashSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.HashSet: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_set$fn__11181: java.lang.Object invoke()>/java.io.Writer.write/1	<java.util.HashSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.HashSet: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_ideref: java.lang.Object invokeStatic(java.lang.Object)>/java.io.Writer.write/0	<java.util.HashSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.HashSet: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_simple_code_list: java.lang.Object invokeStatic(java.lang.Object)>/java.io.Writer.write/0	<java.util.HashSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.HashSet: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_map$fn__11173: java.lang.Object invoke()>/java.io.Writer.write/0	<java.util.HashSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.HashSet: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_map$fn__11173: java.lang.Object invoke()>/java.io.Writer.write/1	<java.util.HashSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.HashSet: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_map$fn__11173: java.lang.Object invoke()>/java.io.Writer.write/2	<java.util.HashSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.HashSet: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_meta: java.lang.Object invokeStatic(java.lang.Object)>/java.io.Writer.write/0	<java.util.HashSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.HashSet: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_meta: java.lang.Object invokeStatic(java.lang.Object)>/java.io.Writer.write/1	<java.util.HashSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.HashSet: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_simple_list: java.lang.Object invokeStatic(java.lang.Object)>/java.io.Writer.write/0	<java.util.HashSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.HashSet: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_ns: java.lang.Object invokeStatic(java.lang.Object)>/java.io.Writer.write/0	<java.util.HashSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.HashSet: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_condp$fn__11386: java.lang.Object invoke()>/java.io.Writer.write/0	<java.util.HashSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.HashSet: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_condp$fn__11386: java.lang.Object invoke()>/java.io.Writer.write/1	<java.util.HashSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.HashSet: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_condp$fn__11386: java.lang.Object invoke()>/java.io.Writer.write/2	<java.util.HashSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.HashSet: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$write_white_space: java.lang.Object invokeStatic(java.lang.Object)>/java.io.Writer.write/0	<java.util.HashSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.HashSet: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_binding_form: java.lang.Object invokeStatic(java.lang.Object)>/java.io.Writer.write/0	<java.util.HashSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.HashSet: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$write_tokens: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.HashSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.HashSet: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$write_tokens: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object)>/java.io.Writer.write/1	<java.util.HashSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.HashSet: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$write_tokens: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object)>/java.io.Writer.write/2	<java.util.HashSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.HashSet: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_ns_reference: java.lang.Object invokeStatic(java.lang.Object)>/java.io.Writer.write/0	<java.util.HashSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.HashSet: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_reader_macro: java.lang.Object invokeStatic(java.lang.Object)>/java.io.Writer.write/0	<java.util.HashSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.HashSet: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$format_logical_block: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.HashSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.HashSet: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_defn: java.lang.Object invokeStatic(java.lang.Object)>/java.io.Writer.write/0	<java.util.HashSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.HashSet: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_cond: java.lang.Object invokeStatic(java.lang.Object)>/java.io.Writer.write/0	<java.util.HashSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.HashSet: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_cond$fn__11379: java.lang.Object invoke()>/java.io.Writer.write/0	<java.util.HashSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.HashSet: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_cond$fn__11379: java.lang.Object invoke()>/java.io.Writer.write/1	<java.util.HashSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.HashSet: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_cond$fn__11379: java.lang.Object invoke()>/java.io.Writer.write/2	<java.util.HashSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.HashSet: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_cond$fn__11379: java.lang.Object invoke()>/java.io.Writer.write/3	<java.util.HashSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.HashSet: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_vector$fn__11158: java.lang.Object invoke()>/java.io.Writer.write/0	<java.util.HashSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.HashSet: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_vector$fn__11158: java.lang.Object invoke()>/java.io.Writer.write/1	<java.util.HashSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.HashSet: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_let: java.lang.Object invokeStatic(java.lang.Object)>/java.io.Writer.write/0	<java.util.HashSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.HashSet: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void println(java.lang.String)>	<<immutable-context>>	<clojure.lang.Namespace: boolean checkReplacement(clojure.lang.Symbol,java.lang.Object,java.lang.Object)>/java.io.PrintWriter.println/0	<java.util.HashSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.HashSet: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void println(java.lang.String)>	<<immutable-context>>	<clojure.lang.Namespace: boolean checkReplacement(clojure.lang.Symbol,java.lang.Object,java.lang.Object)>/java.io.PrintWriter.println/1	<java.util.HashSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.HashSet: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: java.io.Writer append(char)>	<<immutable-context>>	<clojure.core$pr: java.lang.Object invokeStatic(java.lang.Object,clojure.lang.ISeq)>/java.io.Writer.append/0	<java.util.HashSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.HashSet: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: java.io.Writer append(java.lang.CharSequence)>	<<immutable-context>>	<clojure.core$newline: java.lang.Object invokeStatic()>/java.io.Writer.append/0	<java.util.HashSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>	<<immutable-context>>	<clojure.lang.Reflector: java.lang.Object invokeConstructor(java.lang.Class,java.lang.Object[])>/java.lang.reflect.Constructor.newInstance/0	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.lang.ProcessBuilder: java.lang.Process start()>	<<immutable-context>>	<clojure.java.process$start: java.lang.Object invokeStatic(clojure.lang.ISeq)>/java.lang.ProcessBuilder.start/0	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.lang.ProcessBuilder: java.lang.Process start()>	<<immutable-context>>	<clojure.java.browse$browse_url$fn__11861: java.lang.Object invoke()>/java.lang.ProcessBuilder.start/0	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.FileOutputStream: void write(byte[])>	<<immutable-context>>	<clojure.lang.Compiler: void writeClassFile(java.lang.String,byte[])>/java.io.FileOutputStream.write/0	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.lang.String)>	<<immutable-context>>	<clojure.java.io$fn__11525: java.lang.Object invokeStatic(java.lang.Object)>/java.io.File.<init>/0	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.lang.String)>	<<immutable-context>>	<clojure.java.io$fn__11651: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.File.<init>/0	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.lang.String)>	<<immutable-context>>	<clojure.lang.Compiler: java.lang.Object eval(java.lang.Object,boolean)>/java.io.File.<init>/0	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.lang.String)>	<<immutable-context>>	<clojure.lang.Compiler: void writeClassFile(java.lang.String,byte[])>/java.io.File.<init>/0	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.lang.String)>	<<immutable-context>>	<clojure.lang.Compiler: void writeClassFile(java.lang.String,byte[])>/java.io.File.<init>/1	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.lang.String)>	<<immutable-context>>	<clojure.java.io$fn__11653: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.File.<init>/0	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.io.File,java.lang.String)>	<<immutable-context>>	<clojure.java.io$file: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.File.<init>/0	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(int)>	<<immutable-context>>	<clojure.pprint.proxy$java.io.Writer$ff19274a: void write(int)>/java.io.Writer.write/0	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(int)>	<<immutable-context>>	<clojure.pprint$c_write_char: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(int)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/1	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(int)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/3	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(int)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/4	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(int)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/6	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(int)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/14	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(int)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/15	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(int)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/16	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(int)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/17	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(int)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/19	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(int)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/20	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(int)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/21	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(int)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/22	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(int)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/25	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(int)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/26	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(int)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/27	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(int)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/34	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(int)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/38	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(int)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/40	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(int)>	<<immutable-context>>	<clojure.lang.RT: void printInnerSeq(clojure.lang.ISeq,java.io.Writer)>/java.io.Writer.write/0	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(int)>	<<immutable-context>>	<clojure.pprint$p_write_char: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7375: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.instant$print_date: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.instant$print_date: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/1	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.instant$print_date: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/2	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_meta: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_meta: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/1	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7393: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7484: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$emit_nl: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$emit_nl: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/1	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$emit_nl: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/2	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_set: java.lang.Object invokeStatic(java.lang.Object)>/java.io.Writer.write/0	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_simple_list$fn__11152: java.lang.Object invoke()>/java.io.Writer.write/0	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_simple_list$fn__11152: java.lang.Object invoke()>/java.io.Writer.write/1	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_binding_form$fn__11351: java.lang.Object invoke()>/java.io.Writer.write/0	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_binding_form$fn__11351: java.lang.Object invoke()>/java.io.Writer.write/1	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_binding_form$fn__11351: java.lang.Object invoke()>/java.io.Writer.write/2	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/0	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/2	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/5	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/7	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/8	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/9	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/10	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/11	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/12	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/13	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/18	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/23	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/24	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/28	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/29	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/30	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/31	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/32	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/33	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/35	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/36	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/37	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/39	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/41	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/42	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/43	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/44	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/45	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_map: java.lang.Object invokeStatic(java.lang.Object)>/java.io.Writer.write/0	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7403: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.uuid$fn__8526: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_vector: java.lang.Object invokeStatic(java.lang.Object)>/java.io.Writer.write/0	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7511: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7511: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/1	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_simple: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_ns_reference$fn__11215: java.lang.Object invoke()>/java.io.Writer.write/0	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7509: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7509: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/1	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7509: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/2	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7509: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/3	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7509: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/4	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7509: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/5	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7509: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/6	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7509: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/7	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_simple_code_list$fn__11408: java.lang.Object invoke()>/java.io.Writer.write/0	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_simple_code_list$fn__11408: java.lang.Object invoke()>/java.io.Writer.write/1	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$fn__10207: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_sequential: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_sequential: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>/java.io.Writer.write/1	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_sequential: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>/java.io.Writer.write/2	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_sequential: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>/java.io.Writer.write/3	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_sequential: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>/java.io.Writer.write/4	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_sequential: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>/java.io.Writer.write/5	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_condp: java.lang.Object invokeStatic(java.lang.Object)>/java.io.Writer.write/0	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$fn__10219: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7532: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7532: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/1	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$fn__10216: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7419: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7419: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/1	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.instant$print_calendar: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.instant$print_calendar: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/2	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.instant$print_calendar: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/4	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_set$fn__11181: java.lang.Object invoke()>/java.io.Writer.write/0	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_set$fn__11181: java.lang.Object invoke()>/java.io.Writer.write/1	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7468: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7468: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/1	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7468: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/2	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7468: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/3	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.instant$print_timestamp: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.instant$print_timestamp: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/1	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.instant$print_timestamp: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/2	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.instant$print_timestamp: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/3	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7478: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7478: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/1	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_ideref: java.lang.Object invokeStatic(java.lang.Object)>/java.io.Writer.write/0	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_simple_code_list: java.lang.Object invokeStatic(java.lang.Object)>/java.io.Writer.write/0	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7366: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_map$fn__11173: java.lang.Object invoke()>/java.io.Writer.write/0	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_map$fn__11173: java.lang.Object invoke()>/java.io.Writer.write/1	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_map$fn__11173: java.lang.Object invoke()>/java.io.Writer.write/2	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_meta: java.lang.Object invokeStatic(java.lang.Object)>/java.io.Writer.write/0	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_meta: java.lang.Object invokeStatic(java.lang.Object)>/java.io.Writer.write/1	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_throwable$print_via__7561: java.lang.Object invoke(java.lang.Object)>/java.io.Writer.write/0	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_throwable$print_via__7561: java.lang.Object invoke(java.lang.Object)>/java.io.Writer.write/1	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_throwable$print_via__7561: java.lang.Object invoke(java.lang.Object)>/java.io.Writer.write/2	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_throwable$print_via__7561: java.lang.Object invoke(java.lang.Object)>/java.io.Writer.write/3	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_throwable$print_via__7561: java.lang.Object invoke(java.lang.Object)>/java.io.Writer.write/4	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7515: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7515: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/1	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7515: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/2	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_throwable: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_throwable: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/1	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_throwable: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/2	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_throwable: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/3	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_throwable: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/4	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_throwable: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/5	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_throwable: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/6	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_throwable: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/7	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_throwable: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/8	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_throwable: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/9	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_throwable: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/10	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_simple_list: java.lang.Object invokeStatic(java.lang.Object)>/java.io.Writer.write/0	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7584: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7584: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/1	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7417: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7417: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/1	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7417: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/2	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7417: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/3	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7507: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7480: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7480: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/1	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_ns: java.lang.Object invokeStatic(java.lang.Object)>/java.io.Writer.write/0	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_condp$fn__11386: java.lang.Object invoke()>/java.io.Writer.write/0	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_condp$fn__11386: java.lang.Object invoke()>/java.io.Writer.write/1	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_condp$fn__11386: java.lang.Object invoke()>/java.io.Writer.write/2	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7381: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7381: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/1	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7381: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/2	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7381: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/3	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$write_white_space: java.lang.Object invokeStatic(java.lang.Object)>/java.io.Writer.write/0	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7383: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7383: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/1	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7383: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/2	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7383: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/3	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_binding_form: java.lang.Object invokeStatic(java.lang.Object)>/java.io.Writer.write/0	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$write_tokens: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$write_tokens: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object)>/java.io.Writer.write/1	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$write_tokens: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object)>/java.io.Writer.write/2	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_ctor: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_ctor: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object)>/java.io.Writer.write/1	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_ctor: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object)>/java.io.Writer.write/2	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_ctor: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object)>/java.io.Writer.write/3	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_tagged_object: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_tagged_object: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object)>/java.io.Writer.write/1	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_tagged_object: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object)>/java.io.Writer.write/2	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_tagged_object: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object)>/java.io.Writer.write/3	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_tagged_object: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object)>/java.io.Writer.write/4	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_ns_reference: java.lang.Object invokeStatic(java.lang.Object)>/java.io.Writer.write/0	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_reader_macro: java.lang.Object invokeStatic(java.lang.Object)>/java.io.Writer.write/0	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7379: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$format_logical_block: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_defn: java.lang.Object invokeStatic(java.lang.Object)>/java.io.Writer.write/0	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_cond: java.lang.Object invokeStatic(java.lang.Object)>/java.io.Writer.write/0	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7513: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7513: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/1	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_cond$fn__11379: java.lang.Object invoke()>/java.io.Writer.write/0	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_cond$fn__11379: java.lang.Object invoke()>/java.io.Writer.write/1	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_cond$fn__11379: java.lang.Object invoke()>/java.io.Writer.write/2	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_cond$fn__11379: java.lang.Object invoke()>/java.io.Writer.write/3	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_vector$fn__11158: java.lang.Object invoke()>/java.io.Writer.write/0	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_vector$fn__11158: java.lang.Object invoke()>/java.io.Writer.write/1	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_let: java.lang.Object invokeStatic(java.lang.Object)>/java.io.Writer.write/0	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7582: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7582: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/1	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String,int,int)>	<<immutable-context>>	<clojure.instant$print_calendar: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/1	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String,int,int)>	<<immutable-context>>	<clojure.instant$print_calendar: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/3	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: java.io.Writer append(java.lang.CharSequence)>	<<immutable-context>>	<clojure.core$newline: java.lang.Object invokeStatic()>/java.io.Writer.append/0	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: java.io.Writer append(char)>	<<immutable-context>>	<clojure.core$fn__7515: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.append/3	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: java.io.Writer append(char)>	<<immutable-context>>	<clojure.core$fn__7484: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.append/0	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: java.io.Writer append(char)>	<<immutable-context>>	<clojure.core$fn__7484: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.append/1	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: java.io.Writer append(char)>	<<immutable-context>>	<clojure.core$fn__7484: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.append/2	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: java.io.Writer append(char)>	<<immutable-context>>	<clojure.core$fn__7419: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.append/0	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: java.io.Writer append(char)>	<<immutable-context>>	<clojure.core$fn__7419: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.append/1	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: java.io.Writer append(char)>	<<immutable-context>>	<clojure.core$fn__7419: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.append/2	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: java.io.Writer append(char)>	<<immutable-context>>	<clojure.core$fn__7515: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.append/0	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: java.io.Writer append(char)>	<<immutable-context>>	<clojure.core$fn__7515: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.append/1	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: java.io.Writer append(char)>	<<immutable-context>>	<clojure.core$fn__7515: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.append/2	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: java.io.Writer append(char)>	<<immutable-context>>	<clojure.core$pr: java.lang.Object invokeStatic(java.lang.Object,clojure.lang.ISeq)>/java.io.Writer.append/0	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.FileInputStream: void <init>(java.io.File)>	<<immutable-context>>	<clojure.java.io$fn__11687: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object)>/java.io.FileInputStream.<init>/0	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.FileInputStream: void <init>(java.io.File)>	<<immutable-context>>	<clojure.java.io$fn__11685: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object)>/java.io.FileInputStream.<init>/0	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.FileInputStream: void <init>(java.io.File)>	<<immutable-context>>	<clojure.java.io$fn__11639: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.FileInputStream.<init>/0	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.FileInputStream: void <init>(java.io.File)>	<<immutable-context>>	<clojure.java.io$fn__11689: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object)>/java.io.FileInputStream.<init>/0	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.FileInputStream: void <init>(java.io.File)>	<<immutable-context>>	<clojure.java.io$fn__11643: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.FileInputStream.<init>/0	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.FileOutputStream: void <init>(java.io.File)>	<<immutable-context>>	<clojure.java.io$fn__11683: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object)>/java.io.FileOutputStream.<init>/0	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.FileOutputStream: void <init>(java.io.File)>	<<immutable-context>>	<clojure.java.io$fn__11689: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object)>/java.io.FileOutputStream.<init>/0	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.FileOutputStream: void <init>(java.io.File)>	<<immutable-context>>	<clojure.java.io$fn__11677: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object)>/java.io.FileOutputStream.<init>/0	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.FileOutputStream: void <init>(java.io.File)>	<<immutable-context>>	<clojure.lang.Compiler: void writeClassFile(java.lang.String,byte[])>/java.io.FileOutputStream.<init>/0	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.FileOutputStream: void <init>(java.io.File,boolean)>	<<immutable-context>>	<clojure.java.io$fn__11641: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.FileOutputStream.<init>/0	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(int)>	<<immutable-context>>	<clojure.pprint$c_write_char: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(int)>	<<immutable-context>>	<clojure.pprint$p_write_char: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$emit_nl: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$emit_nl: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/1	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$emit_nl: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/2	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_set: java.lang.Object invokeStatic(java.lang.Object)>/java.io.Writer.write/0	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_simple_list$fn__11152: java.lang.Object invoke()>/java.io.Writer.write/0	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_simple_list$fn__11152: java.lang.Object invoke()>/java.io.Writer.write/1	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_binding_form$fn__11351: java.lang.Object invoke()>/java.io.Writer.write/0	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_binding_form$fn__11351: java.lang.Object invoke()>/java.io.Writer.write/1	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_binding_form$fn__11351: java.lang.Object invoke()>/java.io.Writer.write/2	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_map: java.lang.Object invokeStatic(java.lang.Object)>/java.io.Writer.write/0	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_vector: java.lang.Object invokeStatic(java.lang.Object)>/java.io.Writer.write/0	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_ns_reference$fn__11215: java.lang.Object invoke()>/java.io.Writer.write/0	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_simple_code_list$fn__11408: java.lang.Object invoke()>/java.io.Writer.write/0	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_simple_code_list$fn__11408: java.lang.Object invoke()>/java.io.Writer.write/1	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$fn__10207: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_condp: java.lang.Object invokeStatic(java.lang.Object)>/java.io.Writer.write/0	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$fn__10219: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$fn__10216: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_set$fn__11181: java.lang.Object invoke()>/java.io.Writer.write/0	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_set$fn__11181: java.lang.Object invoke()>/java.io.Writer.write/1	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_ideref: java.lang.Object invokeStatic(java.lang.Object)>/java.io.Writer.write/0	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_simple_code_list: java.lang.Object invokeStatic(java.lang.Object)>/java.io.Writer.write/0	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_map$fn__11173: java.lang.Object invoke()>/java.io.Writer.write/0	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_map$fn__11173: java.lang.Object invoke()>/java.io.Writer.write/1	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_map$fn__11173: java.lang.Object invoke()>/java.io.Writer.write/2	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_meta: java.lang.Object invokeStatic(java.lang.Object)>/java.io.Writer.write/0	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_meta: java.lang.Object invokeStatic(java.lang.Object)>/java.io.Writer.write/1	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_simple_list: java.lang.Object invokeStatic(java.lang.Object)>/java.io.Writer.write/0	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_ns: java.lang.Object invokeStatic(java.lang.Object)>/java.io.Writer.write/0	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_condp$fn__11386: java.lang.Object invoke()>/java.io.Writer.write/0	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_condp$fn__11386: java.lang.Object invoke()>/java.io.Writer.write/1	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_condp$fn__11386: java.lang.Object invoke()>/java.io.Writer.write/2	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$write_white_space: java.lang.Object invokeStatic(java.lang.Object)>/java.io.Writer.write/0	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_binding_form: java.lang.Object invokeStatic(java.lang.Object)>/java.io.Writer.write/0	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$write_tokens: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$write_tokens: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object)>/java.io.Writer.write/1	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$write_tokens: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object)>/java.io.Writer.write/2	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_ns_reference: java.lang.Object invokeStatic(java.lang.Object)>/java.io.Writer.write/0	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_reader_macro: java.lang.Object invokeStatic(java.lang.Object)>/java.io.Writer.write/0	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$format_logical_block: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_defn: java.lang.Object invokeStatic(java.lang.Object)>/java.io.Writer.write/0	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_cond: java.lang.Object invokeStatic(java.lang.Object)>/java.io.Writer.write/0	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_cond$fn__11379: java.lang.Object invoke()>/java.io.Writer.write/0	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_cond$fn__11379: java.lang.Object invoke()>/java.io.Writer.write/1	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_cond$fn__11379: java.lang.Object invoke()>/java.io.Writer.write/2	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_cond$fn__11379: java.lang.Object invoke()>/java.io.Writer.write/3	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_vector$fn__11158: java.lang.Object invoke()>/java.io.Writer.write/0	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_vector$fn__11158: java.lang.Object invoke()>/java.io.Writer.write/1	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_let: java.lang.Object invokeStatic(java.lang.Object)>/java.io.Writer.write/0	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void println(java.lang.String)>	<<immutable-context>>	<clojure.lang.Namespace: boolean checkReplacement(clojure.lang.Symbol,java.lang.Object,java.lang.Object)>/java.io.PrintWriter.println/0	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void println(java.lang.String)>	<<immutable-context>>	<clojure.lang.Namespace: boolean checkReplacement(clojure.lang.Symbol,java.lang.Object,java.lang.Object)>/java.io.PrintWriter.println/1	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: java.io.Writer append(char)>	<<immutable-context>>	<clojure.core$pr: java.lang.Object invokeStatic(java.lang.Object,clojure.lang.ISeq)>/java.io.Writer.append/0	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: java.io.Writer append(java.lang.CharSequence)>	<<immutable-context>>	<clojure.core$newline: java.lang.Object invokeStatic()>/java.io.Writer.append/0	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>	<<immutable-context>>	<clojure.lang.Reflector: java.lang.Object invokeConstructor(java.lang.Class,java.lang.Object[])>/java.lang.reflect.Constructor.newInstance/0	<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>	<java.lang.ProcessBuilder: java.lang.Process start()>	<<immutable-context>>	<clojure.java.process$start: java.lang.Object invokeStatic(clojure.lang.ISeq)>/java.lang.ProcessBuilder.start/0	<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>	<java.io.FileOutputStream: void write(byte[])>	<<immutable-context>>	<clojure.lang.Compiler: void writeClassFile(java.lang.String,byte[])>/java.io.FileOutputStream.write/0	<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.lang.String)>	<<immutable-context>>	<clojure.java.io$fn__11525: java.lang.Object invokeStatic(java.lang.Object)>/java.io.File.<init>/0	<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.lang.String)>	<<immutable-context>>	<clojure.java.io$fn__11651: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.File.<init>/0	<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.lang.String)>	<<immutable-context>>	<clojure.lang.Compiler: java.lang.Object eval(java.lang.Object,boolean)>/java.io.File.<init>/0	<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.lang.String)>	<<immutable-context>>	<clojure.lang.Compiler: void writeClassFile(java.lang.String,byte[])>/java.io.File.<init>/0	<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.lang.String)>	<<immutable-context>>	<clojure.lang.Compiler: void writeClassFile(java.lang.String,byte[])>/java.io.File.<init>/1	<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.lang.String)>	<<immutable-context>>	<clojure.java.io$fn__11653: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.File.<init>/0	<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.io.File,java.lang.String)>	<<immutable-context>>	<clojure.java.io$file: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.File.<init>/0	<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(int)>	<<immutable-context>>	<clojure.pprint.proxy$java.io.Writer$ff19274a: void write(int)>/java.io.Writer.write/0	<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(int)>	<<immutable-context>>	<clojure.pprint$c_write_char: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(int)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/1	<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(int)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/3	<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(int)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/4	<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(int)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/6	<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(int)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/14	<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(int)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/15	<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(int)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/16	<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(int)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/17	<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(int)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/19	<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(int)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/20	<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(int)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/21	<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(int)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/22	<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(int)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/25	<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(int)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/26	<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(int)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/27	<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(int)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/34	<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(int)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/38	<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(int)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/40	<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(int)>	<<immutable-context>>	<clojure.lang.RT: void printInnerSeq(clojure.lang.ISeq,java.io.Writer)>/java.io.Writer.write/0	<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(int)>	<<immutable-context>>	<clojure.pprint$p_write_char: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7375: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.instant$print_date: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.instant$print_date: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/1	<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.instant$print_date: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/2	<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_meta: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_meta: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/1	<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7393: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7484: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$emit_nl: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$emit_nl: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/1	<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$emit_nl: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/2	<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/0	<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/2	<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/5	<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/7	<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/8	<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/9	<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/10	<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/11	<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/12	<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/13	<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/18	<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/23	<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/24	<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/28	<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/29	<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/30	<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/31	<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/32	<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/33	<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/35	<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/36	<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/37	<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/39	<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/41	<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/42	<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/43	<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/44	<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/45	<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7403: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.uuid$fn__8526: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7511: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7511: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/1	<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_simple: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7509: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7509: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/1	<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7509: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/2	<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7509: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/3	<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7509: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/4	<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7509: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/5	<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7509: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/6	<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7509: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/7	<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$fn__10207: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_sequential: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_sequential: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>/java.io.Writer.write/1	<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_sequential: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>/java.io.Writer.write/2	<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_sequential: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>/java.io.Writer.write/3	<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_sequential: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>/java.io.Writer.write/4	<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_sequential: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>/java.io.Writer.write/5	<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$fn__10219: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7532: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7532: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/1	<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$fn__10216: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7419: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7419: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/1	<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.instant$print_calendar: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.instant$print_calendar: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/2	<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.instant$print_calendar: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/4	<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7468: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7468: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/1	<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7468: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/2	<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7468: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/3	<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.instant$print_timestamp: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.instant$print_timestamp: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/1	<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.instant$print_timestamp: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/2	<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.instant$print_timestamp: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/3	<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7478: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7478: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/1	<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7366: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_throwable$print_via__7561: java.lang.Object invoke(java.lang.Object)>/java.io.Writer.write/0	<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_throwable$print_via__7561: java.lang.Object invoke(java.lang.Object)>/java.io.Writer.write/1	<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_throwable$print_via__7561: java.lang.Object invoke(java.lang.Object)>/java.io.Writer.write/2	<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_throwable$print_via__7561: java.lang.Object invoke(java.lang.Object)>/java.io.Writer.write/3	<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_throwable$print_via__7561: java.lang.Object invoke(java.lang.Object)>/java.io.Writer.write/4	<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7515: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7515: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/1	<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7515: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/2	<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_throwable: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_throwable: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/1	<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_throwable: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/2	<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_throwable: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/3	<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_throwable: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/4	<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_throwable: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/5	<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_throwable: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/6	<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_throwable: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/7	<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_throwable: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/8	<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_throwable: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/9	<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_throwable: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/10	<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7584: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7584: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/1	<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7417: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7417: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/1	<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7417: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/2	<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7417: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/3	<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7507: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7480: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7480: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/1	<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7381: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7381: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/1	<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7381: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/2	<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7381: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/3	<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$write_white_space: java.lang.Object invokeStatic(java.lang.Object)>/java.io.Writer.write/0	<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7383: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7383: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/1	<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7383: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/2	<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7383: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/3	<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$write_tokens: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$write_tokens: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object)>/java.io.Writer.write/1	<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$write_tokens: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object)>/java.io.Writer.write/2	<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_ctor: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_ctor: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object)>/java.io.Writer.write/1	<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_ctor: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object)>/java.io.Writer.write/2	<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_ctor: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object)>/java.io.Writer.write/3	<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_tagged_object: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_tagged_object: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object)>/java.io.Writer.write/1	<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_tagged_object: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object)>/java.io.Writer.write/2	<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_tagged_object: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object)>/java.io.Writer.write/3	<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_tagged_object: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object)>/java.io.Writer.write/4	<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_reader_macro: java.lang.Object invokeStatic(java.lang.Object)>/java.io.Writer.write/0	<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7379: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7513: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7513: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/1	<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7582: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7582: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/1	<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String,int,int)>	<<immutable-context>>	<clojure.instant$print_calendar: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/1	<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String,int,int)>	<<immutable-context>>	<clojure.instant$print_calendar: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/3	<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: java.io.Writer append(java.lang.CharSequence)>	<<immutable-context>>	<clojure.core$newline: java.lang.Object invokeStatic()>/java.io.Writer.append/0	<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: java.io.Writer append(char)>	<<immutable-context>>	<clojure.core$fn__7515: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.append/3	<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: java.io.Writer append(char)>	<<immutable-context>>	<clojure.core$fn__7484: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.append/0	<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: java.io.Writer append(char)>	<<immutable-context>>	<clojure.core$fn__7484: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.append/1	<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: java.io.Writer append(char)>	<<immutable-context>>	<clojure.core$fn__7484: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.append/2	<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: java.io.Writer append(char)>	<<immutable-context>>	<clojure.core$fn__7419: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.append/0	<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: java.io.Writer append(char)>	<<immutable-context>>	<clojure.core$fn__7419: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.append/1	<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: java.io.Writer append(char)>	<<immutable-context>>	<clojure.core$fn__7419: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.append/2	<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: java.io.Writer append(char)>	<<immutable-context>>	<clojure.core$fn__7515: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.append/0	<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: java.io.Writer append(char)>	<<immutable-context>>	<clojure.core$fn__7515: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.append/1	<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: java.io.Writer append(char)>	<<immutable-context>>	<clojure.core$fn__7515: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.append/2	<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: java.io.Writer append(char)>	<<immutable-context>>	<clojure.core$pr: java.lang.Object invokeStatic(java.lang.Object,clojure.lang.ISeq)>/java.io.Writer.append/0	<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>	<java.io.FileInputStream: void <init>(java.io.File)>	<<immutable-context>>	<clojure.java.io$fn__11687: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object)>/java.io.FileInputStream.<init>/0	<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>	<java.io.FileInputStream: void <init>(java.io.File)>	<<immutable-context>>	<clojure.java.io$fn__11685: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object)>/java.io.FileInputStream.<init>/0	<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>	<java.io.FileInputStream: void <init>(java.io.File)>	<<immutable-context>>	<clojure.java.io$fn__11639: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.FileInputStream.<init>/0	<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>	<java.io.FileInputStream: void <init>(java.io.File)>	<<immutable-context>>	<clojure.java.io$fn__11689: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object)>/java.io.FileInputStream.<init>/0	<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>	<java.io.FileInputStream: void <init>(java.io.File)>	<<immutable-context>>	<clojure.java.io$fn__11643: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.FileInputStream.<init>/0	<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>	<java.io.FileOutputStream: void <init>(java.io.File)>	<<immutable-context>>	<clojure.java.io$fn__11683: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object)>/java.io.FileOutputStream.<init>/0	<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>	<java.io.FileOutputStream: void <init>(java.io.File)>	<<immutable-context>>	<clojure.java.io$fn__11689: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object)>/java.io.FileOutputStream.<init>/0	<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>	<java.io.FileOutputStream: void <init>(java.io.File)>	<<immutable-context>>	<clojure.java.io$fn__11677: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object)>/java.io.FileOutputStream.<init>/0	<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>	<java.io.FileOutputStream: void <init>(java.io.File)>	<<immutable-context>>	<clojure.lang.Compiler: void writeClassFile(java.lang.String,byte[])>/java.io.FileOutputStream.<init>/0	<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>	<java.io.FileOutputStream: void <init>(java.io.File,boolean)>	<<immutable-context>>	<clojure.java.io$fn__11641: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.FileOutputStream.<init>/0	<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(int)>	<<immutable-context>>	<clojure.pprint$c_write_char: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(int)>	<<immutable-context>>	<clojure.pprint$p_write_char: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$emit_nl: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$emit_nl: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/1	<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$emit_nl: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/2	<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$fn__10207: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$fn__10219: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$fn__10216: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$write_white_space: java.lang.Object invokeStatic(java.lang.Object)>/java.io.Writer.write/0	<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$write_tokens: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$write_tokens: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object)>/java.io.Writer.write/1	<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$write_tokens: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object)>/java.io.Writer.write/2	<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_reader_macro: java.lang.Object invokeStatic(java.lang.Object)>/java.io.Writer.write/0	<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: java.io.Writer append(char)>	<<immutable-context>>	<clojure.core$pr: java.lang.Object invokeStatic(java.lang.Object,clojure.lang.ISeq)>/java.io.Writer.append/0	<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: java.io.Writer append(java.lang.CharSequence)>	<<immutable-context>>	<clojure.core$newline: java.lang.Object invokeStatic()>/java.io.Writer.append/0	<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>	<<immutable-context>>	<clojure.lang.Reflector: java.lang.Object invokeConstructor(java.lang.Class,java.lang.Object[])>/java.lang.reflect.Constructor.newInstance/0	<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>	<java.lang.ProcessBuilder: java.lang.Process start()>	<<immutable-context>>	<clojure.java.process$start: java.lang.Object invokeStatic(clojure.lang.ISeq)>/java.lang.ProcessBuilder.start/0	<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>	<java.io.FileOutputStream: void write(byte[])>	<<immutable-context>>	<clojure.lang.Compiler: void writeClassFile(java.lang.String,byte[])>/java.io.FileOutputStream.write/0	<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.lang.String)>	<<immutable-context>>	<clojure.java.io$fn__11525: java.lang.Object invokeStatic(java.lang.Object)>/java.io.File.<init>/0	<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.lang.String)>	<<immutable-context>>	<clojure.java.io$fn__11651: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.File.<init>/0	<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.lang.String)>	<<immutable-context>>	<clojure.lang.Compiler: java.lang.Object eval(java.lang.Object,boolean)>/java.io.File.<init>/0	<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.lang.String)>	<<immutable-context>>	<clojure.lang.Compiler: void writeClassFile(java.lang.String,byte[])>/java.io.File.<init>/0	<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.lang.String)>	<<immutable-context>>	<clojure.lang.Compiler: void writeClassFile(java.lang.String,byte[])>/java.io.File.<init>/1	<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.lang.String)>	<<immutable-context>>	<clojure.java.io$fn__11653: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.File.<init>/0	<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.io.File,java.lang.String)>	<<immutable-context>>	<clojure.java.io$file: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.File.<init>/0	<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(int)>	<<immutable-context>>	<clojure.pprint.proxy$java.io.Writer$ff19274a: void write(int)>/java.io.Writer.write/0	<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(int)>	<<immutable-context>>	<clojure.pprint$c_write_char: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(int)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/1	<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(int)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/3	<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(int)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/4	<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(int)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/6	<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(int)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/14	<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(int)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/15	<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(int)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/16	<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(int)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/17	<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(int)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/19	<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(int)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/20	<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(int)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/21	<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(int)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/22	<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(int)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/25	<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(int)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/26	<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(int)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/27	<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(int)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/34	<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(int)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/38	<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(int)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/40	<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(int)>	<<immutable-context>>	<clojure.lang.RT: void printInnerSeq(clojure.lang.ISeq,java.io.Writer)>/java.io.Writer.write/0	<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(int)>	<<immutable-context>>	<clojure.pprint$p_write_char: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7375: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.instant$print_date: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.instant$print_date: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/1	<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.instant$print_date: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/2	<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_meta: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_meta: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/1	<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7393: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7484: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$emit_nl: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$emit_nl: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/1	<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$emit_nl: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/2	<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_set: java.lang.Object invokeStatic(java.lang.Object)>/java.io.Writer.write/0	<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_simple_list$fn__11152: java.lang.Object invoke()>/java.io.Writer.write/0	<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_simple_list$fn__11152: java.lang.Object invoke()>/java.io.Writer.write/1	<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_binding_form$fn__11351: java.lang.Object invoke()>/java.io.Writer.write/0	<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_binding_form$fn__11351: java.lang.Object invoke()>/java.io.Writer.write/1	<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_binding_form$fn__11351: java.lang.Object invoke()>/java.io.Writer.write/2	<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/0	<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/2	<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/5	<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/7	<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/8	<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/9	<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/10	<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/11	<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/12	<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/13	<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/18	<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/23	<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/24	<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/28	<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/29	<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/30	<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/31	<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/32	<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/33	<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/35	<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/36	<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/37	<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/39	<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/41	<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/42	<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/43	<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/44	<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/45	<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_map: java.lang.Object invokeStatic(java.lang.Object)>/java.io.Writer.write/0	<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7403: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.uuid$fn__8526: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_vector: java.lang.Object invokeStatic(java.lang.Object)>/java.io.Writer.write/0	<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7511: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7511: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/1	<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_simple: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_ns_reference$fn__11215: java.lang.Object invoke()>/java.io.Writer.write/0	<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7509: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7509: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/1	<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7509: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/2	<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7509: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/3	<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7509: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/4	<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7509: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/5	<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7509: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/6	<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7509: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/7	<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_simple_code_list$fn__11408: java.lang.Object invoke()>/java.io.Writer.write/0	<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_simple_code_list$fn__11408: java.lang.Object invoke()>/java.io.Writer.write/1	<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$fn__10207: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_sequential: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_sequential: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>/java.io.Writer.write/1	<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_sequential: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>/java.io.Writer.write/2	<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_sequential: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>/java.io.Writer.write/3	<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_sequential: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>/java.io.Writer.write/4	<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_sequential: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>/java.io.Writer.write/5	<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_condp: java.lang.Object invokeStatic(java.lang.Object)>/java.io.Writer.write/0	<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$fn__10219: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7532: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7532: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/1	<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$fn__10216: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7419: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7419: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/1	<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.instant$print_calendar: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.instant$print_calendar: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/2	<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.instant$print_calendar: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/4	<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_set$fn__11181: java.lang.Object invoke()>/java.io.Writer.write/0	<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_set$fn__11181: java.lang.Object invoke()>/java.io.Writer.write/1	<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7468: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7468: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/1	<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7468: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/2	<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7468: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/3	<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.instant$print_timestamp: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.instant$print_timestamp: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/1	<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.instant$print_timestamp: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/2	<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.instant$print_timestamp: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/3	<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7478: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7478: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/1	<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_ideref: java.lang.Object invokeStatic(java.lang.Object)>/java.io.Writer.write/0	<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_simple_code_list: java.lang.Object invokeStatic(java.lang.Object)>/java.io.Writer.write/0	<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7366: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_map$fn__11173: java.lang.Object invoke()>/java.io.Writer.write/0	<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_map$fn__11173: java.lang.Object invoke()>/java.io.Writer.write/1	<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_map$fn__11173: java.lang.Object invoke()>/java.io.Writer.write/2	<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_meta: java.lang.Object invokeStatic(java.lang.Object)>/java.io.Writer.write/0	<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_meta: java.lang.Object invokeStatic(java.lang.Object)>/java.io.Writer.write/1	<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_throwable$print_via__7561: java.lang.Object invoke(java.lang.Object)>/java.io.Writer.write/0	<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_throwable$print_via__7561: java.lang.Object invoke(java.lang.Object)>/java.io.Writer.write/1	<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_throwable$print_via__7561: java.lang.Object invoke(java.lang.Object)>/java.io.Writer.write/2	<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_throwable$print_via__7561: java.lang.Object invoke(java.lang.Object)>/java.io.Writer.write/3	<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_throwable$print_via__7561: java.lang.Object invoke(java.lang.Object)>/java.io.Writer.write/4	<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7515: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7515: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/1	<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7515: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/2	<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_throwable: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_throwable: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/1	<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_throwable: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/2	<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_throwable: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/3	<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_throwable: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/4	<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_throwable: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/5	<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_throwable: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/6	<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_throwable: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/7	<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_throwable: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/8	<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_throwable: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/9	<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_throwable: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/10	<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_simple_list: java.lang.Object invokeStatic(java.lang.Object)>/java.io.Writer.write/0	<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7584: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7584: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/1	<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7417: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7417: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/1	<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7417: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/2	<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7417: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/3	<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7507: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7480: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7480: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/1	<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_ns: java.lang.Object invokeStatic(java.lang.Object)>/java.io.Writer.write/0	<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_condp$fn__11386: java.lang.Object invoke()>/java.io.Writer.write/0	<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_condp$fn__11386: java.lang.Object invoke()>/java.io.Writer.write/1	<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_condp$fn__11386: java.lang.Object invoke()>/java.io.Writer.write/2	<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7381: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7381: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/1	<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7381: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/2	<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7381: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/3	<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$write_white_space: java.lang.Object invokeStatic(java.lang.Object)>/java.io.Writer.write/0	<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7383: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7383: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/1	<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7383: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/2	<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7383: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/3	<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_binding_form: java.lang.Object invokeStatic(java.lang.Object)>/java.io.Writer.write/0	<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$write_tokens: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$write_tokens: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object)>/java.io.Writer.write/1	<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$write_tokens: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object)>/java.io.Writer.write/2	<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_ctor: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_ctor: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object)>/java.io.Writer.write/1	<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_ctor: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object)>/java.io.Writer.write/2	<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_ctor: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object)>/java.io.Writer.write/3	<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_tagged_object: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_tagged_object: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object)>/java.io.Writer.write/1	<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_tagged_object: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object)>/java.io.Writer.write/2	<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_tagged_object: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object)>/java.io.Writer.write/3	<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_tagged_object: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object)>/java.io.Writer.write/4	<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_ns_reference: java.lang.Object invokeStatic(java.lang.Object)>/java.io.Writer.write/0	<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_reader_macro: java.lang.Object invokeStatic(java.lang.Object)>/java.io.Writer.write/0	<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7379: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$format_logical_block: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_defn: java.lang.Object invokeStatic(java.lang.Object)>/java.io.Writer.write/0	<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_cond: java.lang.Object invokeStatic(java.lang.Object)>/java.io.Writer.write/0	<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7513: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7513: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/1	<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_cond$fn__11379: java.lang.Object invoke()>/java.io.Writer.write/0	<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_cond$fn__11379: java.lang.Object invoke()>/java.io.Writer.write/1	<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_cond$fn__11379: java.lang.Object invoke()>/java.io.Writer.write/2	<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_cond$fn__11379: java.lang.Object invoke()>/java.io.Writer.write/3	<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_vector$fn__11158: java.lang.Object invoke()>/java.io.Writer.write/0	<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_vector$fn__11158: java.lang.Object invoke()>/java.io.Writer.write/1	<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_let: java.lang.Object invokeStatic(java.lang.Object)>/java.io.Writer.write/0	<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7582: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7582: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/1	<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String,int,int)>	<<immutable-context>>	<clojure.instant$print_calendar: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/1	<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String,int,int)>	<<immutable-context>>	<clojure.instant$print_calendar: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/3	<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: java.io.Writer append(java.lang.CharSequence)>	<<immutable-context>>	<clojure.core$newline: java.lang.Object invokeStatic()>/java.io.Writer.append/0	<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: java.io.Writer append(char)>	<<immutable-context>>	<clojure.core$fn__7515: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.append/3	<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: java.io.Writer append(char)>	<<immutable-context>>	<clojure.core$fn__7484: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.append/0	<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: java.io.Writer append(char)>	<<immutable-context>>	<clojure.core$fn__7484: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.append/1	<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: java.io.Writer append(char)>	<<immutable-context>>	<clojure.core$fn__7484: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.append/2	<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: java.io.Writer append(char)>	<<immutable-context>>	<clojure.core$fn__7419: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.append/0	<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: java.io.Writer append(char)>	<<immutable-context>>	<clojure.core$fn__7419: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.append/1	<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: java.io.Writer append(char)>	<<immutable-context>>	<clojure.core$fn__7419: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.append/2	<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: java.io.Writer append(char)>	<<immutable-context>>	<clojure.core$fn__7515: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.append/0	<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: java.io.Writer append(char)>	<<immutable-context>>	<clojure.core$fn__7515: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.append/1	<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: java.io.Writer append(char)>	<<immutable-context>>	<clojure.core$fn__7515: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.append/2	<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: java.io.Writer append(char)>	<<immutable-context>>	<clojure.core$pr: java.lang.Object invokeStatic(java.lang.Object,clojure.lang.ISeq)>/java.io.Writer.append/0	<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>	<java.io.FileInputStream: void <init>(java.io.File)>	<<immutable-context>>	<clojure.java.io$fn__11687: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object)>/java.io.FileInputStream.<init>/0	<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>	<java.io.FileInputStream: void <init>(java.io.File)>	<<immutable-context>>	<clojure.java.io$fn__11685: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object)>/java.io.FileInputStream.<init>/0	<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>	<java.io.FileInputStream: void <init>(java.io.File)>	<<immutable-context>>	<clojure.java.io$fn__11639: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.FileInputStream.<init>/0	<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>	<java.io.FileInputStream: void <init>(java.io.File)>	<<immutable-context>>	<clojure.java.io$fn__11689: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object)>/java.io.FileInputStream.<init>/0	<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>	<java.io.FileInputStream: void <init>(java.io.File)>	<<immutable-context>>	<clojure.java.io$fn__11643: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.FileInputStream.<init>/0	<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>	<java.io.FileOutputStream: void <init>(java.io.File)>	<<immutable-context>>	<clojure.java.io$fn__11683: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object)>/java.io.FileOutputStream.<init>/0	<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>	<java.io.FileOutputStream: void <init>(java.io.File)>	<<immutable-context>>	<clojure.java.io$fn__11689: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object)>/java.io.FileOutputStream.<init>/0	<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>	<java.io.FileOutputStream: void <init>(java.io.File)>	<<immutable-context>>	<clojure.java.io$fn__11677: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object)>/java.io.FileOutputStream.<init>/0	<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>	<java.io.FileOutputStream: void <init>(java.io.File)>	<<immutable-context>>	<clojure.lang.Compiler: void writeClassFile(java.lang.String,byte[])>/java.io.FileOutputStream.<init>/0	<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>	<java.io.FileOutputStream: void <init>(java.io.File,boolean)>	<<immutable-context>>	<clojure.java.io$fn__11641: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.FileOutputStream.<init>/0	<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(int)>	<<immutable-context>>	<clojure.pprint$c_write_char: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(int)>	<<immutable-context>>	<clojure.pprint$p_write_char: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$emit_nl: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$emit_nl: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/1	<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$emit_nl: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/2	<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_set: java.lang.Object invokeStatic(java.lang.Object)>/java.io.Writer.write/0	<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_simple_list$fn__11152: java.lang.Object invoke()>/java.io.Writer.write/0	<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_simple_list$fn__11152: java.lang.Object invoke()>/java.io.Writer.write/1	<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_binding_form$fn__11351: java.lang.Object invoke()>/java.io.Writer.write/0	<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_binding_form$fn__11351: java.lang.Object invoke()>/java.io.Writer.write/1	<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_binding_form$fn__11351: java.lang.Object invoke()>/java.io.Writer.write/2	<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_map: java.lang.Object invokeStatic(java.lang.Object)>/java.io.Writer.write/0	<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_vector: java.lang.Object invokeStatic(java.lang.Object)>/java.io.Writer.write/0	<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_ns_reference$fn__11215: java.lang.Object invoke()>/java.io.Writer.write/0	<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_simple_code_list$fn__11408: java.lang.Object invoke()>/java.io.Writer.write/0	<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_simple_code_list$fn__11408: java.lang.Object invoke()>/java.io.Writer.write/1	<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$fn__10207: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_condp: java.lang.Object invokeStatic(java.lang.Object)>/java.io.Writer.write/0	<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$fn__10219: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$fn__10216: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_set$fn__11181: java.lang.Object invoke()>/java.io.Writer.write/0	<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_set$fn__11181: java.lang.Object invoke()>/java.io.Writer.write/1	<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_ideref: java.lang.Object invokeStatic(java.lang.Object)>/java.io.Writer.write/0	<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_simple_code_list: java.lang.Object invokeStatic(java.lang.Object)>/java.io.Writer.write/0	<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_map$fn__11173: java.lang.Object invoke()>/java.io.Writer.write/0	<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_map$fn__11173: java.lang.Object invoke()>/java.io.Writer.write/1	<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_map$fn__11173: java.lang.Object invoke()>/java.io.Writer.write/2	<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_meta: java.lang.Object invokeStatic(java.lang.Object)>/java.io.Writer.write/0	<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_meta: java.lang.Object invokeStatic(java.lang.Object)>/java.io.Writer.write/1	<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_simple_list: java.lang.Object invokeStatic(java.lang.Object)>/java.io.Writer.write/0	<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_ns: java.lang.Object invokeStatic(java.lang.Object)>/java.io.Writer.write/0	<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_condp$fn__11386: java.lang.Object invoke()>/java.io.Writer.write/0	<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_condp$fn__11386: java.lang.Object invoke()>/java.io.Writer.write/1	<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_condp$fn__11386: java.lang.Object invoke()>/java.io.Writer.write/2	<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$write_white_space: java.lang.Object invokeStatic(java.lang.Object)>/java.io.Writer.write/0	<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_binding_form: java.lang.Object invokeStatic(java.lang.Object)>/java.io.Writer.write/0	<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$write_tokens: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$write_tokens: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object)>/java.io.Writer.write/1	<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$write_tokens: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object)>/java.io.Writer.write/2	<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_ns_reference: java.lang.Object invokeStatic(java.lang.Object)>/java.io.Writer.write/0	<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_reader_macro: java.lang.Object invokeStatic(java.lang.Object)>/java.io.Writer.write/0	<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$format_logical_block: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_defn: java.lang.Object invokeStatic(java.lang.Object)>/java.io.Writer.write/0	<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_cond: java.lang.Object invokeStatic(java.lang.Object)>/java.io.Writer.write/0	<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_cond$fn__11379: java.lang.Object invoke()>/java.io.Writer.write/0	<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_cond$fn__11379: java.lang.Object invoke()>/java.io.Writer.write/1	<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_cond$fn__11379: java.lang.Object invoke()>/java.io.Writer.write/2	<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_cond$fn__11379: java.lang.Object invoke()>/java.io.Writer.write/3	<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_vector$fn__11158: java.lang.Object invoke()>/java.io.Writer.write/0	<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_vector$fn__11158: java.lang.Object invoke()>/java.io.Writer.write/1	<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_let: java.lang.Object invokeStatic(java.lang.Object)>/java.io.Writer.write/0	<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void println(java.lang.String)>	<<immutable-context>>	<clojure.lang.Namespace: boolean checkReplacement(clojure.lang.Symbol,java.lang.Object,java.lang.Object)>/java.io.PrintWriter.println/0	<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void println(java.lang.String)>	<<immutable-context>>	<clojure.lang.Namespace: boolean checkReplacement(clojure.lang.Symbol,java.lang.Object,java.lang.Object)>/java.io.PrintWriter.println/1	<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: java.io.Writer append(char)>	<<immutable-context>>	<clojure.core$pr: java.lang.Object invokeStatic(java.lang.Object,clojure.lang.ISeq)>/java.io.Writer.append/0	<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: java.io.Writer append(java.lang.CharSequence)>	<<immutable-context>>	<clojure.core$newline: java.lang.Object invokeStatic()>/java.io.Writer.append/0	<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>	<<immutable-context>>	<clojure.lang.Reflector: java.lang.Object invokeConstructor(java.lang.Class,java.lang.Object[])>/java.lang.reflect.Constructor.newInstance/0	<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>	<java.io.FileOutputStream: void write(byte[])>	<<immutable-context>>	<clojure.lang.Compiler: void writeClassFile(java.lang.String,byte[])>/java.io.FileOutputStream.write/0	<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.lang.String)>	<<immutable-context>>	<clojure.java.io$fn__11525: java.lang.Object invokeStatic(java.lang.Object)>/java.io.File.<init>/0	<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.lang.String)>	<<immutable-context>>	<clojure.java.io$fn__11651: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.File.<init>/0	<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.lang.String)>	<<immutable-context>>	<clojure.lang.Compiler: java.lang.Object eval(java.lang.Object,boolean)>/java.io.File.<init>/0	<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.lang.String)>	<<immutable-context>>	<clojure.lang.Compiler: void writeClassFile(java.lang.String,byte[])>/java.io.File.<init>/0	<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.lang.String)>	<<immutable-context>>	<clojure.lang.Compiler: void writeClassFile(java.lang.String,byte[])>/java.io.File.<init>/1	<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.lang.String)>	<<immutable-context>>	<clojure.java.io$fn__11653: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.File.<init>/0	<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.io.File,java.lang.String)>	<<immutable-context>>	<clojure.java.io$file: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.File.<init>/0	<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(int)>	<<immutable-context>>	<clojure.pprint.proxy$java.io.Writer$ff19274a: void write(int)>/java.io.Writer.write/0	<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(int)>	<<immutable-context>>	<clojure.pprint$c_write_char: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(int)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/1	<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(int)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/3	<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(int)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/4	<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(int)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/6	<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(int)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/14	<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(int)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/15	<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(int)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/16	<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(int)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/17	<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(int)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/19	<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(int)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/20	<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(int)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/21	<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(int)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/22	<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(int)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/25	<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(int)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/26	<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(int)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/27	<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(int)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/34	<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(int)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/38	<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(int)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/40	<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(int)>	<<immutable-context>>	<clojure.lang.RT: void printInnerSeq(clojure.lang.ISeq,java.io.Writer)>/java.io.Writer.write/0	<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(int)>	<<immutable-context>>	<clojure.pprint$p_write_char: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7375: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.instant$print_date: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.instant$print_date: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/1	<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.instant$print_date: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/2	<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_meta: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_meta: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/1	<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7393: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7484: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$emit_nl: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$emit_nl: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/1	<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$emit_nl: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/2	<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/0	<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/2	<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/5	<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/7	<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/8	<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/9	<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/10	<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/11	<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/12	<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/13	<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/18	<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/23	<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/24	<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/28	<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/29	<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/30	<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/31	<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/32	<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/33	<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/35	<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/36	<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/37	<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/39	<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/41	<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/42	<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/43	<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/44	<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/45	<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7403: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.uuid$fn__8526: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7511: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7511: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/1	<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_simple: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7509: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7509: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/1	<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7509: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/2	<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7509: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/3	<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7509: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/4	<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7509: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/5	<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7509: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/6	<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7509: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/7	<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$fn__10207: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_sequential: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_sequential: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>/java.io.Writer.write/1	<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_sequential: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>/java.io.Writer.write/2	<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_sequential: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>/java.io.Writer.write/3	<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_sequential: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>/java.io.Writer.write/4	<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_sequential: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>/java.io.Writer.write/5	<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$fn__10219: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7532: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7532: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/1	<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$fn__10216: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7419: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7419: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/1	<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.instant$print_calendar: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.instant$print_calendar: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/2	<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.instant$print_calendar: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/4	<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7468: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7468: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/1	<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7468: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/2	<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7468: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/3	<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.instant$print_timestamp: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.instant$print_timestamp: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/1	<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.instant$print_timestamp: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/2	<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.instant$print_timestamp: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/3	<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7478: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7478: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/1	<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7366: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_throwable$print_via__7561: java.lang.Object invoke(java.lang.Object)>/java.io.Writer.write/0	<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_throwable$print_via__7561: java.lang.Object invoke(java.lang.Object)>/java.io.Writer.write/1	<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_throwable$print_via__7561: java.lang.Object invoke(java.lang.Object)>/java.io.Writer.write/2	<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_throwable$print_via__7561: java.lang.Object invoke(java.lang.Object)>/java.io.Writer.write/3	<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_throwable$print_via__7561: java.lang.Object invoke(java.lang.Object)>/java.io.Writer.write/4	<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7515: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7515: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/1	<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7515: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/2	<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_throwable: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_throwable: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/1	<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_throwable: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/2	<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_throwable: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/3	<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_throwable: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/4	<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_throwable: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/5	<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_throwable: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/6	<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_throwable: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/7	<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_throwable: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/8	<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_throwable: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/9	<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_throwable: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/10	<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7584: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7584: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/1	<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7417: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7417: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/1	<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7417: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/2	<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7417: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/3	<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7507: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7480: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7480: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/1	<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7381: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7381: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/1	<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7381: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/2	<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7381: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/3	<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$write_white_space: java.lang.Object invokeStatic(java.lang.Object)>/java.io.Writer.write/0	<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7383: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7383: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/1	<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7383: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/2	<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7383: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/3	<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$write_tokens: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$write_tokens: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object)>/java.io.Writer.write/1	<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$write_tokens: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object)>/java.io.Writer.write/2	<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_ctor: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_ctor: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object)>/java.io.Writer.write/1	<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_ctor: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object)>/java.io.Writer.write/2	<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_ctor: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object)>/java.io.Writer.write/3	<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_tagged_object: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_tagged_object: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object)>/java.io.Writer.write/1	<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_tagged_object: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object)>/java.io.Writer.write/2	<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_tagged_object: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object)>/java.io.Writer.write/3	<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_tagged_object: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object)>/java.io.Writer.write/4	<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_reader_macro: java.lang.Object invokeStatic(java.lang.Object)>/java.io.Writer.write/0	<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7379: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7513: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7513: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/1	<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7582: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7582: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/1	<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String,int,int)>	<<immutable-context>>	<clojure.instant$print_calendar: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/1	<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String,int,int)>	<<immutable-context>>	<clojure.instant$print_calendar: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/3	<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: java.io.Writer append(char)>	<<immutable-context>>	<clojure.core$fn__7515: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.append/3	<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: java.io.Writer append(char)>	<<immutable-context>>	<clojure.core$fn__7484: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.append/0	<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: java.io.Writer append(char)>	<<immutable-context>>	<clojure.core$fn__7484: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.append/1	<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: java.io.Writer append(char)>	<<immutable-context>>	<clojure.core$fn__7484: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.append/2	<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: java.io.Writer append(char)>	<<immutable-context>>	<clojure.core$fn__7419: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.append/0	<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: java.io.Writer append(char)>	<<immutable-context>>	<clojure.core$fn__7419: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.append/1	<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: java.io.Writer append(char)>	<<immutable-context>>	<clojure.core$fn__7419: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.append/2	<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: java.io.Writer append(char)>	<<immutable-context>>	<clojure.core$fn__7515: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.append/0	<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: java.io.Writer append(char)>	<<immutable-context>>	<clojure.core$fn__7515: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.append/1	<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: java.io.Writer append(char)>	<<immutable-context>>	<clojure.core$fn__7515: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.append/2	<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: java.io.Writer append(char)>	<<immutable-context>>	<clojure.core$pr: java.lang.Object invokeStatic(java.lang.Object,clojure.lang.ISeq)>/java.io.Writer.append/0	<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>	<java.io.FileInputStream: void <init>(java.io.File)>	<<immutable-context>>	<clojure.java.io$fn__11687: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object)>/java.io.FileInputStream.<init>/0	<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>	<java.io.FileInputStream: void <init>(java.io.File)>	<<immutable-context>>	<clojure.java.io$fn__11685: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object)>/java.io.FileInputStream.<init>/0	<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>	<java.io.FileInputStream: void <init>(java.io.File)>	<<immutable-context>>	<clojure.java.io$fn__11639: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.FileInputStream.<init>/0	<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>	<java.io.FileInputStream: void <init>(java.io.File)>	<<immutable-context>>	<clojure.java.io$fn__11689: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object)>/java.io.FileInputStream.<init>/0	<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>	<java.io.FileInputStream: void <init>(java.io.File)>	<<immutable-context>>	<clojure.java.io$fn__11643: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.FileInputStream.<init>/0	<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>	<java.io.FileOutputStream: void <init>(java.io.File)>	<<immutable-context>>	<clojure.java.io$fn__11683: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object)>/java.io.FileOutputStream.<init>/0	<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>	<java.io.FileOutputStream: void <init>(java.io.File)>	<<immutable-context>>	<clojure.java.io$fn__11689: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object)>/java.io.FileOutputStream.<init>/0	<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>	<java.io.FileOutputStream: void <init>(java.io.File)>	<<immutable-context>>	<clojure.java.io$fn__11677: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object)>/java.io.FileOutputStream.<init>/0	<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>	<java.io.FileOutputStream: void <init>(java.io.File)>	<<immutable-context>>	<clojure.lang.Compiler: void writeClassFile(java.lang.String,byte[])>/java.io.FileOutputStream.<init>/0	<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>	<java.io.FileOutputStream: void <init>(java.io.File,boolean)>	<<immutable-context>>	<clojure.java.io$fn__11641: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.FileOutputStream.<init>/0	<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(int)>	<<immutable-context>>	<clojure.pprint$c_write_char: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(int)>	<<immutable-context>>	<clojure.pprint$p_write_char: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$emit_nl: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$emit_nl: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/1	<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$emit_nl: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/2	<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$fn__10207: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$fn__10219: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$fn__10216: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$write_white_space: java.lang.Object invokeStatic(java.lang.Object)>/java.io.Writer.write/0	<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$write_tokens: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$write_tokens: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object)>/java.io.Writer.write/1	<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$write_tokens: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object)>/java.io.Writer.write/2	<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_reader_macro: java.lang.Object invokeStatic(java.lang.Object)>/java.io.Writer.write/0	<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: java.io.Writer append(char)>	<<immutable-context>>	<clojure.core$pr: java.lang.Object invokeStatic(java.lang.Object,clojure.lang.ISeq)>/java.io.Writer.append/0	<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>	<<immutable-context>>	<clojure.lang.Reflector: java.lang.Object invokeConstructor(java.lang.Class,java.lang.Object[])>/java.lang.reflect.Constructor.newInstance/0	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.lang.ProcessBuilder: java.lang.Process start()>	<<immutable-context>>	<clojure.java.process$start: java.lang.Object invokeStatic(clojure.lang.ISeq)>/java.lang.ProcessBuilder.start/0	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.lang.ProcessBuilder: java.lang.Process start()>	<<immutable-context>>	<clojure.java.browse$browse_url$fn__11861: java.lang.Object invoke()>/java.lang.ProcessBuilder.start/0	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.FileOutputStream: void write(byte[])>	<<immutable-context>>	<clojure.lang.Compiler: void writeClassFile(java.lang.String,byte[])>/java.io.FileOutputStream.write/0	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.lang.String)>	<<immutable-context>>	<clojure.java.io$fn__11525: java.lang.Object invokeStatic(java.lang.Object)>/java.io.File.<init>/0	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.lang.String)>	<<immutable-context>>	<clojure.java.io$fn__11651: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.File.<init>/0	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.lang.String)>	<<immutable-context>>	<clojure.lang.Compiler: java.lang.Object eval(java.lang.Object,boolean)>/java.io.File.<init>/0	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.lang.String)>	<<immutable-context>>	<clojure.lang.Compiler: void writeClassFile(java.lang.String,byte[])>/java.io.File.<init>/0	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.lang.String)>	<<immutable-context>>	<clojure.lang.Compiler: void writeClassFile(java.lang.String,byte[])>/java.io.File.<init>/1	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.lang.String)>	<<immutable-context>>	<clojure.java.io$fn__11653: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.File.<init>/0	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.io.File,java.lang.String)>	<<immutable-context>>	<clojure.java.io$file: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.File.<init>/0	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(int)>	<<immutable-context>>	<clojure.pprint.proxy$java.io.Writer$ff19274a: void write(int)>/java.io.Writer.write/0	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(int)>	<<immutable-context>>	<clojure.pprint$c_write_char: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(int)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/1	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(int)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/3	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(int)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/4	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(int)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/6	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(int)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/14	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(int)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/15	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(int)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/16	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(int)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/17	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(int)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/19	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(int)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/20	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(int)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/21	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(int)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/22	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(int)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/25	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(int)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/26	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(int)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/27	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(int)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/34	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(int)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/38	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(int)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/40	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(int)>	<<immutable-context>>	<clojure.lang.RT: void printInnerSeq(clojure.lang.ISeq,java.io.Writer)>/java.io.Writer.write/0	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(int)>	<<immutable-context>>	<clojure.pprint$p_write_char: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7375: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.instant$print_date: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.instant$print_date: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/1	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.instant$print_date: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/2	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_meta: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_meta: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/1	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7393: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7484: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$emit_nl: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$emit_nl: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/1	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$emit_nl: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/2	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_set: java.lang.Object invokeStatic(java.lang.Object)>/java.io.Writer.write/0	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_simple_list$fn__11152: java.lang.Object invoke()>/java.io.Writer.write/0	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_simple_list$fn__11152: java.lang.Object invoke()>/java.io.Writer.write/1	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_binding_form$fn__11351: java.lang.Object invoke()>/java.io.Writer.write/0	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_binding_form$fn__11351: java.lang.Object invoke()>/java.io.Writer.write/1	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_binding_form$fn__11351: java.lang.Object invoke()>/java.io.Writer.write/2	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/0	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/2	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/5	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/7	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/8	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/9	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/10	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/11	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/12	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/13	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/18	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/23	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/24	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/28	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/29	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/30	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/31	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/32	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/33	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/35	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/36	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/37	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/39	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/41	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/42	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/43	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/44	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/45	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_map: java.lang.Object invokeStatic(java.lang.Object)>/java.io.Writer.write/0	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7403: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.uuid$fn__8526: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_vector: java.lang.Object invokeStatic(java.lang.Object)>/java.io.Writer.write/0	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7511: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7511: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/1	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_simple: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_ns_reference$fn__11215: java.lang.Object invoke()>/java.io.Writer.write/0	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7509: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7509: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/1	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7509: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/2	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7509: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/3	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7509: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/4	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7509: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/5	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7509: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/6	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7509: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/7	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_simple_code_list$fn__11408: java.lang.Object invoke()>/java.io.Writer.write/0	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_simple_code_list$fn__11408: java.lang.Object invoke()>/java.io.Writer.write/1	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$fn__10207: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_sequential: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_sequential: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>/java.io.Writer.write/1	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_sequential: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>/java.io.Writer.write/2	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_sequential: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>/java.io.Writer.write/3	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_sequential: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>/java.io.Writer.write/4	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_sequential: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>/java.io.Writer.write/5	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_condp: java.lang.Object invokeStatic(java.lang.Object)>/java.io.Writer.write/0	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$fn__10219: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7532: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7532: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/1	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$fn__10216: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7419: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7419: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/1	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.instant$print_calendar: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.instant$print_calendar: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/2	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.instant$print_calendar: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/4	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_set$fn__11181: java.lang.Object invoke()>/java.io.Writer.write/0	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_set$fn__11181: java.lang.Object invoke()>/java.io.Writer.write/1	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7468: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7468: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/1	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7468: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/2	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7468: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/3	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.instant$print_timestamp: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.instant$print_timestamp: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/1	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.instant$print_timestamp: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/2	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.instant$print_timestamp: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/3	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7478: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7478: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/1	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_ideref: java.lang.Object invokeStatic(java.lang.Object)>/java.io.Writer.write/0	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_simple_code_list: java.lang.Object invokeStatic(java.lang.Object)>/java.io.Writer.write/0	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7366: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_map$fn__11173: java.lang.Object invoke()>/java.io.Writer.write/0	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_map$fn__11173: java.lang.Object invoke()>/java.io.Writer.write/1	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_map$fn__11173: java.lang.Object invoke()>/java.io.Writer.write/2	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_meta: java.lang.Object invokeStatic(java.lang.Object)>/java.io.Writer.write/0	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_meta: java.lang.Object invokeStatic(java.lang.Object)>/java.io.Writer.write/1	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_throwable$print_via__7561: java.lang.Object invoke(java.lang.Object)>/java.io.Writer.write/0	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_throwable$print_via__7561: java.lang.Object invoke(java.lang.Object)>/java.io.Writer.write/1	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_throwable$print_via__7561: java.lang.Object invoke(java.lang.Object)>/java.io.Writer.write/2	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_throwable$print_via__7561: java.lang.Object invoke(java.lang.Object)>/java.io.Writer.write/3	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_throwable$print_via__7561: java.lang.Object invoke(java.lang.Object)>/java.io.Writer.write/4	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7515: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7515: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/1	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7515: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/2	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_throwable: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_throwable: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/1	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_throwable: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/2	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_throwable: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/3	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_throwable: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/4	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_throwable: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/5	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_throwable: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/6	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_throwable: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/7	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_throwable: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/8	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_throwable: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/9	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_throwable: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/10	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_simple_list: java.lang.Object invokeStatic(java.lang.Object)>/java.io.Writer.write/0	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7584: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7584: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/1	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7417: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7417: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/1	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7417: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/2	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7417: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/3	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7507: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7480: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7480: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/1	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_ns: java.lang.Object invokeStatic(java.lang.Object)>/java.io.Writer.write/0	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_condp$fn__11386: java.lang.Object invoke()>/java.io.Writer.write/0	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_condp$fn__11386: java.lang.Object invoke()>/java.io.Writer.write/1	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_condp$fn__11386: java.lang.Object invoke()>/java.io.Writer.write/2	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7381: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7381: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/1	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7381: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/2	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7381: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/3	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$write_white_space: java.lang.Object invokeStatic(java.lang.Object)>/java.io.Writer.write/0	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7383: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7383: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/1	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7383: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/2	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7383: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/3	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_binding_form: java.lang.Object invokeStatic(java.lang.Object)>/java.io.Writer.write/0	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$write_tokens: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$write_tokens: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object)>/java.io.Writer.write/1	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$write_tokens: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object)>/java.io.Writer.write/2	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_ctor: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_ctor: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object)>/java.io.Writer.write/1	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_ctor: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object)>/java.io.Writer.write/2	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_ctor: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object)>/java.io.Writer.write/3	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_tagged_object: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_tagged_object: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object)>/java.io.Writer.write/1	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_tagged_object: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object)>/java.io.Writer.write/2	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_tagged_object: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object)>/java.io.Writer.write/3	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_tagged_object: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object)>/java.io.Writer.write/4	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_ns_reference: java.lang.Object invokeStatic(java.lang.Object)>/java.io.Writer.write/0	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_reader_macro: java.lang.Object invokeStatic(java.lang.Object)>/java.io.Writer.write/0	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7379: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$format_logical_block: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_defn: java.lang.Object invokeStatic(java.lang.Object)>/java.io.Writer.write/0	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_cond: java.lang.Object invokeStatic(java.lang.Object)>/java.io.Writer.write/0	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7513: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7513: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/1	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_cond$fn__11379: java.lang.Object invoke()>/java.io.Writer.write/0	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_cond$fn__11379: java.lang.Object invoke()>/java.io.Writer.write/1	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_cond$fn__11379: java.lang.Object invoke()>/java.io.Writer.write/2	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_cond$fn__11379: java.lang.Object invoke()>/java.io.Writer.write/3	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_vector$fn__11158: java.lang.Object invoke()>/java.io.Writer.write/0	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_vector$fn__11158: java.lang.Object invoke()>/java.io.Writer.write/1	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_let: java.lang.Object invokeStatic(java.lang.Object)>/java.io.Writer.write/0	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7582: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7582: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/1	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String,int,int)>	<<immutable-context>>	<clojure.instant$print_calendar: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/1	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String,int,int)>	<<immutable-context>>	<clojure.instant$print_calendar: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/3	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: java.io.Writer append(java.lang.CharSequence)>	<<immutable-context>>	<clojure.core$newline: java.lang.Object invokeStatic()>/java.io.Writer.append/0	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: java.io.Writer append(char)>	<<immutable-context>>	<clojure.core$fn__7515: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.append/3	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: java.io.Writer append(char)>	<<immutable-context>>	<clojure.core$fn__7484: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.append/0	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: java.io.Writer append(char)>	<<immutable-context>>	<clojure.core$fn__7484: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.append/1	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: java.io.Writer append(char)>	<<immutable-context>>	<clojure.core$fn__7484: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.append/2	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: java.io.Writer append(char)>	<<immutable-context>>	<clojure.core$fn__7419: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.append/0	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: java.io.Writer append(char)>	<<immutable-context>>	<clojure.core$fn__7419: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.append/1	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: java.io.Writer append(char)>	<<immutable-context>>	<clojure.core$fn__7419: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.append/2	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: java.io.Writer append(char)>	<<immutable-context>>	<clojure.core$fn__7515: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.append/0	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: java.io.Writer append(char)>	<<immutable-context>>	<clojure.core$fn__7515: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.append/1	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: java.io.Writer append(char)>	<<immutable-context>>	<clojure.core$fn__7515: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.append/2	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: java.io.Writer append(char)>	<<immutable-context>>	<clojure.core$pr: java.lang.Object invokeStatic(java.lang.Object,clojure.lang.ISeq)>/java.io.Writer.append/0	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.FileInputStream: void <init>(java.io.File)>	<<immutable-context>>	<clojure.java.io$fn__11687: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object)>/java.io.FileInputStream.<init>/0	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.FileInputStream: void <init>(java.io.File)>	<<immutable-context>>	<clojure.java.io$fn__11685: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object)>/java.io.FileInputStream.<init>/0	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.FileInputStream: void <init>(java.io.File)>	<<immutable-context>>	<clojure.java.io$fn__11639: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.FileInputStream.<init>/0	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.FileInputStream: void <init>(java.io.File)>	<<immutable-context>>	<clojure.java.io$fn__11689: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object)>/java.io.FileInputStream.<init>/0	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.FileInputStream: void <init>(java.io.File)>	<<immutable-context>>	<clojure.java.io$fn__11643: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.FileInputStream.<init>/0	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.FileOutputStream: void <init>(java.io.File)>	<<immutable-context>>	<clojure.java.io$fn__11683: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object)>/java.io.FileOutputStream.<init>/0	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.FileOutputStream: void <init>(java.io.File)>	<<immutable-context>>	<clojure.java.io$fn__11689: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object)>/java.io.FileOutputStream.<init>/0	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.FileOutputStream: void <init>(java.io.File)>	<<immutable-context>>	<clojure.java.io$fn__11677: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object)>/java.io.FileOutputStream.<init>/0	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.FileOutputStream: void <init>(java.io.File)>	<<immutable-context>>	<clojure.lang.Compiler: void writeClassFile(java.lang.String,byte[])>/java.io.FileOutputStream.<init>/0	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.FileOutputStream: void <init>(java.io.File,boolean)>	<<immutable-context>>	<clojure.java.io$fn__11641: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.FileOutputStream.<init>/0	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(int)>	<<immutable-context>>	<clojure.pprint$c_write_char: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(int)>	<<immutable-context>>	<clojure.pprint$p_write_char: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$emit_nl: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$emit_nl: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/1	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$emit_nl: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/2	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_set: java.lang.Object invokeStatic(java.lang.Object)>/java.io.Writer.write/0	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_simple_list$fn__11152: java.lang.Object invoke()>/java.io.Writer.write/0	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_simple_list$fn__11152: java.lang.Object invoke()>/java.io.Writer.write/1	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_binding_form$fn__11351: java.lang.Object invoke()>/java.io.Writer.write/0	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_binding_form$fn__11351: java.lang.Object invoke()>/java.io.Writer.write/1	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_binding_form$fn__11351: java.lang.Object invoke()>/java.io.Writer.write/2	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_map: java.lang.Object invokeStatic(java.lang.Object)>/java.io.Writer.write/0	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_vector: java.lang.Object invokeStatic(java.lang.Object)>/java.io.Writer.write/0	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_ns_reference$fn__11215: java.lang.Object invoke()>/java.io.Writer.write/0	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_simple_code_list$fn__11408: java.lang.Object invoke()>/java.io.Writer.write/0	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_simple_code_list$fn__11408: java.lang.Object invoke()>/java.io.Writer.write/1	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$fn__10207: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_condp: java.lang.Object invokeStatic(java.lang.Object)>/java.io.Writer.write/0	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$fn__10219: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$fn__10216: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_set$fn__11181: java.lang.Object invoke()>/java.io.Writer.write/0	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_set$fn__11181: java.lang.Object invoke()>/java.io.Writer.write/1	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_ideref: java.lang.Object invokeStatic(java.lang.Object)>/java.io.Writer.write/0	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_simple_code_list: java.lang.Object invokeStatic(java.lang.Object)>/java.io.Writer.write/0	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_map$fn__11173: java.lang.Object invoke()>/java.io.Writer.write/0	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_map$fn__11173: java.lang.Object invoke()>/java.io.Writer.write/1	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_map$fn__11173: java.lang.Object invoke()>/java.io.Writer.write/2	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_meta: java.lang.Object invokeStatic(java.lang.Object)>/java.io.Writer.write/0	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_meta: java.lang.Object invokeStatic(java.lang.Object)>/java.io.Writer.write/1	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_simple_list: java.lang.Object invokeStatic(java.lang.Object)>/java.io.Writer.write/0	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_ns: java.lang.Object invokeStatic(java.lang.Object)>/java.io.Writer.write/0	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_condp$fn__11386: java.lang.Object invoke()>/java.io.Writer.write/0	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_condp$fn__11386: java.lang.Object invoke()>/java.io.Writer.write/1	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_condp$fn__11386: java.lang.Object invoke()>/java.io.Writer.write/2	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$write_white_space: java.lang.Object invokeStatic(java.lang.Object)>/java.io.Writer.write/0	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_binding_form: java.lang.Object invokeStatic(java.lang.Object)>/java.io.Writer.write/0	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$write_tokens: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$write_tokens: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object)>/java.io.Writer.write/1	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$write_tokens: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object)>/java.io.Writer.write/2	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_ns_reference: java.lang.Object invokeStatic(java.lang.Object)>/java.io.Writer.write/0	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_reader_macro: java.lang.Object invokeStatic(java.lang.Object)>/java.io.Writer.write/0	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$format_logical_block: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_defn: java.lang.Object invokeStatic(java.lang.Object)>/java.io.Writer.write/0	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_cond: java.lang.Object invokeStatic(java.lang.Object)>/java.io.Writer.write/0	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_cond$fn__11379: java.lang.Object invoke()>/java.io.Writer.write/0	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_cond$fn__11379: java.lang.Object invoke()>/java.io.Writer.write/1	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_cond$fn__11379: java.lang.Object invoke()>/java.io.Writer.write/2	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_cond$fn__11379: java.lang.Object invoke()>/java.io.Writer.write/3	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_vector$fn__11158: java.lang.Object invoke()>/java.io.Writer.write/0	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_vector$fn__11158: java.lang.Object invoke()>/java.io.Writer.write/1	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_let: java.lang.Object invokeStatic(java.lang.Object)>/java.io.Writer.write/0	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void println(java.lang.String)>	<<immutable-context>>	<clojure.lang.Namespace: boolean checkReplacement(clojure.lang.Symbol,java.lang.Object,java.lang.Object)>/java.io.PrintWriter.println/0	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void println(java.lang.String)>	<<immutable-context>>	<clojure.lang.Namespace: boolean checkReplacement(clojure.lang.Symbol,java.lang.Object,java.lang.Object)>/java.io.PrintWriter.println/1	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: java.io.Writer append(char)>	<<immutable-context>>	<clojure.core$pr: java.lang.Object invokeStatic(java.lang.Object,clojure.lang.ISeq)>/java.io.Writer.append/0	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: java.io.Writer append(java.lang.CharSequence)>	<<immutable-context>>	<clojure.core$newline: java.lang.Object invokeStatic()>/java.io.Writer.append/0	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.HashSet: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void println(java.lang.String)>	<<immutable-context>>	<cn.hutool.core.lang.tree.Tree: void printTree(cn.hutool.core.lang.tree.Tree,java.io.PrintWriter,int)>/java.io.PrintWriter.println/0	<java.util.HashSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.HashSet: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(int)>	<<immutable-context>>	<cn.hutool.json.serialize.JSONWriter: cn.hutool.json.serialize.JSONWriter writeRaw(char)>/java.io.Writer.write/0	<java.util.HashSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.HashSet: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(char[])>	<<immutable-context>>	<cn.hutool.core.text.csv.CsvWriter: cn.hutool.core.text.csv.CsvWriter writeLine()>/java.io.Writer.write/0	<java.util.HashSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.LinkedBlockingDeque: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void println(java.lang.String)>	<<immutable-context>>	<cn.hutool.core.lang.tree.Tree: void printTree(cn.hutool.core.lang.tree.Tree,java.io.PrintWriter,int)>/java.io.PrintWriter.println/0	<java.util.concurrent.LinkedBlockingDeque: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.LinkedBlockingDeque: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(int)>	<<immutable-context>>	<cn.hutool.json.serialize.JSONWriter: cn.hutool.json.serialize.JSONWriter writeRaw(char)>/java.io.Writer.write/0	<java.util.concurrent.LinkedBlockingDeque: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void println(java.lang.String)>	<<immutable-context>>	<cn.hutool.core.lang.tree.Tree: void printTree(cn.hutool.core.lang.tree.Tree,java.io.PrintWriter,int)>/java.io.PrintWriter.println/0	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(int)>	<<immutable-context>>	<cn.hutool.json.serialize.JSONWriter: cn.hutool.json.serialize.JSONWriter writeRaw(char)>/java.io.Writer.write/0	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(char[])>	<<immutable-context>>	<cn.hutool.core.text.csv.CsvWriter: cn.hutool.core.text.csv.CsvWriter writeLine()>/java.io.Writer.write/0	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void println(java.lang.String)>	<<immutable-context>>	<cn.hutool.core.lang.tree.Tree: void printTree(cn.hutool.core.lang.tree.Tree,java.io.PrintWriter,int)>/java.io.PrintWriter.println/0	<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(int)>	<<immutable-context>>	<cn.hutool.json.serialize.JSONWriter: cn.hutool.json.serialize.JSONWriter writeRaw(char)>/java.io.Writer.write/0	<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(char[])>	<<immutable-context>>	<cn.hutool.core.text.csv.CsvWriter: cn.hutool.core.text.csv.CsvWriter writeLine()>/java.io.Writer.write/0	<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void println(java.lang.String)>	<<immutable-context>>	<cn.hutool.core.lang.tree.Tree: void printTree(cn.hutool.core.lang.tree.Tree,java.io.PrintWriter,int)>/java.io.PrintWriter.println/0	<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(int)>	<<immutable-context>>	<cn.hutool.json.serialize.JSONWriter: cn.hutool.json.serialize.JSONWriter writeRaw(char)>/java.io.Writer.write/0	<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(char[])>	<<immutable-context>>	<cn.hutool.core.text.csv.CsvWriter: cn.hutool.core.text.csv.CsvWriter writeLine()>/java.io.Writer.write/0	<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.CopyOnWriteArrayList: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void println(java.lang.String)>	<<immutable-context>>	<cn.hutool.core.lang.tree.Tree: void printTree(cn.hutool.core.lang.tree.Tree,java.io.PrintWriter,int)>/java.io.PrintWriter.println/0	<java.util.concurrent.CopyOnWriteArrayList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.CopyOnWriteArrayList: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(int)>	<<immutable-context>>	<cn.hutool.json.serialize.JSONWriter: cn.hutool.json.serialize.JSONWriter writeRaw(char)>/java.io.Writer.write/0	<java.util.concurrent.CopyOnWriteArrayList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.CopyOnWriteArrayList: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(char[])>	<<immutable-context>>	<cn.hutool.core.text.csv.CsvWriter: cn.hutool.core.text.csv.CsvWriter writeLine()>/java.io.Writer.write/0	<java.util.concurrent.CopyOnWriteArrayList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void println(java.lang.String)>	<<immutable-context>>	<cn.hutool.core.lang.tree.Tree: void printTree(cn.hutool.core.lang.tree.Tree,java.io.PrintWriter,int)>/java.io.PrintWriter.println/0	<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(int)>	<<immutable-context>>	<cn.hutool.json.serialize.JSONWriter: cn.hutool.json.serialize.JSONWriter writeRaw(char)>/java.io.Writer.write/0	<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(char[])>	<<immutable-context>>	<cn.hutool.core.text.csv.CsvWriter: cn.hutool.core.text.csv.CsvWriter writeLine()>/java.io.Writer.write/0	<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<com.google.common.collect.ImmutableMultimap$Keys: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<org.apache.dubbo.config.AbstractConfig: java.lang.String toString()>/java.lang.reflect.Method.invoke/0	<com.google.common.collect.ImmutableMultimap$Keys: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<com.google.common.collect.ImmutableMultimap$Keys: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<org.apache.dubbo.config.AbstractConfig: boolean equals(java.lang.Object)>/java.lang.reflect.Method.invoke/0	<com.google.common.collect.ImmutableMultimap$Keys: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<com.google.common.collect.ImmutableMultimap$Keys: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<org.apache.dubbo.config.AbstractConfig: boolean equals(java.lang.Object)>/java.lang.reflect.Method.invoke/1	<com.google.common.collect.ImmutableMultimap$Keys: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<com.google.common.collect.ImmutableMultimap$Keys: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<org.apache.dubbo.config.AbstractConfig: int hashCode()>/java.lang.reflect.Method.invoke/0	<com.google.common.collect.ImmutableMultimap$Keys: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<org.apache.curator.shaded.com.google.common.collect.LinkedHashMultiset: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<org.apache.dubbo.config.AbstractConfig: java.lang.String toString()>/java.lang.reflect.Method.invoke/0	<org.apache.curator.shaded.com.google.common.collect.LinkedHashMultiset: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<org.apache.curator.shaded.com.google.common.collect.LinkedHashMultiset: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<org.apache.dubbo.config.AbstractConfig: boolean equals(java.lang.Object)>/java.lang.reflect.Method.invoke/0	<org.apache.curator.shaded.com.google.common.collect.LinkedHashMultiset: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<org.apache.curator.shaded.com.google.common.collect.LinkedHashMultiset: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<org.apache.dubbo.config.AbstractConfig: boolean equals(java.lang.Object)>/java.lang.reflect.Method.invoke/1	<org.apache.curator.shaded.com.google.common.collect.LinkedHashMultiset: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<org.apache.curator.shaded.com.google.common.collect.LinkedHashMultiset: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<org.apache.dubbo.config.AbstractConfig: int hashCode()>/java.lang.reflect.Method.invoke/0	<org.apache.curator.shaded.com.google.common.collect.LinkedHashMultiset: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.IdentityHashMap: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<org.apache.dubbo.config.AbstractConfig: java.lang.String toString()>/java.lang.reflect.Method.invoke/0	<java.util.IdentityHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.IdentityHashMap: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<org.apache.dubbo.config.AbstractConfig: boolean equals(java.lang.Object)>/java.lang.reflect.Method.invoke/0	<java.util.IdentityHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.IdentityHashMap: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<org.apache.dubbo.config.AbstractConfig: boolean equals(java.lang.Object)>/java.lang.reflect.Method.invoke/1	<java.util.IdentityHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.IdentityHashMap: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<org.apache.dubbo.config.AbstractConfig: int hashCode()>/java.lang.reflect.Method.invoke/0	<java.util.IdentityHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<com.google.common.collect.CompactHashSet: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<org.apache.dubbo.config.AbstractConfig: java.lang.String toString()>/java.lang.reflect.Method.invoke/0	<com.google.common.collect.CompactHashSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<com.google.common.collect.CompactHashSet: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<org.apache.dubbo.config.AbstractConfig: boolean equals(java.lang.Object)>/java.lang.reflect.Method.invoke/0	<com.google.common.collect.CompactHashSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<com.google.common.collect.CompactHashSet: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<org.apache.dubbo.config.AbstractConfig: boolean equals(java.lang.Object)>/java.lang.reflect.Method.invoke/1	<com.google.common.collect.CompactHashSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<com.google.common.collect.CompactHashSet: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<org.apache.dubbo.config.AbstractConfig: int hashCode()>/java.lang.reflect.Method.invoke/0	<com.google.common.collect.CompactHashSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<org.jboss.netty.util.internal.LinkedTransferQueue: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<org.apache.dubbo.config.AbstractConfig: java.lang.String toString()>/java.lang.reflect.Method.invoke/0	<org.jboss.netty.util.internal.LinkedTransferQueue: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<org.jboss.netty.util.internal.LinkedTransferQueue: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<org.apache.dubbo.config.AbstractConfig: boolean equals(java.lang.Object)>/java.lang.reflect.Method.invoke/0	<org.jboss.netty.util.internal.LinkedTransferQueue: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<org.jboss.netty.util.internal.LinkedTransferQueue: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<org.apache.dubbo.config.AbstractConfig: boolean equals(java.lang.Object)>/java.lang.reflect.Method.invoke/1	<org.jboss.netty.util.internal.LinkedTransferQueue: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<org.jboss.netty.util.internal.LinkedTransferQueue: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<org.apache.dubbo.config.AbstractConfig: int hashCode()>/java.lang.reflect.Method.invoke/0	<org.jboss.netty.util.internal.LinkedTransferQueue: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<org.apache.curator.shaded.com.google.common.collect.HashMultiset: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<org.apache.dubbo.config.AbstractConfig: java.lang.String toString()>/java.lang.reflect.Method.invoke/0	<org.apache.curator.shaded.com.google.common.collect.HashMultiset: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<org.apache.curator.shaded.com.google.common.collect.HashMultiset: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<org.apache.dubbo.config.AbstractConfig: boolean equals(java.lang.Object)>/java.lang.reflect.Method.invoke/0	<org.apache.curator.shaded.com.google.common.collect.HashMultiset: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<org.apache.curator.shaded.com.google.common.collect.HashMultiset: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<org.apache.dubbo.config.AbstractConfig: boolean equals(java.lang.Object)>/java.lang.reflect.Method.invoke/1	<org.apache.curator.shaded.com.google.common.collect.HashMultiset: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<org.apache.curator.shaded.com.google.common.collect.HashMultiset: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<org.apache.dubbo.config.AbstractConfig: int hashCode()>/java.lang.reflect.Method.invoke/0	<org.apache.curator.shaded.com.google.common.collect.HashMultiset: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.CopyOnWriteArrayList: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<org.apache.dubbo.config.AbstractConfig: java.lang.String toString()>/java.lang.reflect.Method.invoke/0	<java.util.concurrent.CopyOnWriteArrayList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.CopyOnWriteArrayList: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<org.apache.dubbo.config.AbstractConfig: boolean equals(java.lang.Object)>/java.lang.reflect.Method.invoke/0	<java.util.concurrent.CopyOnWriteArrayList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.CopyOnWriteArrayList: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<org.apache.dubbo.config.AbstractConfig: boolean equals(java.lang.Object)>/java.lang.reflect.Method.invoke/1	<java.util.concurrent.CopyOnWriteArrayList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.CopyOnWriteArrayList: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<org.apache.dubbo.config.AbstractConfig: int hashCode()>/java.lang.reflect.Method.invoke/0	<java.util.concurrent.CopyOnWriteArrayList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<org.dom4j.bean.BeanMetaData: java.lang.Object getData(int,java.lang.Object)>/java.lang.reflect.Method.invoke/0	<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<org.dom4j.bean.BeanMetaData: void setData(int,java.lang.Object,java.lang.Object)>/java.lang.reflect.Method.invoke/0	<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>	<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>	<<immutable-context>>	<org.dom4j.util.SimpleSingleton: void reset()>/java.lang.ClassLoader.loadClass/0	<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeMap: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<org.dom4j.bean.BeanMetaData: java.lang.Object getData(int,java.lang.Object)>/java.lang.reflect.Method.invoke/0	<java.util.TreeMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeMap: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<org.dom4j.bean.BeanMetaData: void setData(int,java.lang.Object,java.lang.Object)>/java.lang.reflect.Method.invoke/0	<java.util.TreeMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeMap: void readObject(java.io.ObjectInputStream)>	<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>	<<immutable-context>>	<org.dom4j.util.SimpleSingleton: void reset()>/java.lang.ClassLoader.loadClass/0	<java.util.TreeMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<org.dom4j.bean.BeanMetaData: java.lang.Object getData(int,java.lang.Object)>/java.lang.reflect.Method.invoke/0	<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<org.dom4j.bean.BeanMetaData: void setData(int,java.lang.Object,java.lang.Object)>/java.lang.reflect.Method.invoke/0	<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>	<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>	<<immutable-context>>	<org.dom4j.util.SimpleSingleton: void reset()>/java.lang.ClassLoader.loadClass/0	<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<org.dom4j.bean.BeanMetaData: java.lang.Object getData(int,java.lang.Object)>/java.lang.reflect.Method.invoke/0	<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<org.dom4j.bean.BeanMetaData: void setData(int,java.lang.Object,java.lang.Object)>/java.lang.reflect.Method.invoke/0	<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>	<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>	<<immutable-context>>	<org.dom4j.util.SimpleSingleton: void reset()>/java.lang.ClassLoader.loadClass/0	<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.LinkedBlockingDeque: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<org.dom4j.bean.BeanMetaData: java.lang.Object getData(int,java.lang.Object)>/java.lang.reflect.Method.invoke/0	<java.util.concurrent.LinkedBlockingDeque: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.LinkedBlockingDeque: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<org.dom4j.bean.BeanMetaData: void setData(int,java.lang.Object,java.lang.Object)>/java.lang.reflect.Method.invoke/0	<java.util.concurrent.LinkedBlockingDeque: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.LinkedBlockingDeque: void readObject(java.io.ObjectInputStream)>	<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>	<<immutable-context>>	<org.dom4j.util.SimpleSingleton: void reset()>/java.lang.ClassLoader.loadClass/0	<java.util.concurrent.LinkedBlockingDeque: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<org.dom4j.DocumentFactory: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<org.dom4j.bean.BeanMetaData: java.lang.Object getData(int,java.lang.Object)>/java.lang.reflect.Method.invoke/0	<org.dom4j.DocumentFactory: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<org.dom4j.DocumentFactory: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<org.dom4j.bean.BeanMetaData: void setData(int,java.lang.Object,java.lang.Object)>/java.lang.reflect.Method.invoke/0	<org.dom4j.DocumentFactory: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<org.dom4j.DocumentFactory: void readObject(java.io.ObjectInputStream)>	<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>	<<immutable-context>>	<org.dom4j.util.SimpleSingleton: void reset()>/java.lang.ClassLoader.loadClass/0	<org.dom4j.DocumentFactory: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<org.apache.xerces.dom.PSVIAttrNSImpl: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<org.apache.xml.serialize.DOMSerializerImpl: void prepareForSerialization(org.apache.xml.serialize.XMLSerializer,org.w3c.dom.Node)>/java.lang.reflect.Method.invoke/0	<org.apache.xerces.dom.PSVIAttrNSImpl: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<org.apache.xerces.dom.PSVIAttrNSImpl: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<org.apache.xml.serialize.DOMSerializerImpl: java.lang.String _getXmlVersion(org.w3c.dom.Node)>/java.lang.reflect.Method.invoke/0	<org.apache.xerces.dom.PSVIAttrNSImpl: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<org.apache.xerces.dom.PSVIAttrNSImpl: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<org.apache.xml.serialize.BaseMarkupSerializer: void serializeNode(org.w3c.dom.Node)>/java.lang.reflect.Method.invoke/0	<org.apache.xerces.dom.PSVIAttrNSImpl: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<org.apache.xerces.dom.PSVIAttrNSImpl: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<org.apache.xml.serialize.BaseMarkupSerializer: void serializeNode(org.w3c.dom.Node)>/java.lang.reflect.Method.invoke/1	<org.apache.xerces.dom.PSVIAttrNSImpl: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<org.apache.xerces.dom.PSVIAttrNSImpl: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<org.apache.xerces.util.DOMUtil: org.w3c.dom.ls.LSException createLSException(short,java.lang.Throwable)>/java.lang.reflect.Method.invoke/0	<org.apache.xerces.dom.PSVIAttrNSImpl: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<org.apache.xerces.dom.PSVIAttrNSImpl: void readObject(java.io.ObjectInputStream)>	<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>	<<immutable-context>>	<org.apache.xerces.dom.ObjectFactory: java.lang.Class findProviderClass(java.lang.String,java.lang.ClassLoader,boolean)>/java.lang.ClassLoader.loadClass/0	<org.apache.xerces.dom.PSVIAttrNSImpl: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<org.apache.xerces.dom.PSVIAttrNSImpl: void readObject(java.io.ObjectInputStream)>	<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>	<<immutable-context>>	<org.apache.xerces.dom.ObjectFactory: java.lang.Class findProviderClass(java.lang.String,java.lang.ClassLoader,boolean)>/java.lang.ClassLoader.loadClass/1	<org.apache.xerces.dom.PSVIAttrNSImpl: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<org.apache.xerces.dom.PSVIAttrNSImpl: void readObject(java.io.ObjectInputStream)>	<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>	<<immutable-context>>	<org.apache.xerces.impl.dv.ObjectFactory: java.lang.Class findProviderClass(java.lang.String,java.lang.ClassLoader,boolean)>/java.lang.ClassLoader.loadClass/0	<org.apache.xerces.dom.PSVIAttrNSImpl: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<org.apache.xerces.dom.PSVIAttrNSImpl: void readObject(java.io.ObjectInputStream)>	<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>	<<immutable-context>>	<org.apache.xerces.impl.dv.ObjectFactory: java.lang.Class findProviderClass(java.lang.String,java.lang.ClassLoader,boolean)>/java.lang.ClassLoader.loadClass/1	<org.apache.xerces.dom.PSVIAttrNSImpl: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<org.apache.xerces.dom.PSVIAttrNSImpl: void readObject(java.io.ObjectInputStream)>	<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>	<<immutable-context>>	<org.apache.html.dom.ObjectFactory: java.lang.Class findProviderClass(java.lang.String,java.lang.ClassLoader,boolean)>/java.lang.ClassLoader.loadClass/0	<org.apache.xerces.dom.PSVIAttrNSImpl: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<org.apache.xerces.dom.PSVIAttrNSImpl: void readObject(java.io.ObjectInputStream)>	<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>	<<immutable-context>>	<org.apache.html.dom.ObjectFactory: java.lang.Class findProviderClass(java.lang.String,java.lang.ClassLoader,boolean)>/java.lang.ClassLoader.loadClass/1	<org.apache.xerces.dom.PSVIAttrNSImpl: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<org.apache.xerces.dom.PSVIAttrNSImpl: void readObject(java.io.ObjectInputStream)>	<java.io.FileInputStream: void <init>(java.io.File)>	<<immutable-context>>	<org.apache.xerces.impl.xs.XMLSchemaLoader: org.apache.xerces.xni.parser.XMLInputSource xsdToXMLInputSource(java.lang.Object)>/java.io.FileInputStream.<init>/0	<org.apache.xerces.dom.PSVIAttrNSImpl: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<org.apache.xerces.dom.PSVIAttrNSImpl: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(int)>	<<immutable-context>>	<org.apache.xml.serialize.IndentPrinter: void flushLine(boolean)>/java.io.Writer.write/0	<org.apache.xerces.dom.PSVIAttrNSImpl: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<org.apache.xerces.dom.PSVIAttrNSImpl: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(char[])>	<<immutable-context>>	<org.apache.xml.serialize.Printer: void printText(java.lang.String)>/java.io.Writer.write/0	<org.apache.xerces.dom.PSVIAttrNSImpl: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<org.apache.xerces.dom.PSVIAttrNSImpl: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(char[])>	<<immutable-context>>	<org.apache.xml.serialize.Printer: void printText(java.lang.StringBuffer)>/java.io.Writer.write/0	<org.apache.xerces.dom.PSVIAttrNSImpl: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<org.apache.xerces.dom.PSVIAttrNSImpl: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(char[])>	<<immutable-context>>	<org.apache.xml.serialize.Printer: void printText(char)>/java.io.Writer.write/0	<org.apache.xerces.dom.PSVIAttrNSImpl: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<org.apache.xerces.dom.PSVIAttrNSImpl: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(char[])>	<<immutable-context>>	<org.apache.xml.serialize.Printer: void printSpace()>/java.io.Writer.write/0	<org.apache.xerces.dom.PSVIAttrNSImpl: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<org.apache.xerces.dom.PSVIAttrNSImpl: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(char[])>	<<immutable-context>>	<org.apache.xml.serialize.Printer: void breakLine()>/java.io.Writer.write/0	<org.apache.xerces.dom.PSVIAttrNSImpl: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<org.apache.xerces.dom.PSVIAttrNSImpl: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<org.apache.xml.serialize.IndentPrinter: void printSpace()>/java.io.Writer.write/0	<org.apache.xerces.dom.PSVIAttrNSImpl: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<org.apache.xerces.dom.PSVIAttrNSImpl: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<org.apache.xml.serialize.IndentPrinter: void breakLine(boolean)>/java.io.Writer.write/0	<org.apache.xerces.dom.PSVIAttrNSImpl: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<org.apache.xerces.dom.PSVIAttrNSImpl: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<org.apache.xml.serialize.IndentPrinter: void flushLine(boolean)>/java.io.Writer.write/1	<org.apache.xerces.dom.PSVIAttrNSImpl: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<org.apache.xerces.dom.PSVIAttrNSImpl: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void print(java.lang.String)>	<<immutable-context>>	<org.apache.xerces.util.DefaultErrorHandler: void printError(java.lang.String,org.apache.xerces.xni.parser.XMLParseException)>/java.io.PrintWriter.print/1	<org.apache.xerces.dom.PSVIAttrNSImpl: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<org.apache.xerces.dom.PSVIAttrNSImpl: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void print(java.lang.String)>	<<immutable-context>>	<org.apache.xerces.util.DefaultErrorHandler: void printError(java.lang.String,org.apache.xerces.xni.parser.XMLParseException)>/java.io.PrintWriter.print/9	<org.apache.xerces.dom.PSVIAttrNSImpl: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.HashMap: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<org.apache.xml.serialize.DOMSerializerImpl: void prepareForSerialization(org.apache.xml.serialize.XMLSerializer,org.w3c.dom.Node)>/java.lang.reflect.Method.invoke/0	<java.util.HashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.HashMap: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<org.apache.xml.serialize.DOMSerializerImpl: java.lang.String _getXmlVersion(org.w3c.dom.Node)>/java.lang.reflect.Method.invoke/0	<java.util.HashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.HashMap: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<org.apache.xml.serialize.BaseMarkupSerializer: void serializeNode(org.w3c.dom.Node)>/java.lang.reflect.Method.invoke/0	<java.util.HashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.HashMap: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<org.apache.xml.serialize.BaseMarkupSerializer: void serializeNode(org.w3c.dom.Node)>/java.lang.reflect.Method.invoke/1	<java.util.HashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.HashMap: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<org.apache.xerces.util.DOMUtil: org.w3c.dom.ls.LSException createLSException(short,java.lang.Throwable)>/java.lang.reflect.Method.invoke/0	<java.util.HashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.HashMap: void readObject(java.io.ObjectInputStream)>	<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>	<<immutable-context>>	<org.apache.xerces.dom.ObjectFactory: java.lang.Class findProviderClass(java.lang.String,java.lang.ClassLoader,boolean)>/java.lang.ClassLoader.loadClass/0	<java.util.HashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.HashMap: void readObject(java.io.ObjectInputStream)>	<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>	<<immutable-context>>	<org.apache.xerces.dom.ObjectFactory: java.lang.Class findProviderClass(java.lang.String,java.lang.ClassLoader,boolean)>/java.lang.ClassLoader.loadClass/1	<java.util.HashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.HashMap: void readObject(java.io.ObjectInputStream)>	<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>	<<immutable-context>>	<org.apache.xerces.impl.dv.ObjectFactory: java.lang.Class findProviderClass(java.lang.String,java.lang.ClassLoader,boolean)>/java.lang.ClassLoader.loadClass/0	<java.util.HashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.HashMap: void readObject(java.io.ObjectInputStream)>	<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>	<<immutable-context>>	<org.apache.xerces.impl.dv.ObjectFactory: java.lang.Class findProviderClass(java.lang.String,java.lang.ClassLoader,boolean)>/java.lang.ClassLoader.loadClass/1	<java.util.HashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.HashMap: void readObject(java.io.ObjectInputStream)>	<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>	<<immutable-context>>	<org.apache.html.dom.ObjectFactory: java.lang.Class findProviderClass(java.lang.String,java.lang.ClassLoader,boolean)>/java.lang.ClassLoader.loadClass/0	<java.util.HashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.HashMap: void readObject(java.io.ObjectInputStream)>	<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>	<<immutable-context>>	<org.apache.html.dom.ObjectFactory: java.lang.Class findProviderClass(java.lang.String,java.lang.ClassLoader,boolean)>/java.lang.ClassLoader.loadClass/1	<java.util.HashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.HashMap: void readObject(java.io.ObjectInputStream)>	<java.io.FileInputStream: void <init>(java.io.File)>	<<immutable-context>>	<org.apache.xerces.impl.xs.XMLSchemaLoader: org.apache.xerces.xni.parser.XMLInputSource xsdToXMLInputSource(java.lang.Object)>/java.io.FileInputStream.<init>/0	<java.util.HashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.HashMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(int)>	<<immutable-context>>	<org.apache.xml.serialize.IndentPrinter: void flushLine(boolean)>/java.io.Writer.write/0	<java.util.HashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.HashMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(char[])>	<<immutable-context>>	<org.apache.xml.serialize.Printer: void printText(java.lang.String)>/java.io.Writer.write/0	<java.util.HashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.HashMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(char[])>	<<immutable-context>>	<org.apache.xml.serialize.Printer: void printText(java.lang.StringBuffer)>/java.io.Writer.write/0	<java.util.HashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.HashMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(char[])>	<<immutable-context>>	<org.apache.xml.serialize.Printer: void printText(char)>/java.io.Writer.write/0	<java.util.HashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.HashMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(char[])>	<<immutable-context>>	<org.apache.xml.serialize.Printer: void printSpace()>/java.io.Writer.write/0	<java.util.HashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.HashMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(char[])>	<<immutable-context>>	<org.apache.xml.serialize.Printer: void breakLine()>/java.io.Writer.write/0	<java.util.HashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.HashMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<org.apache.xml.serialize.IndentPrinter: void printSpace()>/java.io.Writer.write/0	<java.util.HashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.HashMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<org.apache.xml.serialize.IndentPrinter: void breakLine(boolean)>/java.io.Writer.write/0	<java.util.HashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.HashMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<org.apache.xml.serialize.IndentPrinter: void flushLine(boolean)>/java.io.Writer.write/1	<java.util.HashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.HashMap: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void print(java.lang.String)>	<<immutable-context>>	<org.apache.xerces.util.DefaultErrorHandler: void printError(java.lang.String,org.apache.xerces.xni.parser.XMLParseException)>/java.io.PrintWriter.print/1	<java.util.HashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.HashMap: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void print(java.lang.String)>	<<immutable-context>>	<org.apache.xerces.util.DefaultErrorHandler: void printError(java.lang.String,org.apache.xerces.xni.parser.XMLParseException)>/java.io.PrintWriter.print/9	<java.util.HashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.HashSet: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<org.apache.xml.serialize.DOMSerializerImpl: void prepareForSerialization(org.apache.xml.serialize.XMLSerializer,org.w3c.dom.Node)>/java.lang.reflect.Method.invoke/0	<java.util.HashSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.HashSet: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<org.apache.xml.serialize.DOMSerializerImpl: java.lang.String _getXmlVersion(org.w3c.dom.Node)>/java.lang.reflect.Method.invoke/0	<java.util.HashSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.HashSet: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<org.apache.xml.serialize.BaseMarkupSerializer: void serializeNode(org.w3c.dom.Node)>/java.lang.reflect.Method.invoke/0	<java.util.HashSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.HashSet: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<org.apache.xml.serialize.BaseMarkupSerializer: void serializeNode(org.w3c.dom.Node)>/java.lang.reflect.Method.invoke/1	<java.util.HashSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.HashSet: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<org.apache.xerces.util.DOMUtil: org.w3c.dom.ls.LSException createLSException(short,java.lang.Throwable)>/java.lang.reflect.Method.invoke/0	<java.util.HashSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.HashSet: void readObject(java.io.ObjectInputStream)>	<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>	<<immutable-context>>	<org.apache.xerces.dom.ObjectFactory: java.lang.Class findProviderClass(java.lang.String,java.lang.ClassLoader,boolean)>/java.lang.ClassLoader.loadClass/0	<java.util.HashSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.HashSet: void readObject(java.io.ObjectInputStream)>	<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>	<<immutable-context>>	<org.apache.xerces.dom.ObjectFactory: java.lang.Class findProviderClass(java.lang.String,java.lang.ClassLoader,boolean)>/java.lang.ClassLoader.loadClass/1	<java.util.HashSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.HashSet: void readObject(java.io.ObjectInputStream)>	<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>	<<immutable-context>>	<org.apache.xerces.impl.dv.ObjectFactory: java.lang.Class findProviderClass(java.lang.String,java.lang.ClassLoader,boolean)>/java.lang.ClassLoader.loadClass/0	<java.util.HashSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.HashSet: void readObject(java.io.ObjectInputStream)>	<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>	<<immutable-context>>	<org.apache.xerces.impl.dv.ObjectFactory: java.lang.Class findProviderClass(java.lang.String,java.lang.ClassLoader,boolean)>/java.lang.ClassLoader.loadClass/1	<java.util.HashSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.HashSet: void readObject(java.io.ObjectInputStream)>	<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>	<<immutable-context>>	<org.apache.html.dom.ObjectFactory: java.lang.Class findProviderClass(java.lang.String,java.lang.ClassLoader,boolean)>/java.lang.ClassLoader.loadClass/0	<java.util.HashSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.HashSet: void readObject(java.io.ObjectInputStream)>	<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>	<<immutable-context>>	<org.apache.html.dom.ObjectFactory: java.lang.Class findProviderClass(java.lang.String,java.lang.ClassLoader,boolean)>/java.lang.ClassLoader.loadClass/1	<java.util.HashSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.HashSet: void readObject(java.io.ObjectInputStream)>	<java.io.FileInputStream: void <init>(java.io.File)>	<<immutable-context>>	<org.apache.xerces.impl.xs.XMLSchemaLoader: org.apache.xerces.xni.parser.XMLInputSource xsdToXMLInputSource(java.lang.Object)>/java.io.FileInputStream.<init>/0	<java.util.HashSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.HashSet: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(int)>	<<immutable-context>>	<org.apache.xml.serialize.IndentPrinter: void flushLine(boolean)>/java.io.Writer.write/0	<java.util.HashSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.HashSet: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(char[])>	<<immutable-context>>	<org.apache.xml.serialize.Printer: void printText(java.lang.String)>/java.io.Writer.write/0	<java.util.HashSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.HashSet: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(char[])>	<<immutable-context>>	<org.apache.xml.serialize.Printer: void printText(java.lang.StringBuffer)>/java.io.Writer.write/0	<java.util.HashSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.HashSet: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(char[])>	<<immutable-context>>	<org.apache.xml.serialize.Printer: void printText(char)>/java.io.Writer.write/0	<java.util.HashSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.HashSet: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(char[])>	<<immutable-context>>	<org.apache.xml.serialize.Printer: void printSpace()>/java.io.Writer.write/0	<java.util.HashSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.HashSet: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(char[])>	<<immutable-context>>	<org.apache.xml.serialize.Printer: void breakLine()>/java.io.Writer.write/0	<java.util.HashSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.HashSet: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<org.apache.xml.serialize.IndentPrinter: void printSpace()>/java.io.Writer.write/0	<java.util.HashSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.HashSet: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<org.apache.xml.serialize.IndentPrinter: void breakLine(boolean)>/java.io.Writer.write/0	<java.util.HashSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.HashSet: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<org.apache.xml.serialize.IndentPrinter: void flushLine(boolean)>/java.io.Writer.write/1	<java.util.HashSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.HashSet: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void print(java.lang.String)>	<<immutable-context>>	<org.apache.xerces.util.DefaultErrorHandler: void printError(java.lang.String,org.apache.xerces.xni.parser.XMLParseException)>/java.io.PrintWriter.print/1	<java.util.HashSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.HashSet: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void print(java.lang.String)>	<<immutable-context>>	<org.apache.xerces.util.DefaultErrorHandler: void printError(java.lang.String,org.apache.xerces.xni.parser.XMLParseException)>/java.io.PrintWriter.print/9	<java.util.HashSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<org.apache.xml.serialize.DOMSerializerImpl: void prepareForSerialization(org.apache.xml.serialize.XMLSerializer,org.w3c.dom.Node)>/java.lang.reflect.Method.invoke/0	<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<org.apache.xml.serialize.DOMSerializerImpl: java.lang.String _getXmlVersion(org.w3c.dom.Node)>/java.lang.reflect.Method.invoke/0	<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<org.apache.xml.serialize.BaseMarkupSerializer: void serializeNode(org.w3c.dom.Node)>/java.lang.reflect.Method.invoke/0	<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<org.apache.xml.serialize.BaseMarkupSerializer: void serializeNode(org.w3c.dom.Node)>/java.lang.reflect.Method.invoke/1	<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<org.apache.xerces.util.DOMUtil: org.w3c.dom.ls.LSException createLSException(short,java.lang.Throwable)>/java.lang.reflect.Method.invoke/0	<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>	<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>	<<immutable-context>>	<org.apache.xerces.dom.ObjectFactory: java.lang.Class findProviderClass(java.lang.String,java.lang.ClassLoader,boolean)>/java.lang.ClassLoader.loadClass/0	<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>	<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>	<<immutable-context>>	<org.apache.xerces.dom.ObjectFactory: java.lang.Class findProviderClass(java.lang.String,java.lang.ClassLoader,boolean)>/java.lang.ClassLoader.loadClass/1	<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>	<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>	<<immutable-context>>	<org.apache.xerces.impl.dv.ObjectFactory: java.lang.Class findProviderClass(java.lang.String,java.lang.ClassLoader,boolean)>/java.lang.ClassLoader.loadClass/0	<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>	<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>	<<immutable-context>>	<org.apache.xerces.impl.dv.ObjectFactory: java.lang.Class findProviderClass(java.lang.String,java.lang.ClassLoader,boolean)>/java.lang.ClassLoader.loadClass/1	<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>	<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>	<<immutable-context>>	<org.apache.html.dom.ObjectFactory: java.lang.Class findProviderClass(java.lang.String,java.lang.ClassLoader,boolean)>/java.lang.ClassLoader.loadClass/0	<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>	<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>	<<immutable-context>>	<org.apache.html.dom.ObjectFactory: java.lang.Class findProviderClass(java.lang.String,java.lang.ClassLoader,boolean)>/java.lang.ClassLoader.loadClass/1	<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>	<java.io.FileInputStream: void <init>(java.io.File)>	<<immutable-context>>	<org.apache.xerces.impl.xs.XMLSchemaLoader: org.apache.xerces.xni.parser.XMLInputSource xsdToXMLInputSource(java.lang.Object)>/java.io.FileInputStream.<init>/0	<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(int)>	<<immutable-context>>	<org.apache.xml.serialize.IndentPrinter: void flushLine(boolean)>/java.io.Writer.write/0	<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(char[])>	<<immutable-context>>	<org.apache.xml.serialize.Printer: void printText(java.lang.String)>/java.io.Writer.write/0	<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(char[])>	<<immutable-context>>	<org.apache.xml.serialize.Printer: void printText(java.lang.StringBuffer)>/java.io.Writer.write/0	<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(char[])>	<<immutable-context>>	<org.apache.xml.serialize.Printer: void printText(char)>/java.io.Writer.write/0	<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(char[])>	<<immutable-context>>	<org.apache.xml.serialize.Printer: void printSpace()>/java.io.Writer.write/0	<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(char[])>	<<immutable-context>>	<org.apache.xml.serialize.Printer: void breakLine()>/java.io.Writer.write/0	<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<org.apache.xml.serialize.IndentPrinter: void printSpace()>/java.io.Writer.write/0	<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<org.apache.xml.serialize.IndentPrinter: void breakLine(boolean)>/java.io.Writer.write/0	<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<org.apache.xml.serialize.IndentPrinter: void flushLine(boolean)>/java.io.Writer.write/1	<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void print(java.lang.String)>	<<immutable-context>>	<org.apache.xerces.util.DefaultErrorHandler: void printError(java.lang.String,org.apache.xerces.xni.parser.XMLParseException)>/java.io.PrintWriter.print/1	<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void print(java.lang.String)>	<<immutable-context>>	<org.apache.xerces.util.DefaultErrorHandler: void printError(java.lang.String,org.apache.xerces.xni.parser.XMLParseException)>/java.io.PrintWriter.print/9	<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeMap: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<org.apache.xml.serialize.DOMSerializerImpl: void prepareForSerialization(org.apache.xml.serialize.XMLSerializer,org.w3c.dom.Node)>/java.lang.reflect.Method.invoke/0	<java.util.TreeMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeMap: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<org.apache.xml.serialize.DOMSerializerImpl: java.lang.String _getXmlVersion(org.w3c.dom.Node)>/java.lang.reflect.Method.invoke/0	<java.util.TreeMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeMap: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<org.apache.xml.serialize.BaseMarkupSerializer: void serializeNode(org.w3c.dom.Node)>/java.lang.reflect.Method.invoke/0	<java.util.TreeMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeMap: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<org.apache.xml.serialize.BaseMarkupSerializer: void serializeNode(org.w3c.dom.Node)>/java.lang.reflect.Method.invoke/1	<java.util.TreeMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeMap: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<org.apache.xerces.util.DOMUtil: org.w3c.dom.ls.LSException createLSException(short,java.lang.Throwable)>/java.lang.reflect.Method.invoke/0	<java.util.TreeMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeMap: void readObject(java.io.ObjectInputStream)>	<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>	<<immutable-context>>	<org.apache.xerces.dom.ObjectFactory: java.lang.Class findProviderClass(java.lang.String,java.lang.ClassLoader,boolean)>/java.lang.ClassLoader.loadClass/0	<java.util.TreeMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeMap: void readObject(java.io.ObjectInputStream)>	<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>	<<immutable-context>>	<org.apache.xerces.dom.ObjectFactory: java.lang.Class findProviderClass(java.lang.String,java.lang.ClassLoader,boolean)>/java.lang.ClassLoader.loadClass/1	<java.util.TreeMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeMap: void readObject(java.io.ObjectInputStream)>	<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>	<<immutable-context>>	<org.apache.xerces.impl.dv.ObjectFactory: java.lang.Class findProviderClass(java.lang.String,java.lang.ClassLoader,boolean)>/java.lang.ClassLoader.loadClass/0	<java.util.TreeMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeMap: void readObject(java.io.ObjectInputStream)>	<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>	<<immutable-context>>	<org.apache.xerces.impl.dv.ObjectFactory: java.lang.Class findProviderClass(java.lang.String,java.lang.ClassLoader,boolean)>/java.lang.ClassLoader.loadClass/1	<java.util.TreeMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeMap: void readObject(java.io.ObjectInputStream)>	<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>	<<immutable-context>>	<org.apache.html.dom.ObjectFactory: java.lang.Class findProviderClass(java.lang.String,java.lang.ClassLoader,boolean)>/java.lang.ClassLoader.loadClass/0	<java.util.TreeMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeMap: void readObject(java.io.ObjectInputStream)>	<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>	<<immutable-context>>	<org.apache.html.dom.ObjectFactory: java.lang.Class findProviderClass(java.lang.String,java.lang.ClassLoader,boolean)>/java.lang.ClassLoader.loadClass/1	<java.util.TreeMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeMap: void readObject(java.io.ObjectInputStream)>	<java.io.FileInputStream: void <init>(java.io.File)>	<<immutable-context>>	<org.apache.xerces.impl.xs.XMLSchemaLoader: org.apache.xerces.xni.parser.XMLInputSource xsdToXMLInputSource(java.lang.Object)>/java.io.FileInputStream.<init>/0	<java.util.TreeMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(int)>	<<immutable-context>>	<org.apache.xml.serialize.IndentPrinter: void flushLine(boolean)>/java.io.Writer.write/0	<java.util.TreeMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(char[])>	<<immutable-context>>	<org.apache.xml.serialize.Printer: void printText(java.lang.String)>/java.io.Writer.write/0	<java.util.TreeMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(char[])>	<<immutable-context>>	<org.apache.xml.serialize.Printer: void printText(java.lang.StringBuffer)>/java.io.Writer.write/0	<java.util.TreeMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(char[])>	<<immutable-context>>	<org.apache.xml.serialize.Printer: void printText(char)>/java.io.Writer.write/0	<java.util.TreeMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(char[])>	<<immutable-context>>	<org.apache.xml.serialize.Printer: void printSpace()>/java.io.Writer.write/0	<java.util.TreeMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(char[])>	<<immutable-context>>	<org.apache.xml.serialize.Printer: void breakLine()>/java.io.Writer.write/0	<java.util.TreeMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<org.apache.xml.serialize.IndentPrinter: void printSpace()>/java.io.Writer.write/0	<java.util.TreeMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<org.apache.xml.serialize.IndentPrinter: void breakLine(boolean)>/java.io.Writer.write/0	<java.util.TreeMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<org.apache.xml.serialize.IndentPrinter: void flushLine(boolean)>/java.io.Writer.write/1	<java.util.TreeMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeMap: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void print(java.lang.String)>	<<immutable-context>>	<org.apache.xerces.util.DefaultErrorHandler: void printError(java.lang.String,org.apache.xerces.xni.parser.XMLParseException)>/java.io.PrintWriter.print/1	<java.util.TreeMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeMap: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void print(java.lang.String)>	<<immutable-context>>	<org.apache.xerces.util.DefaultErrorHandler: void printError(java.lang.String,org.apache.xerces.xni.parser.XMLParseException)>/java.io.PrintWriter.print/9	<java.util.TreeMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<org.apache.xerces.dom.CoreDocumentImpl: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<org.apache.xml.serialize.DOMSerializerImpl: void prepareForSerialization(org.apache.xml.serialize.XMLSerializer,org.w3c.dom.Node)>/java.lang.reflect.Method.invoke/0	<org.apache.xerces.dom.CoreDocumentImpl: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<org.apache.xerces.dom.CoreDocumentImpl: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<org.apache.xml.serialize.DOMSerializerImpl: java.lang.String _getXmlVersion(org.w3c.dom.Node)>/java.lang.reflect.Method.invoke/0	<org.apache.xerces.dom.CoreDocumentImpl: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<org.apache.xerces.dom.CoreDocumentImpl: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<org.apache.xml.serialize.BaseMarkupSerializer: void serializeNode(org.w3c.dom.Node)>/java.lang.reflect.Method.invoke/0	<org.apache.xerces.dom.CoreDocumentImpl: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<org.apache.xerces.dom.CoreDocumentImpl: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<org.apache.xml.serialize.BaseMarkupSerializer: void serializeNode(org.w3c.dom.Node)>/java.lang.reflect.Method.invoke/1	<org.apache.xerces.dom.CoreDocumentImpl: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<org.apache.xerces.dom.CoreDocumentImpl: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<org.apache.xerces.util.DOMUtil: org.w3c.dom.ls.LSException createLSException(short,java.lang.Throwable)>/java.lang.reflect.Method.invoke/0	<org.apache.xerces.dom.CoreDocumentImpl: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<org.apache.xerces.dom.CoreDocumentImpl: void readObject(java.io.ObjectInputStream)>	<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>	<<immutable-context>>	<org.apache.xerces.dom.ObjectFactory: java.lang.Class findProviderClass(java.lang.String,java.lang.ClassLoader,boolean)>/java.lang.ClassLoader.loadClass/0	<org.apache.xerces.dom.CoreDocumentImpl: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<org.apache.xerces.dom.CoreDocumentImpl: void readObject(java.io.ObjectInputStream)>	<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>	<<immutable-context>>	<org.apache.xerces.dom.ObjectFactory: java.lang.Class findProviderClass(java.lang.String,java.lang.ClassLoader,boolean)>/java.lang.ClassLoader.loadClass/1	<org.apache.xerces.dom.CoreDocumentImpl: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<org.apache.xerces.dom.CoreDocumentImpl: void readObject(java.io.ObjectInputStream)>	<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>	<<immutable-context>>	<org.apache.xerces.impl.dv.ObjectFactory: java.lang.Class findProviderClass(java.lang.String,java.lang.ClassLoader,boolean)>/java.lang.ClassLoader.loadClass/0	<org.apache.xerces.dom.CoreDocumentImpl: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<org.apache.xerces.dom.CoreDocumentImpl: void readObject(java.io.ObjectInputStream)>	<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>	<<immutable-context>>	<org.apache.xerces.impl.dv.ObjectFactory: java.lang.Class findProviderClass(java.lang.String,java.lang.ClassLoader,boolean)>/java.lang.ClassLoader.loadClass/1	<org.apache.xerces.dom.CoreDocumentImpl: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<org.apache.xerces.dom.CoreDocumentImpl: void readObject(java.io.ObjectInputStream)>	<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>	<<immutable-context>>	<org.apache.html.dom.ObjectFactory: java.lang.Class findProviderClass(java.lang.String,java.lang.ClassLoader,boolean)>/java.lang.ClassLoader.loadClass/0	<org.apache.xerces.dom.CoreDocumentImpl: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<org.apache.xerces.dom.CoreDocumentImpl: void readObject(java.io.ObjectInputStream)>	<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>	<<immutable-context>>	<org.apache.html.dom.ObjectFactory: java.lang.Class findProviderClass(java.lang.String,java.lang.ClassLoader,boolean)>/java.lang.ClassLoader.loadClass/1	<org.apache.xerces.dom.CoreDocumentImpl: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<org.apache.xerces.dom.CoreDocumentImpl: void readObject(java.io.ObjectInputStream)>	<java.io.FileInputStream: void <init>(java.io.File)>	<<immutable-context>>	<org.apache.xerces.impl.xs.XMLSchemaLoader: org.apache.xerces.xni.parser.XMLInputSource xsdToXMLInputSource(java.lang.Object)>/java.io.FileInputStream.<init>/0	<org.apache.xerces.dom.CoreDocumentImpl: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<org.apache.xerces.dom.CoreDocumentImpl: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(int)>	<<immutable-context>>	<org.apache.xml.serialize.IndentPrinter: void flushLine(boolean)>/java.io.Writer.write/0	<org.apache.xerces.dom.CoreDocumentImpl: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<org.apache.xerces.dom.CoreDocumentImpl: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(char[])>	<<immutable-context>>	<org.apache.xml.serialize.Printer: void printText(java.lang.String)>/java.io.Writer.write/0	<org.apache.xerces.dom.CoreDocumentImpl: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<org.apache.xerces.dom.CoreDocumentImpl: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(char[])>	<<immutable-context>>	<org.apache.xml.serialize.Printer: void printText(java.lang.StringBuffer)>/java.io.Writer.write/0	<org.apache.xerces.dom.CoreDocumentImpl: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<org.apache.xerces.dom.CoreDocumentImpl: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(char[])>	<<immutable-context>>	<org.apache.xml.serialize.Printer: void printText(char)>/java.io.Writer.write/0	<org.apache.xerces.dom.CoreDocumentImpl: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<org.apache.xerces.dom.CoreDocumentImpl: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(char[])>	<<immutable-context>>	<org.apache.xml.serialize.Printer: void printSpace()>/java.io.Writer.write/0	<org.apache.xerces.dom.CoreDocumentImpl: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<org.apache.xerces.dom.CoreDocumentImpl: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(char[])>	<<immutable-context>>	<org.apache.xml.serialize.Printer: void breakLine()>/java.io.Writer.write/0	<org.apache.xerces.dom.CoreDocumentImpl: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<org.apache.xerces.dom.CoreDocumentImpl: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<org.apache.xml.serialize.IndentPrinter: void printSpace()>/java.io.Writer.write/0	<org.apache.xerces.dom.CoreDocumentImpl: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<org.apache.xerces.dom.CoreDocumentImpl: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<org.apache.xml.serialize.IndentPrinter: void breakLine(boolean)>/java.io.Writer.write/0	<org.apache.xerces.dom.CoreDocumentImpl: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<org.apache.xerces.dom.CoreDocumentImpl: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<org.apache.xml.serialize.IndentPrinter: void flushLine(boolean)>/java.io.Writer.write/1	<org.apache.xerces.dom.CoreDocumentImpl: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<org.apache.xerces.dom.CoreDocumentImpl: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void print(java.lang.String)>	<<immutable-context>>	<org.apache.xerces.util.DefaultErrorHandler: void printError(java.lang.String,org.apache.xerces.xni.parser.XMLParseException)>/java.io.PrintWriter.print/1	<org.apache.xerces.dom.CoreDocumentImpl: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<org.apache.xerces.dom.CoreDocumentImpl: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void print(java.lang.String)>	<<immutable-context>>	<org.apache.xerces.util.DefaultErrorHandler: void printError(java.lang.String,org.apache.xerces.xni.parser.XMLParseException)>/java.io.PrintWriter.print/9	<org.apache.xerces.dom.CoreDocumentImpl: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<com.google.gson.internal.LinkedTreeMap: void readObject(java.io.ObjectInputStream)>	<java.io.FileInputStream: void <init>(java.io.File)>	<<immutable-context>>	<water.network.SSLSocketChannelFactory: void <init>()>/java.io.FileInputStream.<init>/0	<com.google.gson.internal.LinkedTreeMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<com.google.gson.internal.LinkedTreeMap: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.lang.String)>	<<immutable-context>>	<water.util.FileIntegrityChecker: void setupLocal()>/java.io.File.<init>/0	<com.google.gson.internal.LinkedTreeMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<com.google.gson.internal.LinkedTreeMap: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.lang.String)>	<<immutable-context>>	<water.util.Log: java.io.File determineLogDir()>/java.io.File.<init>/3	<com.google.gson.internal.LinkedTreeMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<com.google.gson.internal.LinkedTreeMap: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.io.File,java.lang.String)>	<<immutable-context>>	<water.util.Log: java.io.File determineLogDir()>/java.io.File.<init>/4	<com.google.gson.internal.LinkedTreeMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<com.google.gson.internal.LinkedTreeMap: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.io.File,java.lang.String)>	<<immutable-context>>	<water.network.SSLProperties: java.lang.String expandPath(java.lang.String)>/java.io.File.<init>/1	<com.google.gson.internal.LinkedTreeMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<jsr166y.ForkJoinTask: void readObject(java.io.ObjectInputStream)>	<java.io.FileInputStream: void <init>(java.lang.String)>	<<immutable-context>>	<water.network.SSLSocketChannelFactory: javax.net.ssl.TrustManager[] trustManager()>/java.io.FileInputStream.<init>/0	<jsr166y.ForkJoinTask: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<jsr166y.ForkJoinTask: void readObject(java.io.ObjectInputStream)>	<java.io.FileInputStream: void <init>(java.lang.String)>	<<immutable-context>>	<water.network.SSLSocketChannelFactory: javax.net.ssl.KeyManager[] keyManager()>/java.io.FileInputStream.<init>/0	<jsr166y.ForkJoinTask: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<jsr166y.ForkJoinTask: void readObject(java.io.ObjectInputStream)>	<java.io.FileInputStream: void <init>(java.io.File)>	<<immutable-context>>	<water.network.SSLSocketChannelFactory: void <init>()>/java.io.FileInputStream.<init>/0	<jsr166y.ForkJoinTask: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<jsr166y.ForkJoinTask: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.lang.String)>	<<immutable-context>>	<water.util.FileIntegrityChecker: void setupLocal()>/java.io.File.<init>/0	<jsr166y.ForkJoinTask: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<jsr166y.ForkJoinTask: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.lang.String)>	<<immutable-context>>	<water.util.Log: java.io.File determineLogDir()>/java.io.File.<init>/3	<jsr166y.ForkJoinTask: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<jsr166y.ForkJoinTask: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.io.File,java.lang.String)>	<<immutable-context>>	<water.util.Log: java.io.File determineLogDir()>/java.io.File.<init>/4	<jsr166y.ForkJoinTask: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<jsr166y.ForkJoinTask: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.io.File,java.lang.String)>	<<immutable-context>>	<water.network.SSLProperties: java.lang.String expandPath(java.lang.String)>/java.io.File.<init>/1	<jsr166y.ForkJoinTask: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.CopyOnWriteArrayList: void readObject(java.io.ObjectInputStream)>	<java.io.FileInputStream: void <init>(java.lang.String)>	<<immutable-context>>	<water.network.SSLSocketChannelFactory: javax.net.ssl.TrustManager[] trustManager()>/java.io.FileInputStream.<init>/0	<java.util.concurrent.CopyOnWriteArrayList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.CopyOnWriteArrayList: void readObject(java.io.ObjectInputStream)>	<java.io.FileInputStream: void <init>(java.lang.String)>	<<immutable-context>>	<water.network.SSLSocketChannelFactory: javax.net.ssl.KeyManager[] keyManager()>/java.io.FileInputStream.<init>/0	<java.util.concurrent.CopyOnWriteArrayList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.CopyOnWriteArrayList: void readObject(java.io.ObjectInputStream)>	<java.io.FileInputStream: void <init>(java.io.File)>	<<immutable-context>>	<water.network.SSLSocketChannelFactory: void <init>()>/java.io.FileInputStream.<init>/0	<java.util.concurrent.CopyOnWriteArrayList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.CopyOnWriteArrayList: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.lang.String)>	<<immutable-context>>	<water.util.FileIntegrityChecker: void setupLocal()>/java.io.File.<init>/0	<java.util.concurrent.CopyOnWriteArrayList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.CopyOnWriteArrayList: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.lang.String)>	<<immutable-context>>	<water.util.Log: java.io.File determineLogDir()>/java.io.File.<init>/3	<java.util.concurrent.CopyOnWriteArrayList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.CopyOnWriteArrayList: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.io.File,java.lang.String)>	<<immutable-context>>	<water.util.Log: java.io.File determineLogDir()>/java.io.File.<init>/4	<java.util.concurrent.CopyOnWriteArrayList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.CopyOnWriteArrayList: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.io.File,java.lang.String)>	<<immutable-context>>	<water.network.SSLProperties: java.lang.String expandPath(java.lang.String)>/java.io.File.<init>/1	<java.util.concurrent.CopyOnWriteArrayList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.IdentityHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.FileInputStream: void <init>(java.lang.String)>	<<immutable-context>>	<water.network.SSLSocketChannelFactory: javax.net.ssl.TrustManager[] trustManager()>/java.io.FileInputStream.<init>/0	<java.util.IdentityHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.IdentityHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.FileInputStream: void <init>(java.lang.String)>	<<immutable-context>>	<water.network.SSLSocketChannelFactory: javax.net.ssl.KeyManager[] keyManager()>/java.io.FileInputStream.<init>/0	<java.util.IdentityHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.IdentityHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.FileInputStream: void <init>(java.io.File)>	<<immutable-context>>	<water.network.SSLSocketChannelFactory: void <init>()>/java.io.FileInputStream.<init>/0	<java.util.IdentityHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.IdentityHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.lang.String)>	<<immutable-context>>	<water.util.FileIntegrityChecker: void setupLocal()>/java.io.File.<init>/0	<java.util.IdentityHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.IdentityHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.lang.String)>	<<immutable-context>>	<water.util.Log: java.io.File determineLogDir()>/java.io.File.<init>/3	<java.util.IdentityHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.IdentityHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.io.File,java.lang.String)>	<<immutable-context>>	<water.util.Log: java.io.File determineLogDir()>/java.io.File.<init>/4	<java.util.IdentityHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.IdentityHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.io.File,java.lang.String)>	<<immutable-context>>	<water.network.SSLProperties: java.lang.String expandPath(java.lang.String)>/java.io.File.<init>/1	<java.util.IdentityHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.PriorityBlockingQueue: void readObject(java.io.ObjectInputStream)>	<java.io.FileInputStream: void <init>(java.lang.String)>	<<immutable-context>>	<water.network.SSLSocketChannelFactory: javax.net.ssl.TrustManager[] trustManager()>/java.io.FileInputStream.<init>/0	<java.util.concurrent.PriorityBlockingQueue: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.PriorityBlockingQueue: void readObject(java.io.ObjectInputStream)>	<java.io.FileInputStream: void <init>(java.lang.String)>	<<immutable-context>>	<water.network.SSLSocketChannelFactory: javax.net.ssl.KeyManager[] keyManager()>/java.io.FileInputStream.<init>/0	<java.util.concurrent.PriorityBlockingQueue: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.PriorityBlockingQueue: void readObject(java.io.ObjectInputStream)>	<java.io.FileInputStream: void <init>(java.io.File)>	<<immutable-context>>	<water.network.SSLSocketChannelFactory: void <init>()>/java.io.FileInputStream.<init>/0	<java.util.concurrent.PriorityBlockingQueue: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.PriorityBlockingQueue: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.lang.String)>	<<immutable-context>>	<water.util.FileIntegrityChecker: void setupLocal()>/java.io.File.<init>/0	<java.util.concurrent.PriorityBlockingQueue: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.PriorityBlockingQueue: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.lang.String)>	<<immutable-context>>	<water.util.Log: java.io.File determineLogDir()>/java.io.File.<init>/3	<java.util.concurrent.PriorityBlockingQueue: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.PriorityBlockingQueue: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.lang.String)>	<<immutable-context>>	<water.network.SSLSocketChannelFactory: void <init>()>/java.io.File.<init>/0	<java.util.concurrent.PriorityBlockingQueue: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.PriorityBlockingQueue: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.lang.String)>	<<immutable-context>>	<water.network.SSLProperties: java.lang.String expandPath(java.lang.String)>/java.io.File.<init>/0	<java.util.concurrent.PriorityBlockingQueue: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.PriorityBlockingQueue: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.io.File,java.lang.String)>	<<immutable-context>>	<water.util.Log: java.io.File determineLogDir()>/java.io.File.<init>/4	<java.util.concurrent.PriorityBlockingQueue: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.PriorityBlockingQueue: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.io.File,java.lang.String)>	<<immutable-context>>	<water.network.SSLProperties: java.lang.String expandPath(java.lang.String)>/java.io.File.<init>/1	<java.util.concurrent.PriorityBlockingQueue: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<jsr166y.ConcurrentLinkedDeque: void readObject(java.io.ObjectInputStream)>	<java.io.FileInputStream: void <init>(java.lang.String)>	<<immutable-context>>	<water.network.SSLSocketChannelFactory: javax.net.ssl.TrustManager[] trustManager()>/java.io.FileInputStream.<init>/0	<jsr166y.ConcurrentLinkedDeque: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<jsr166y.ConcurrentLinkedDeque: void readObject(java.io.ObjectInputStream)>	<java.io.FileInputStream: void <init>(java.lang.String)>	<<immutable-context>>	<water.network.SSLSocketChannelFactory: javax.net.ssl.KeyManager[] keyManager()>/java.io.FileInputStream.<init>/0	<jsr166y.ConcurrentLinkedDeque: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<jsr166y.ConcurrentLinkedDeque: void readObject(java.io.ObjectInputStream)>	<java.io.FileInputStream: void <init>(java.io.File)>	<<immutable-context>>	<water.network.SSLSocketChannelFactory: void <init>()>/java.io.FileInputStream.<init>/0	<jsr166y.ConcurrentLinkedDeque: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<jsr166y.ConcurrentLinkedDeque: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.lang.String)>	<<immutable-context>>	<water.util.FileIntegrityChecker: void setupLocal()>/java.io.File.<init>/0	<jsr166y.ConcurrentLinkedDeque: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<jsr166y.ConcurrentLinkedDeque: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.lang.String)>	<<immutable-context>>	<water.util.Log: java.io.File determineLogDir()>/java.io.File.<init>/3	<jsr166y.ConcurrentLinkedDeque: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<jsr166y.ConcurrentLinkedDeque: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.io.File,java.lang.String)>	<<immutable-context>>	<water.util.Log: java.io.File determineLogDir()>/java.io.File.<init>/4	<jsr166y.ConcurrentLinkedDeque: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<jsr166y.ConcurrentLinkedDeque: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.io.File,java.lang.String)>	<<immutable-context>>	<water.network.SSLProperties: java.lang.String expandPath(java.lang.String)>/java.io.File.<init>/1	<jsr166y.ConcurrentLinkedDeque: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.LinkedBlockingDeque: void readObject(java.io.ObjectInputStream)>	<java.io.FileInputStream: void <init>(java.lang.String)>	<<immutable-context>>	<water.network.SSLSocketChannelFactory: javax.net.ssl.TrustManager[] trustManager()>/java.io.FileInputStream.<init>/0	<java.util.concurrent.LinkedBlockingDeque: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.LinkedBlockingDeque: void readObject(java.io.ObjectInputStream)>	<java.io.FileInputStream: void <init>(java.lang.String)>	<<immutable-context>>	<water.network.SSLSocketChannelFactory: javax.net.ssl.KeyManager[] keyManager()>/java.io.FileInputStream.<init>/0	<java.util.concurrent.LinkedBlockingDeque: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.LinkedBlockingDeque: void readObject(java.io.ObjectInputStream)>	<java.io.FileInputStream: void <init>(java.io.File)>	<<immutable-context>>	<water.network.SSLSocketChannelFactory: void <init>()>/java.io.FileInputStream.<init>/0	<java.util.concurrent.LinkedBlockingDeque: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.LinkedBlockingDeque: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.lang.String)>	<<immutable-context>>	<water.util.FileIntegrityChecker: void setupLocal()>/java.io.File.<init>/0	<java.util.concurrent.LinkedBlockingDeque: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.LinkedBlockingDeque: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.lang.String)>	<<immutable-context>>	<water.util.Log: java.io.File determineLogDir()>/java.io.File.<init>/3	<java.util.concurrent.LinkedBlockingDeque: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.LinkedBlockingDeque: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.io.File,java.lang.String)>	<<immutable-context>>	<water.util.Log: java.io.File determineLogDir()>/java.io.File.<init>/4	<java.util.concurrent.LinkedBlockingDeque: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.LinkedBlockingDeque: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.io.File,java.lang.String)>	<<immutable-context>>	<water.network.SSLProperties: java.lang.String expandPath(java.lang.String)>/java.io.File.<init>/1	<java.util.concurrent.LinkedBlockingDeque: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<com.fasterxml.jackson.dataformat.xml.XmlFactory: void readObject(java.io.ObjectInputStream)>	<java.io.FileOutputStream: void <init>(java.io.File)>	<<immutable-context>>	<com.fasterxml.jackson.dataformat.xml.XmlFactory: com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator createGenerator(java.io.File,com.fasterxml.jackson.core.JsonEncoding)>/java.io.FileOutputStream.<init>/0	<com.fasterxml.jackson.dataformat.xml.XmlFactory: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>	<java.io.FileOutputStream: void <init>(java.io.File)>	<<immutable-context>>	<com.fasterxml.jackson.dataformat.xml.XmlFactory: com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator createGenerator(java.io.File,com.fasterxml.jackson.core.JsonEncoding)>/java.io.FileOutputStream.<init>/0	<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.FileOutputStream: void <init>(java.io.File)>	<<immutable-context>>	<com.fasterxml.jackson.dataformat.xml.XmlFactory: com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator createGenerator(java.io.File,com.fasterxml.jackson.core.JsonEncoding)>/java.io.FileOutputStream.<init>/0	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.CopyOnWriteArrayList: void readObject(java.io.ObjectInputStream)>	<java.io.FileOutputStream: void <init>(java.io.File)>	<<immutable-context>>	<com.fasterxml.jackson.dataformat.xml.XmlFactory: com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator createGenerator(java.io.File,com.fasterxml.jackson.core.JsonEncoding)>/java.io.FileOutputStream.<init>/0	<java.util.concurrent.CopyOnWriteArrayList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.HashMap: void readObject(java.io.ObjectInputStream)>	<java.io.FileOutputStream: void <init>(java.io.File)>	<<immutable-context>>	<com.fasterxml.jackson.dataformat.xml.XmlFactory: com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator createGenerator(java.io.File,com.fasterxml.jackson.core.JsonEncoding)>/java.io.FileOutputStream.<init>/0	<java.util.HashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentLinkedQueue: void readObject(java.io.ObjectInputStream)>	<java.io.FileOutputStream: void <init>(java.io.File)>	<<immutable-context>>	<com.fasterxml.jackson.dataformat.xml.XmlFactory: com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator createGenerator(java.io.File,com.fasterxml.jackson.core.JsonEncoding)>/java.io.FileOutputStream.<init>/0	<java.util.concurrent.ConcurrentLinkedQueue: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<org.dom4j.bean.BeanMetaData: java.lang.Object getData(int,java.lang.Object)>/java.lang.reflect.Method.invoke/0	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<org.dom4j.bean.BeanMetaData: void setData(int,java.lang.Object,java.lang.Object)>/java.lang.reflect.Method.invoke/0	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>	<<immutable-context>>	<org.dom4j.util.SimpleSingleton: void reset()>/java.lang.ClassLoader.loadClass/0	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<org.dom4j.QName: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<org.dom4j.bean.BeanMetaData: java.lang.Object getData(int,java.lang.Object)>/java.lang.reflect.Method.invoke/0	<org.dom4j.QName: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<org.dom4j.QName: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<org.dom4j.bean.BeanMetaData: void setData(int,java.lang.Object,java.lang.Object)>/java.lang.reflect.Method.invoke/0	<org.dom4j.QName: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<org.dom4j.QName: void readObject(java.io.ObjectInputStream)>	<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>	<<immutable-context>>	<org.dom4j.util.SimpleSingleton: void reset()>/java.lang.ClassLoader.loadClass/0	<org.dom4j.QName: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<org.dom4j.bean.BeanMetaData: java.lang.Object getData(int,java.lang.Object)>/java.lang.reflect.Method.invoke/0	<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<org.dom4j.bean.BeanMetaData: void setData(int,java.lang.Object,java.lang.Object)>/java.lang.reflect.Method.invoke/0	<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>	<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>	<<immutable-context>>	<org.dom4j.util.SimpleSingleton: void reset()>/java.lang.ClassLoader.loadClass/0	<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.CopyOnWriteArrayList: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<org.dom4j.bean.BeanMetaData: java.lang.Object getData(int,java.lang.Object)>/java.lang.reflect.Method.invoke/0	<java.util.concurrent.CopyOnWriteArrayList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.CopyOnWriteArrayList: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<org.dom4j.bean.BeanMetaData: void setData(int,java.lang.Object,java.lang.Object)>/java.lang.reflect.Method.invoke/0	<java.util.concurrent.CopyOnWriteArrayList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.CopyOnWriteArrayList: void readObject(java.io.ObjectInputStream)>	<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>	<<immutable-context>>	<org.dom4j.util.SimpleSingleton: void reset()>/java.lang.ClassLoader.loadClass/0	<java.util.concurrent.CopyOnWriteArrayList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.IdentityHashMap: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<org.dom4j.bean.BeanMetaData: java.lang.Object getData(int,java.lang.Object)>/java.lang.reflect.Method.invoke/0	<java.util.IdentityHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.IdentityHashMap: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<org.dom4j.bean.BeanMetaData: void setData(int,java.lang.Object,java.lang.Object)>/java.lang.reflect.Method.invoke/0	<java.util.IdentityHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.IdentityHashMap: void readObject(java.io.ObjectInputStream)>	<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>	<<immutable-context>>	<org.dom4j.util.SimpleSingleton: void reset()>/java.lang.ClassLoader.loadClass/0	<java.util.IdentityHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<org.dom4j.bean.BeanMetaData: java.lang.Object getData(int,java.lang.Object)>/java.lang.reflect.Method.invoke/0	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<org.dom4j.bean.BeanMetaData: void setData(int,java.lang.Object,java.lang.Object)>/java.lang.reflect.Method.invoke/0	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>	<<immutable-context>>	<org.dom4j.util.SimpleSingleton: void reset()>/java.lang.ClassLoader.loadClass/0	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<org.dom4j.bean.BeanMetaData: java.lang.Object getData(int,java.lang.Object)>/java.lang.reflect.Method.invoke/0	<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<org.dom4j.bean.BeanMetaData: void setData(int,java.lang.Object,java.lang.Object)>/java.lang.reflect.Method.invoke/0	<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>	<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>	<<immutable-context>>	<org.dom4j.util.SimpleSingleton: void reset()>/java.lang.ClassLoader.loadClass/0	<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.IdentityHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void println(java.lang.String)>	<<immutable-context>>	<com.ctc.wstx.shaded.msv.org_isorelax.verifier.VerifierConfigurationException: void printStackTrace(java.io.PrintWriter)>/java.io.PrintWriter.println/1	<java.util.IdentityHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.IdentityHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void println(java.lang.String)>	<<immutable-context>>	<com.ctc.wstx.shaded.msv.org_jp_gr_xml.dom.DOMVisitorException: void printStackTrace(java.io.PrintWriter)>/java.io.PrintWriter.println/1	<java.util.IdentityHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.IdentityHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void println(java.lang.String)>	<<immutable-context>>	<com.ctc.wstx.shaded.msv.org_isorelax.verifier.VerifierException: void printStackTrace(java.io.PrintWriter)>/java.io.PrintWriter.println/1	<java.util.IdentityHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<org.osgi.framework.BundlePermission: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void println(java.lang.String)>	<<immutable-context>>	<com.ctc.wstx.shaded.msv.org_isorelax.verifier.VerifierConfigurationException: void printStackTrace(java.io.PrintWriter)>/java.io.PrintWriter.println/1	<org.osgi.framework.BundlePermission: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<org.osgi.framework.BundlePermission: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void println(java.lang.String)>	<<immutable-context>>	<com.ctc.wstx.shaded.msv.org_jp_gr_xml.dom.DOMVisitorException: void printStackTrace(java.io.PrintWriter)>/java.io.PrintWriter.println/1	<org.osgi.framework.BundlePermission: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<org.osgi.framework.BundlePermission: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void println(java.lang.String)>	<<immutable-context>>	<com.ctc.wstx.shaded.msv.org_isorelax.verifier.VerifierException: void printStackTrace(java.io.PrintWriter)>/java.io.PrintWriter.println/1	<org.osgi.framework.BundlePermission: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.LinkedBlockingQueue: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<com.alibaba.nacos.shaded.io.grpc.netty.shaded.io.netty.util.internal.PlatformDependent0: void <clinit>()>/java.lang.reflect.Method.invoke/0	<java.util.concurrent.LinkedBlockingQueue: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.LinkedBlockingQueue: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<com.alibaba.nacos.shaded.io.grpc.netty.shaded.io.netty.util.internal.CleanerJava9$1: java.lang.Object run()>/java.lang.reflect.Method.invoke/0	<java.util.concurrent.LinkedBlockingQueue: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.LinkedBlockingQueue: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>	<<immutable-context>>	<com.alibaba.nacos.shaded.io.grpc.netty.shaded.io.netty.util.internal.PlatformDependent0: void <clinit>()>/java.lang.reflect.Constructor.newInstance/0	<java.util.concurrent.LinkedBlockingQueue: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.LinkedBlockingQueue: void readObject(java.io.ObjectInputStream)>	<java.io.FileReader: void <init>(java.io.File)>	<<immutable-context>>	<com.alibaba.nacos.shaded.io.grpc.netty.shaded.io.netty.util.NetUtil$SoMaxConnAction: java.lang.Integer run()>/java.io.FileReader.<init>/0	<java.util.concurrent.LinkedBlockingQueue: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.LinkedBlockingQueue: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.lang.String)>	<<immutable-context>>	<com.alibaba.nacos.shaded.io.grpc.netty.shaded.io.netty.util.internal.PlatformDependent: void addFilesystemOsClassifiers(java.util.Set,java.util.Set)>/java.io.File.<init>/0	<java.util.concurrent.LinkedBlockingQueue: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.LinkedBlockingQueue: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.lang.String)>	<<immutable-context>>	<com.alibaba.nacos.shaded.io.grpc.netty.shaded.io.netty.util.internal.PlatformDependent: java.io.File toDirectory(java.lang.String)>/java.io.File.<init>/0	<java.util.concurrent.LinkedBlockingQueue: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.LinkedBlockingQueue: void readObject(java.io.ObjectInputStream)>	<java.io.FileInputStream: void <init>(java.io.File)>	<<immutable-context>>	<com.alibaba.nacos.shaded.io.grpc.netty.shaded.io.netty.util.internal.PlatformDependent$4: java.lang.Boolean run()>/java.io.FileInputStream.<init>/0	<java.util.concurrent.LinkedBlockingQueue: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<com.alibaba.nacos.shaded.io.grpc.netty.shaded.io.netty.util.internal.PlatformDependent0: void <clinit>()>/java.lang.reflect.Method.invoke/0	<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<com.alibaba.nacos.shaded.io.grpc.netty.shaded.io.netty.util.internal.CleanerJava9$1: java.lang.Object run()>/java.lang.reflect.Method.invoke/0	<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>	<<immutable-context>>	<com.alibaba.nacos.shaded.io.grpc.netty.shaded.io.netty.util.internal.PlatformDependent0: void <clinit>()>/java.lang.reflect.Constructor.newInstance/0	<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>	<java.io.FileReader: void <init>(java.io.File)>	<<immutable-context>>	<com.alibaba.nacos.shaded.io.grpc.netty.shaded.io.netty.util.NetUtil$SoMaxConnAction: java.lang.Integer run()>/java.io.FileReader.<init>/0	<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.lang.String)>	<<immutable-context>>	<com.alibaba.nacos.shaded.io.grpc.netty.shaded.io.netty.util.internal.PlatformDependent: void addFilesystemOsClassifiers(java.util.Set,java.util.Set)>/java.io.File.<init>/0	<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.lang.String)>	<<immutable-context>>	<com.alibaba.nacos.shaded.io.grpc.netty.shaded.io.netty.util.internal.PlatformDependent: java.io.File toDirectory(java.lang.String)>/java.io.File.<init>/0	<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>	<java.io.FileInputStream: void <init>(java.io.File)>	<<immutable-context>>	<com.alibaba.nacos.shaded.io.grpc.netty.shaded.io.netty.util.internal.PlatformDependent$4: java.lang.Boolean run()>/java.io.FileInputStream.<init>/0	<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.PriorityQueue: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<com.alibaba.nacos.shaded.io.grpc.netty.shaded.io.netty.util.internal.PlatformDependent0: void <clinit>()>/java.lang.reflect.Method.invoke/0	<java.util.PriorityQueue: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.PriorityQueue: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<com.alibaba.nacos.shaded.io.grpc.netty.shaded.io.netty.util.internal.CleanerJava9$1: java.lang.Object run()>/java.lang.reflect.Method.invoke/0	<java.util.PriorityQueue: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.PriorityQueue: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>	<<immutable-context>>	<com.alibaba.nacos.shaded.io.grpc.netty.shaded.io.netty.util.internal.PlatformDependent0: void <clinit>()>/java.lang.reflect.Constructor.newInstance/0	<java.util.PriorityQueue: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.PriorityQueue: void readObject(java.io.ObjectInputStream)>	<java.io.FileReader: void <init>(java.io.File)>	<<immutable-context>>	<com.alibaba.nacos.shaded.io.grpc.netty.shaded.io.netty.util.NetUtil$SoMaxConnAction: java.lang.Integer run()>/java.io.FileReader.<init>/0	<java.util.PriorityQueue: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.PriorityQueue: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.lang.String)>	<<immutable-context>>	<com.alibaba.nacos.shaded.io.grpc.netty.shaded.io.netty.util.internal.PlatformDependent: void addFilesystemOsClassifiers(java.util.Set,java.util.Set)>/java.io.File.<init>/0	<java.util.PriorityQueue: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.PriorityQueue: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.lang.String)>	<<immutable-context>>	<com.alibaba.nacos.shaded.io.grpc.netty.shaded.io.netty.util.internal.PlatformDependent: java.io.File toDirectory(java.lang.String)>/java.io.File.<init>/0	<java.util.PriorityQueue: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.PriorityQueue: void readObject(java.io.ObjectInputStream)>	<java.io.FileInputStream: void <init>(java.io.File)>	<<immutable-context>>	<com.alibaba.nacos.shaded.io.grpc.netty.shaded.io.netty.util.internal.PlatformDependent$4: java.lang.Boolean run()>/java.io.FileInputStream.<init>/0	<java.util.PriorityQueue: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<com.alibaba.nacos.shaded.com.google.common.collect.MapMakerInternalMap: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<com.alibaba.nacos.shaded.io.grpc.netty.shaded.io.netty.util.internal.PlatformDependent0: void <clinit>()>/java.lang.reflect.Method.invoke/0	<com.alibaba.nacos.shaded.com.google.common.collect.MapMakerInternalMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<com.alibaba.nacos.shaded.com.google.common.collect.MapMakerInternalMap: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<com.alibaba.nacos.shaded.io.grpc.netty.shaded.io.netty.util.internal.CleanerJava9$1: java.lang.Object run()>/java.lang.reflect.Method.invoke/0	<com.alibaba.nacos.shaded.com.google.common.collect.MapMakerInternalMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<com.alibaba.nacos.shaded.com.google.common.collect.MapMakerInternalMap: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>	<<immutable-context>>	<com.alibaba.nacos.shaded.io.grpc.netty.shaded.io.netty.util.internal.PlatformDependent0: void <clinit>()>/java.lang.reflect.Constructor.newInstance/0	<com.alibaba.nacos.shaded.com.google.common.collect.MapMakerInternalMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<com.alibaba.nacos.shaded.com.google.common.collect.MapMakerInternalMap: void readObject(java.io.ObjectInputStream)>	<java.io.FileReader: void <init>(java.io.File)>	<<immutable-context>>	<com.alibaba.nacos.shaded.io.grpc.netty.shaded.io.netty.util.NetUtil$SoMaxConnAction: java.lang.Integer run()>/java.io.FileReader.<init>/0	<com.alibaba.nacos.shaded.com.google.common.collect.MapMakerInternalMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<com.alibaba.nacos.shaded.com.google.common.collect.MapMakerInternalMap: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.lang.String)>	<<immutable-context>>	<com.alibaba.nacos.shaded.io.grpc.netty.shaded.io.netty.util.internal.PlatformDependent: void addFilesystemOsClassifiers(java.util.Set,java.util.Set)>/java.io.File.<init>/0	<com.alibaba.nacos.shaded.com.google.common.collect.MapMakerInternalMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<com.alibaba.nacos.shaded.com.google.common.collect.MapMakerInternalMap: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.lang.String)>	<<immutable-context>>	<com.alibaba.nacos.shaded.io.grpc.netty.shaded.io.netty.util.internal.PlatformDependent: java.io.File toDirectory(java.lang.String)>/java.io.File.<init>/0	<com.alibaba.nacos.shaded.com.google.common.collect.MapMakerInternalMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<com.alibaba.nacos.shaded.com.google.common.collect.MapMakerInternalMap: void readObject(java.io.ObjectInputStream)>	<java.io.FileInputStream: void <init>(java.io.File)>	<<immutable-context>>	<com.alibaba.nacos.shaded.io.grpc.netty.shaded.io.netty.util.internal.PlatformDependent$4: java.lang.Boolean run()>/java.io.FileInputStream.<init>/0	<com.alibaba.nacos.shaded.com.google.common.collect.MapMakerInternalMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeMap: void readObject(java.io.ObjectInputStream)>	<java.io.FileOutputStream: void <init>(java.io.File)>	<<immutable-context>>	<org.mockito.internal.creation.bytebuddy.InlineDelegateByteBuddyMockMaker: void <clinit>()>/java.io.FileOutputStream.<init>/0	<java.util.TreeMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.HashSet: void readObject(java.io.ObjectInputStream)>	<java.io.FileOutputStream: void <init>(java.io.File)>	<<immutable-context>>	<org.mockito.internal.creation.bytebuddy.InlineDelegateByteBuddyMockMaker: void <clinit>()>/java.io.FileOutputStream.<init>/0	<java.util.HashSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.CopyOnWriteArrayList: void readObject(java.io.ObjectInputStream)>	<java.io.FileOutputStream: void <init>(java.io.File)>	<<immutable-context>>	<org.mockito.internal.creation.bytebuddy.InlineDelegateByteBuddyMockMaker: void <clinit>()>/java.io.FileOutputStream.<init>/0	<java.util.concurrent.CopyOnWriteArrayList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<org.mockito.internal.creation.bytebuddy.MockMethodInterceptor: void readObject(java.io.ObjectInputStream)>	<java.io.FileOutputStream: void <init>(java.io.File)>	<<immutable-context>>	<org.mockito.internal.creation.bytebuddy.InlineDelegateByteBuddyMockMaker: void <clinit>()>/java.io.FileOutputStream.<init>/0	<org.mockito.internal.creation.bytebuddy.MockMethodInterceptor: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>	<java.io.FileOutputStream: void <init>(java.io.File)>	<<immutable-context>>	<org.mockito.internal.creation.bytebuddy.InlineDelegateByteBuddyMockMaker: void <clinit>()>/java.io.FileOutputStream.<init>/0	<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.FileOutputStream: void <init>(java.io.File)>	<<immutable-context>>	<org.mockito.internal.creation.bytebuddy.InlineDelegateByteBuddyMockMaker: void <clinit>()>/java.io.FileOutputStream.<init>/0	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.HashMap: void readObject(java.io.ObjectInputStream)>	<java.io.FileOutputStream: void <init>(java.io.File)>	<<immutable-context>>	<org.mockito.internal.creation.bytebuddy.InlineDelegateByteBuddyMockMaker: void <clinit>()>/java.io.FileOutputStream.<init>/0	<java.util.HashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.HashSet: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.io.File,java.lang.String)>	<<immutable-context>>	<org.apache.commons.io.filefilter.WildcardFilter: boolean accept(java.io.File,java.lang.String)>/java.io.File.<init>/0	<java.util.HashSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.HashSet: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.io.File,java.lang.String)>	<<immutable-context>>	<org.apache.commons.io.filefilter.AbstractFileFilter: boolean accept(java.io.File,java.lang.String)>/java.io.File.<init>/0	<java.util.HashSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeMap: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.io.File,java.lang.String)>	<<immutable-context>>	<org.apache.commons.io.filefilter.WildcardFilter: boolean accept(java.io.File,java.lang.String)>/java.io.File.<init>/0	<java.util.TreeMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeMap: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.io.File,java.lang.String)>	<<immutable-context>>	<org.apache.commons.io.filefilter.AbstractFileFilter: boolean accept(java.io.File,java.lang.String)>/java.io.File.<init>/0	<java.util.TreeMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.HashMap: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.io.File,java.lang.String)>	<<immutable-context>>	<org.apache.commons.io.filefilter.WildcardFilter: boolean accept(java.io.File,java.lang.String)>/java.io.File.<init>/0	<java.util.HashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.HashMap: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.io.File,java.lang.String)>	<<immutable-context>>	<org.apache.commons.io.filefilter.AbstractFileFilter: boolean accept(java.io.File,java.lang.String)>/java.io.File.<init>/0	<java.util.HashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.io.File,java.lang.String)>	<<immutable-context>>	<org.apache.commons.io.filefilter.WildcardFilter: boolean accept(java.io.File,java.lang.String)>/java.io.File.<init>/0	<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.io.File,java.lang.String)>	<<immutable-context>>	<org.apache.commons.io.filefilter.AbstractFileFilter: boolean accept(java.io.File,java.lang.String)>/java.io.File.<init>/0	<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<org.apache.commons.io.monitor.SerializableFileTime: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.io.File,java.lang.String)>	<<immutable-context>>	<org.apache.commons.io.filefilter.WildcardFilter: boolean accept(java.io.File,java.lang.String)>/java.io.File.<init>/0	<org.apache.commons.io.monitor.SerializableFileTime: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<org.apache.commons.io.monitor.SerializableFileTime: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.io.File,java.lang.String)>	<<immutable-context>>	<org.apache.commons.io.filefilter.AbstractFileFilter: boolean accept(java.io.File,java.lang.String)>/java.io.File.<init>/0	<org.apache.commons.io.monitor.SerializableFileTime: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.io.File,java.lang.String)>	<<immutable-context>>	<org.apache.commons.io.filefilter.WildcardFilter: boolean accept(java.io.File,java.lang.String)>/java.io.File.<init>/0	<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.io.File,java.lang.String)>	<<immutable-context>>	<org.apache.commons.io.filefilter.AbstractFileFilter: boolean accept(java.io.File,java.lang.String)>/java.io.File.<init>/0	<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.io.File,java.lang.String)>	<<immutable-context>>	<org.apache.commons.io.filefilter.WildcardFilter: boolean accept(java.io.File,java.lang.String)>/java.io.File.<init>/0	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.io.File,java.lang.String)>	<<immutable-context>>	<org.apache.commons.io.filefilter.AbstractFileFilter: boolean accept(java.io.File,java.lang.String)>/java.io.File.<init>/0	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<org.apache.xerces.dom.AttrImpl: void readObject(java.io.ObjectInputStream)>	<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>	<<immutable-context>>	<org.apache.xerces.dom.ObjectFactory: java.lang.Class findProviderClass(java.lang.String,java.lang.ClassLoader,boolean)>/java.lang.ClassLoader.loadClass/0	<org.apache.xerces.dom.AttrImpl: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<org.apache.xerces.dom.AttrImpl: void readObject(java.io.ObjectInputStream)>	<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>	<<immutable-context>>	<org.apache.xerces.dom.ObjectFactory: java.lang.Class findProviderClass(java.lang.String,java.lang.ClassLoader,boolean)>/java.lang.ClassLoader.loadClass/1	<org.apache.xerces.dom.AttrImpl: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<org.apache.xerces.dom.AttrImpl: void readObject(java.io.ObjectInputStream)>	<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>	<<immutable-context>>	<org.apache.html.dom.ObjectFactory: java.lang.Class findProviderClass(java.lang.String,java.lang.ClassLoader,boolean)>/java.lang.ClassLoader.loadClass/0	<org.apache.xerces.dom.AttrImpl: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<org.apache.xerces.dom.AttrImpl: void readObject(java.io.ObjectInputStream)>	<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>	<<immutable-context>>	<org.apache.html.dom.ObjectFactory: java.lang.Class findProviderClass(java.lang.String,java.lang.ClassLoader,boolean)>/java.lang.ClassLoader.loadClass/1	<org.apache.xerces.dom.AttrImpl: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.LinkedBlockingDeque: void readObject(java.io.ObjectInputStream)>	<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>	<<immutable-context>>	<org.apache.xerces.dom.ObjectFactory: java.lang.Class findProviderClass(java.lang.String,java.lang.ClassLoader,boolean)>/java.lang.ClassLoader.loadClass/0	<java.util.concurrent.LinkedBlockingDeque: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.LinkedBlockingDeque: void readObject(java.io.ObjectInputStream)>	<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>	<<immutable-context>>	<org.apache.xerces.dom.ObjectFactory: java.lang.Class findProviderClass(java.lang.String,java.lang.ClassLoader,boolean)>/java.lang.ClassLoader.loadClass/1	<java.util.concurrent.LinkedBlockingDeque: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.LinkedBlockingDeque: void readObject(java.io.ObjectInputStream)>	<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>	<<immutable-context>>	<org.apache.html.dom.ObjectFactory: java.lang.Class findProviderClass(java.lang.String,java.lang.ClassLoader,boolean)>/java.lang.ClassLoader.loadClass/0	<java.util.concurrent.LinkedBlockingDeque: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.LinkedBlockingDeque: void readObject(java.io.ObjectInputStream)>	<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>	<<immutable-context>>	<org.apache.html.dom.ObjectFactory: java.lang.Class findProviderClass(java.lang.String,java.lang.ClassLoader,boolean)>/java.lang.ClassLoader.loadClass/1	<java.util.concurrent.LinkedBlockingDeque: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<org.apache.xerces.dom.PSVIElementNSImpl: void readObject(java.io.ObjectInputStream)>	<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>	<<immutable-context>>	<org.apache.xerces.dom.ObjectFactory: java.lang.Class findProviderClass(java.lang.String,java.lang.ClassLoader,boolean)>/java.lang.ClassLoader.loadClass/0	<org.apache.xerces.dom.PSVIElementNSImpl: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<org.apache.xerces.dom.PSVIElementNSImpl: void readObject(java.io.ObjectInputStream)>	<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>	<<immutable-context>>	<org.apache.xerces.dom.ObjectFactory: java.lang.Class findProviderClass(java.lang.String,java.lang.ClassLoader,boolean)>/java.lang.ClassLoader.loadClass/1	<org.apache.xerces.dom.PSVIElementNSImpl: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<org.apache.xerces.dom.PSVIElementNSImpl: void readObject(java.io.ObjectInputStream)>	<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>	<<immutable-context>>	<org.apache.html.dom.ObjectFactory: java.lang.Class findProviderClass(java.lang.String,java.lang.ClassLoader,boolean)>/java.lang.ClassLoader.loadClass/0	<org.apache.xerces.dom.PSVIElementNSImpl: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<org.apache.xerces.dom.PSVIElementNSImpl: void readObject(java.io.ObjectInputStream)>	<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>	<<immutable-context>>	<org.apache.html.dom.ObjectFactory: java.lang.Class findProviderClass(java.lang.String,java.lang.ClassLoader,boolean)>/java.lang.ClassLoader.loadClass/1	<org.apache.xerces.dom.PSVIElementNSImpl: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<org.apache.hadoop.fs.RawPathHandle: void readObject(java.io.ObjectInputStream)>	<java.lang.ProcessBuilder: java.lang.Process start()>	<<immutable-context>>	<org.apache.hadoop.util.Shell: void runCommand()>/java.lang.ProcessBuilder.start/0	<org.apache.hadoop.fs.RawPathHandle: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<org.apache.hadoop.fs.RawPathHandle: void readObject(java.io.ObjectInputStream)>	<java.lang.ProcessBuilder: java.lang.Process start()>	<<immutable-context>>	<org.apache.hadoop.util.Shell: void runCommand()>/java.lang.ProcessBuilder.start/1	<org.apache.hadoop.fs.RawPathHandle: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<org.apache.hadoop.fs.RawPathHandle: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.lang.String)>	<<immutable-context>>	<org.apache.hadoop.util.Shell: java.io.File checkHadoopHomeInner(java.lang.String)>/java.io.File.<init>/0	<org.apache.hadoop.fs.RawPathHandle: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<org.apache.hadoop.fs.RawPathHandle: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.io.File,java.lang.String)>	<<immutable-context>>	<org.apache.hadoop.util.Shell: java.io.File getQualifiedBinInner(java.io.File,java.lang.String)>/java.io.File.<init>/0	<org.apache.hadoop.fs.RawPathHandle: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<org.apache.hadoop.fs.RawPathHandle: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.io.File,java.lang.String)>	<<immutable-context>>	<org.apache.hadoop.util.Shell: java.io.File getQualifiedBinInner(java.io.File,java.lang.String)>/java.io.File.<init>/1	<org.apache.hadoop.fs.RawPathHandle: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<org.apache.commons.collections.map.UnmodifiableMap: void readObject(java.io.ObjectInputStream)>	<java.lang.ProcessBuilder: java.lang.Process start()>	<<immutable-context>>	<org.apache.hadoop.util.Shell: void runCommand()>/java.lang.ProcessBuilder.start/0	<org.apache.commons.collections.map.UnmodifiableMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<org.apache.commons.collections.map.UnmodifiableMap: void readObject(java.io.ObjectInputStream)>	<java.lang.ProcessBuilder: java.lang.Process start()>	<<immutable-context>>	<org.apache.hadoop.util.Shell: void runCommand()>/java.lang.ProcessBuilder.start/1	<org.apache.commons.collections.map.UnmodifiableMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<org.apache.commons.collections.map.UnmodifiableMap: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.lang.String)>	<<immutable-context>>	<org.apache.hadoop.util.Shell: java.io.File checkHadoopHomeInner(java.lang.String)>/java.io.File.<init>/0	<org.apache.commons.collections.map.UnmodifiableMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<org.apache.commons.collections.map.UnmodifiableMap: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.io.File,java.lang.String)>	<<immutable-context>>	<org.apache.hadoop.util.Shell: java.io.File getQualifiedBinInner(java.io.File,java.lang.String)>/java.io.File.<init>/0	<org.apache.commons.collections.map.UnmodifiableMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<org.apache.commons.collections.map.UnmodifiableMap: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.io.File,java.lang.String)>	<<immutable-context>>	<org.apache.hadoop.util.Shell: java.io.File getQualifiedBinInner(java.io.File,java.lang.String)>/java.io.File.<init>/1	<org.apache.commons.collections.map.UnmodifiableMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.CopyOnWriteArrayList: void readObject(java.io.ObjectInputStream)>	<java.lang.ProcessBuilder: java.lang.Process start()>	<<immutable-context>>	<org.apache.hadoop.util.Shell: void runCommand()>/java.lang.ProcessBuilder.start/0	<java.util.concurrent.CopyOnWriteArrayList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.CopyOnWriteArrayList: void readObject(java.io.ObjectInputStream)>	<java.lang.ProcessBuilder: java.lang.Process start()>	<<immutable-context>>	<org.apache.hadoop.util.Shell: void runCommand()>/java.lang.ProcessBuilder.start/1	<java.util.concurrent.CopyOnWriteArrayList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.CopyOnWriteArrayList: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.lang.String)>	<<immutable-context>>	<org.apache.hadoop.util.Shell: java.io.File checkHadoopHomeInner(java.lang.String)>/java.io.File.<init>/0	<java.util.concurrent.CopyOnWriteArrayList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.CopyOnWriteArrayList: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.io.File,java.lang.String)>	<<immutable-context>>	<org.apache.hadoop.util.Shell: java.io.File getQualifiedBinInner(java.io.File,java.lang.String)>/java.io.File.<init>/0	<java.util.concurrent.CopyOnWriteArrayList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.CopyOnWriteArrayList: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.io.File,java.lang.String)>	<<immutable-context>>	<org.apache.hadoop.util.Shell: java.io.File getQualifiedBinInner(java.io.File,java.lang.String)>/java.io.File.<init>/1	<java.util.concurrent.CopyOnWriteArrayList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.SynchronousQueue: void readObject(java.io.ObjectInputStream)>	<java.lang.ProcessBuilder: java.lang.Process start()>	<<immutable-context>>	<org.apache.hadoop.util.Shell: void runCommand()>/java.lang.ProcessBuilder.start/0	<java.util.concurrent.SynchronousQueue: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.SynchronousQueue: void readObject(java.io.ObjectInputStream)>	<java.lang.ProcessBuilder: java.lang.Process start()>	<<immutable-context>>	<org.apache.hadoop.util.Shell: void runCommand()>/java.lang.ProcessBuilder.start/1	<java.util.concurrent.SynchronousQueue: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.SynchronousQueue: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.lang.String)>	<<immutable-context>>	<org.apache.hadoop.util.Shell: java.io.File checkHadoopHomeInner(java.lang.String)>/java.io.File.<init>/0	<java.util.concurrent.SynchronousQueue: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.SynchronousQueue: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.io.File,java.lang.String)>	<<immutable-context>>	<org.apache.hadoop.util.Shell: java.io.File getQualifiedBinInner(java.io.File,java.lang.String)>/java.io.File.<init>/0	<java.util.concurrent.SynchronousQueue: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.SynchronousQueue: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.io.File,java.lang.String)>	<<immutable-context>>	<org.apache.hadoop.util.Shell: java.io.File getQualifiedBinInner(java.io.File,java.lang.String)>/java.io.File.<init>/1	<java.util.concurrent.SynchronousQueue: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeMap: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<com.alibaba.nacos.shaded.io.grpc.netty.shaded.io.netty.util.internal.PlatformDependent0: void <clinit>()>/java.lang.reflect.Method.invoke/0	<java.util.TreeMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeMap: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<com.alibaba.nacos.shaded.io.grpc.netty.shaded.io.netty.util.internal.CleanerJava9$1: java.lang.Object run()>/java.lang.reflect.Method.invoke/0	<java.util.TreeMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeMap: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>	<<immutable-context>>	<com.alibaba.nacos.shaded.io.grpc.netty.shaded.io.netty.util.internal.PlatformDependent0: void <clinit>()>/java.lang.reflect.Constructor.newInstance/0	<java.util.TreeMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeMap: void readObject(java.io.ObjectInputStream)>	<java.io.FileReader: void <init>(java.io.File)>	<<immutable-context>>	<com.alibaba.nacos.shaded.io.grpc.netty.shaded.io.netty.util.NetUtil$SoMaxConnAction: java.lang.Integer run()>/java.io.FileReader.<init>/0	<java.util.TreeMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeMap: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.lang.String)>	<<immutable-context>>	<com.alibaba.nacos.shaded.io.grpc.netty.shaded.io.netty.util.internal.PlatformDependent: void addFilesystemOsClassifiers(java.util.Set,java.util.Set)>/java.io.File.<init>/0	<java.util.TreeMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeMap: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.lang.String)>	<<immutable-context>>	<com.alibaba.nacos.shaded.io.grpc.netty.shaded.io.netty.util.internal.PlatformDependent: java.io.File toDirectory(java.lang.String)>/java.io.File.<init>/0	<java.util.TreeMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeMap: void readObject(java.io.ObjectInputStream)>	<java.io.FileInputStream: void <init>(java.io.File)>	<<immutable-context>>	<com.alibaba.nacos.shaded.io.grpc.netty.shaded.io.netty.util.internal.PlatformDependent$4: java.lang.Boolean run()>/java.io.FileInputStream.<init>/0	<java.util.TreeMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.LinkedBlockingDeque: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<com.alibaba.nacos.shaded.io.grpc.netty.shaded.io.netty.util.internal.PlatformDependent0: void <clinit>()>/java.lang.reflect.Method.invoke/0	<java.util.concurrent.LinkedBlockingDeque: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.LinkedBlockingDeque: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<com.alibaba.nacos.shaded.io.grpc.netty.shaded.io.netty.util.internal.CleanerJava9$1: java.lang.Object run()>/java.lang.reflect.Method.invoke/0	<java.util.concurrent.LinkedBlockingDeque: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.LinkedBlockingDeque: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>	<<immutable-context>>	<com.alibaba.nacos.shaded.io.grpc.netty.shaded.io.netty.util.internal.PlatformDependent0: void <clinit>()>/java.lang.reflect.Constructor.newInstance/0	<java.util.concurrent.LinkedBlockingDeque: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.LinkedBlockingDeque: void readObject(java.io.ObjectInputStream)>	<java.io.FileReader: void <init>(java.io.File)>	<<immutable-context>>	<com.alibaba.nacos.shaded.io.grpc.netty.shaded.io.netty.util.NetUtil$SoMaxConnAction: java.lang.Integer run()>/java.io.FileReader.<init>/0	<java.util.concurrent.LinkedBlockingDeque: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.LinkedBlockingDeque: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.lang.String)>	<<immutable-context>>	<com.alibaba.nacos.shaded.io.grpc.netty.shaded.io.netty.util.internal.PlatformDependent: void addFilesystemOsClassifiers(java.util.Set,java.util.Set)>/java.io.File.<init>/0	<java.util.concurrent.LinkedBlockingDeque: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.LinkedBlockingDeque: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.lang.String)>	<<immutable-context>>	<com.alibaba.nacos.shaded.io.grpc.netty.shaded.io.netty.util.internal.PlatformDependent: java.io.File toDirectory(java.lang.String)>/java.io.File.<init>/0	<java.util.concurrent.LinkedBlockingDeque: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.LinkedBlockingDeque: void readObject(java.io.ObjectInputStream)>	<java.io.FileInputStream: void <init>(java.io.File)>	<<immutable-context>>	<com.alibaba.nacos.shaded.io.grpc.netty.shaded.io.netty.util.internal.PlatformDependent$4: java.lang.Boolean run()>/java.io.FileInputStream.<init>/0	<java.util.concurrent.LinkedBlockingDeque: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<com.alibaba.nacos.shaded.com.google.common.collect.CompactHashMap: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<com.alibaba.nacos.shaded.io.grpc.netty.shaded.io.netty.util.internal.PlatformDependent0: void <clinit>()>/java.lang.reflect.Method.invoke/0	<com.alibaba.nacos.shaded.com.google.common.collect.CompactHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<com.alibaba.nacos.shaded.com.google.common.collect.CompactHashMap: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<com.alibaba.nacos.shaded.io.grpc.netty.shaded.io.netty.util.internal.CleanerJava9$1: java.lang.Object run()>/java.lang.reflect.Method.invoke/0	<com.alibaba.nacos.shaded.com.google.common.collect.CompactHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<com.alibaba.nacos.shaded.com.google.common.collect.CompactHashMap: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>	<<immutable-context>>	<com.alibaba.nacos.shaded.io.grpc.netty.shaded.io.netty.util.internal.PlatformDependent0: void <clinit>()>/java.lang.reflect.Constructor.newInstance/0	<com.alibaba.nacos.shaded.com.google.common.collect.CompactHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<com.alibaba.nacos.shaded.com.google.common.collect.CompactHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.FileReader: void <init>(java.io.File)>	<<immutable-context>>	<com.alibaba.nacos.shaded.io.grpc.netty.shaded.io.netty.util.NetUtil$SoMaxConnAction: java.lang.Integer run()>/java.io.FileReader.<init>/0	<com.alibaba.nacos.shaded.com.google.common.collect.CompactHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<com.alibaba.nacos.shaded.com.google.common.collect.CompactHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.lang.String)>	<<immutable-context>>	<com.alibaba.nacos.shaded.io.grpc.netty.shaded.io.netty.util.internal.PlatformDependent: void addFilesystemOsClassifiers(java.util.Set,java.util.Set)>/java.io.File.<init>/0	<com.alibaba.nacos.shaded.com.google.common.collect.CompactHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<com.alibaba.nacos.shaded.com.google.common.collect.CompactHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.lang.String)>	<<immutable-context>>	<com.alibaba.nacos.shaded.io.grpc.netty.shaded.io.netty.util.internal.PlatformDependent: java.io.File toDirectory(java.lang.String)>/java.io.File.<init>/0	<com.alibaba.nacos.shaded.com.google.common.collect.CompactHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<com.alibaba.nacos.shaded.com.google.common.collect.CompactHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.FileInputStream: void <init>(java.io.File)>	<<immutable-context>>	<com.alibaba.nacos.shaded.io.grpc.netty.shaded.io.netty.util.internal.PlatformDependent$4: java.lang.Boolean run()>/java.io.FileInputStream.<init>/0	<com.alibaba.nacos.shaded.com.google.common.collect.CompactHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<com.alibaba.nacos.shaded.com.google.common.collect.ImmutableEnumMap: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<com.alibaba.nacos.shaded.io.grpc.netty.shaded.io.netty.util.internal.PlatformDependent0: void <clinit>()>/java.lang.reflect.Method.invoke/0	<com.alibaba.nacos.shaded.com.google.common.collect.ImmutableEnumMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<com.alibaba.nacos.shaded.com.google.common.collect.ImmutableEnumMap: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<com.alibaba.nacos.shaded.io.grpc.netty.shaded.io.netty.util.internal.CleanerJava9$1: java.lang.Object run()>/java.lang.reflect.Method.invoke/0	<com.alibaba.nacos.shaded.com.google.common.collect.ImmutableEnumMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<com.alibaba.nacos.shaded.com.google.common.collect.ImmutableEnumMap: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>	<<immutable-context>>	<com.alibaba.nacos.shaded.io.grpc.netty.shaded.io.netty.util.internal.PlatformDependent0: void <clinit>()>/java.lang.reflect.Constructor.newInstance/0	<com.alibaba.nacos.shaded.com.google.common.collect.ImmutableEnumMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<com.alibaba.nacos.shaded.com.google.common.collect.ImmutableEnumMap: void readObject(java.io.ObjectInputStream)>	<java.io.FileReader: void <init>(java.io.File)>	<<immutable-context>>	<com.alibaba.nacos.shaded.io.grpc.netty.shaded.io.netty.util.NetUtil$SoMaxConnAction: java.lang.Integer run()>/java.io.FileReader.<init>/0	<com.alibaba.nacos.shaded.com.google.common.collect.ImmutableEnumMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<com.alibaba.nacos.shaded.com.google.common.collect.ImmutableEnumMap: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.lang.String)>	<<immutable-context>>	<com.alibaba.nacos.shaded.io.grpc.netty.shaded.io.netty.util.internal.PlatformDependent: void addFilesystemOsClassifiers(java.util.Set,java.util.Set)>/java.io.File.<init>/0	<com.alibaba.nacos.shaded.com.google.common.collect.ImmutableEnumMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<com.alibaba.nacos.shaded.com.google.common.collect.ImmutableEnumMap: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.lang.String)>	<<immutable-context>>	<com.alibaba.nacos.shaded.io.grpc.netty.shaded.io.netty.util.internal.PlatformDependent: java.io.File toDirectory(java.lang.String)>/java.io.File.<init>/0	<com.alibaba.nacos.shaded.com.google.common.collect.ImmutableEnumMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<com.alibaba.nacos.shaded.com.google.common.collect.ImmutableEnumMap: void readObject(java.io.ObjectInputStream)>	<java.io.FileInputStream: void <init>(java.io.File)>	<<immutable-context>>	<com.alibaba.nacos.shaded.io.grpc.netty.shaded.io.netty.util.internal.PlatformDependent$4: java.lang.Boolean run()>/java.io.FileInputStream.<init>/0	<com.alibaba.nacos.shaded.com.google.common.collect.ImmutableEnumMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<com.alibaba.nacos.shaded.io.grpc.netty.shaded.io.netty.util.internal.PlatformDependent0: void <clinit>()>/java.lang.reflect.Method.invoke/0	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<com.alibaba.nacos.shaded.io.grpc.netty.shaded.io.netty.util.internal.CleanerJava9$1: java.lang.Object run()>/java.lang.reflect.Method.invoke/0	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>	<<immutable-context>>	<com.alibaba.nacos.shaded.io.grpc.netty.shaded.io.netty.util.internal.PlatformDependent0: void <clinit>()>/java.lang.reflect.Constructor.newInstance/0	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.FileReader: void <init>(java.io.File)>	<<immutable-context>>	<com.alibaba.nacos.shaded.io.grpc.netty.shaded.io.netty.util.NetUtil$SoMaxConnAction: java.lang.Integer run()>/java.io.FileReader.<init>/0	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.lang.String)>	<<immutable-context>>	<com.alibaba.nacos.shaded.io.grpc.netty.shaded.io.netty.util.internal.PlatformDependent: void addFilesystemOsClassifiers(java.util.Set,java.util.Set)>/java.io.File.<init>/0	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.lang.String)>	<<immutable-context>>	<com.alibaba.nacos.shaded.io.grpc.netty.shaded.io.netty.util.internal.PlatformDependent: java.io.File toDirectory(java.lang.String)>/java.io.File.<init>/0	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.FileInputStream: void <init>(java.io.File)>	<<immutable-context>>	<com.alibaba.nacos.shaded.io.grpc.netty.shaded.io.netty.util.internal.PlatformDependent$4: java.lang.Boolean run()>/java.io.FileInputStream.<init>/0	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<com.alibaba.nacos.shaded.com.google.protobuf.RopeByteString: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<com.alibaba.nacos.shaded.io.grpc.netty.shaded.io.netty.util.internal.PlatformDependent0: void <clinit>()>/java.lang.reflect.Method.invoke/0	<com.alibaba.nacos.shaded.com.google.protobuf.RopeByteString: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<com.alibaba.nacos.shaded.com.google.protobuf.RopeByteString: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<com.alibaba.nacos.shaded.io.grpc.netty.shaded.io.netty.util.internal.CleanerJava9$1: java.lang.Object run()>/java.lang.reflect.Method.invoke/0	<com.alibaba.nacos.shaded.com.google.protobuf.RopeByteString: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<com.alibaba.nacos.shaded.com.google.protobuf.RopeByteString: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>	<<immutable-context>>	<com.alibaba.nacos.shaded.io.grpc.netty.shaded.io.netty.util.internal.PlatformDependent0: void <clinit>()>/java.lang.reflect.Constructor.newInstance/0	<com.alibaba.nacos.shaded.com.google.protobuf.RopeByteString: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<com.alibaba.nacos.shaded.com.google.protobuf.RopeByteString: void readObject(java.io.ObjectInputStream)>	<java.io.FileReader: void <init>(java.io.File)>	<<immutable-context>>	<com.alibaba.nacos.shaded.io.grpc.netty.shaded.io.netty.util.NetUtil$SoMaxConnAction: java.lang.Integer run()>/java.io.FileReader.<init>/0	<com.alibaba.nacos.shaded.com.google.protobuf.RopeByteString: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<com.alibaba.nacos.shaded.com.google.protobuf.RopeByteString: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.lang.String)>	<<immutable-context>>	<com.alibaba.nacos.shaded.io.grpc.netty.shaded.io.netty.util.internal.PlatformDependent: void addFilesystemOsClassifiers(java.util.Set,java.util.Set)>/java.io.File.<init>/0	<com.alibaba.nacos.shaded.com.google.protobuf.RopeByteString: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<com.alibaba.nacos.shaded.com.google.protobuf.RopeByteString: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.lang.String)>	<<immutable-context>>	<com.alibaba.nacos.shaded.io.grpc.netty.shaded.io.netty.util.internal.PlatformDependent: java.io.File toDirectory(java.lang.String)>/java.io.File.<init>/0	<com.alibaba.nacos.shaded.com.google.protobuf.RopeByteString: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<com.alibaba.nacos.shaded.com.google.protobuf.RopeByteString: void readObject(java.io.ObjectInputStream)>	<java.io.FileInputStream: void <init>(java.io.File)>	<<immutable-context>>	<com.alibaba.nacos.shaded.io.grpc.netty.shaded.io.netty.util.internal.PlatformDependent$4: java.lang.Boolean run()>/java.io.FileInputStream.<init>/0	<com.alibaba.nacos.shaded.com.google.protobuf.RopeByteString: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.IdentityHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.lang.String)>	<<immutable-context>>	<org.parosproxy.paros.Constant: void initializeFilesAndDirectories(org.zaproxy.zap.control.ControlOverrides)>/java.io.File.<init>/7	<java.util.IdentityHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.IdentityHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.lang.String)>	<<immutable-context>>	<org.parosproxy.paros.Constant: void upgradeFrom2_0_0(org.apache.commons.configuration.XMLConfiguration)>/java.io.File.<init>/0	<java.util.IdentityHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.IdentityHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.lang.String)>	<<immutable-context>>	<org.parosproxy.paros.Constant: void upgradeFrom2_0_0(org.apache.commons.configuration.XMLConfiguration)>/java.io.File.<init>/1	<java.util.IdentityHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.IdentityHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.FileInputStream: void <init>(java.io.File)>	<<immutable-context>>	<org.parosproxy.paros.model.FileCopier: void copyLegacy(java.io.File,java.io.File)>/java.io.FileInputStream.<init>/0	<java.util.IdentityHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.IdentityHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.FileInputStream: void <init>(java.io.File)>	<<immutable-context>>	<org.parosproxy.paros.model.FileCopier: void copyNIO(java.io.File,java.io.File)>/java.io.FileInputStream.<init>/0	<java.util.IdentityHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.IdentityHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.FileOutputStream: void <init>(java.io.File)>	<<immutable-context>>	<org.parosproxy.paros.model.FileCopier: void copyLegacy(java.io.File,java.io.File)>/java.io.FileOutputStream.<init>/0	<java.util.IdentityHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.IdentityHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.FileOutputStream: void <init>(java.io.File)>	<<immutable-context>>	<org.parosproxy.paros.model.FileCopier: void copyNIO(java.io.File,java.io.File)>/java.io.FileOutputStream.<init>/0	<java.util.IdentityHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentLinkedDeque: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.lang.String)>	<<immutable-context>>	<org.parosproxy.paros.Constant: void initializeFilesAndDirectories(org.zaproxy.zap.control.ControlOverrides)>/java.io.File.<init>/7	<java.util.concurrent.ConcurrentLinkedDeque: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentLinkedDeque: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.lang.String)>	<<immutable-context>>	<org.parosproxy.paros.Constant: void upgradeFrom2_0_0(org.apache.commons.configuration.XMLConfiguration)>/java.io.File.<init>/0	<java.util.concurrent.ConcurrentLinkedDeque: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentLinkedDeque: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.lang.String)>	<<immutable-context>>	<org.parosproxy.paros.Constant: void upgradeFrom2_0_0(org.apache.commons.configuration.XMLConfiguration)>/java.io.File.<init>/1	<java.util.concurrent.ConcurrentLinkedDeque: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentLinkedDeque: void readObject(java.io.ObjectInputStream)>	<java.io.FileInputStream: void <init>(java.io.File)>	<<immutable-context>>	<org.parosproxy.paros.model.FileCopier: void copyLegacy(java.io.File,java.io.File)>/java.io.FileInputStream.<init>/0	<java.util.concurrent.ConcurrentLinkedDeque: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentLinkedDeque: void readObject(java.io.ObjectInputStream)>	<java.io.FileInputStream: void <init>(java.io.File)>	<<immutable-context>>	<org.parosproxy.paros.model.FileCopier: void copyNIO(java.io.File,java.io.File)>/java.io.FileInputStream.<init>/0	<java.util.concurrent.ConcurrentLinkedDeque: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentLinkedDeque: void readObject(java.io.ObjectInputStream)>	<java.io.FileOutputStream: void <init>(java.io.File)>	<<immutable-context>>	<org.parosproxy.paros.model.FileCopier: void copyLegacy(java.io.File,java.io.File)>/java.io.FileOutputStream.<init>/0	<java.util.concurrent.ConcurrentLinkedDeque: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentLinkedDeque: void readObject(java.io.ObjectInputStream)>	<java.io.FileOutputStream: void <init>(java.io.File)>	<<immutable-context>>	<org.parosproxy.paros.model.FileCopier: void copyNIO(java.io.File,java.io.File)>/java.io.FileOutputStream.<init>/0	<java.util.concurrent.ConcurrentLinkedDeque: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<org.apache.commons.collections.list.AbstractSerializableListDecorator: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.lang.String)>	<<immutable-context>>	<org.parosproxy.paros.Constant: void initializeFilesAndDirectories(org.zaproxy.zap.control.ControlOverrides)>/java.io.File.<init>/7	<org.apache.commons.collections.list.AbstractSerializableListDecorator: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<org.apache.commons.collections.list.AbstractSerializableListDecorator: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.lang.String)>	<<immutable-context>>	<org.parosproxy.paros.Constant: void upgradeFrom2_0_0(org.apache.commons.configuration.XMLConfiguration)>/java.io.File.<init>/0	<org.apache.commons.collections.list.AbstractSerializableListDecorator: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<org.apache.commons.collections.list.AbstractSerializableListDecorator: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.lang.String)>	<<immutable-context>>	<org.parosproxy.paros.Constant: void upgradeFrom2_0_0(org.apache.commons.configuration.XMLConfiguration)>/java.io.File.<init>/1	<org.apache.commons.collections.list.AbstractSerializableListDecorator: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<org.apache.commons.collections.list.AbstractSerializableListDecorator: void readObject(java.io.ObjectInputStream)>	<java.io.FileInputStream: void <init>(java.io.File)>	<<immutable-context>>	<org.parosproxy.paros.model.FileCopier: void copyLegacy(java.io.File,java.io.File)>/java.io.FileInputStream.<init>/0	<org.apache.commons.collections.list.AbstractSerializableListDecorator: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<org.apache.commons.collections.list.AbstractSerializableListDecorator: void readObject(java.io.ObjectInputStream)>	<java.io.FileInputStream: void <init>(java.io.File)>	<<immutable-context>>	<org.parosproxy.paros.model.FileCopier: void copyNIO(java.io.File,java.io.File)>/java.io.FileInputStream.<init>/0	<org.apache.commons.collections.list.AbstractSerializableListDecorator: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<org.apache.commons.collections.list.AbstractSerializableListDecorator: void readObject(java.io.ObjectInputStream)>	<java.io.FileOutputStream: void <init>(java.io.File)>	<<immutable-context>>	<org.parosproxy.paros.model.FileCopier: void copyLegacy(java.io.File,java.io.File)>/java.io.FileOutputStream.<init>/0	<org.apache.commons.collections.list.AbstractSerializableListDecorator: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<org.apache.commons.collections.list.AbstractSerializableListDecorator: void readObject(java.io.ObjectInputStream)>	<java.io.FileOutputStream: void <init>(java.io.File)>	<<immutable-context>>	<org.parosproxy.paros.model.FileCopier: void copyNIO(java.io.File,java.io.File)>/java.io.FileOutputStream.<init>/0	<org.apache.commons.collections.list.AbstractSerializableListDecorator: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.LinkedBlockingQueue: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.lang.String)>	<<immutable-context>>	<org.parosproxy.paros.Constant: void initializeFilesAndDirectories(org.zaproxy.zap.control.ControlOverrides)>/java.io.File.<init>/7	<java.util.concurrent.LinkedBlockingQueue: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.LinkedBlockingQueue: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.lang.String)>	<<immutable-context>>	<org.parosproxy.paros.Constant: void upgradeFrom2_0_0(org.apache.commons.configuration.XMLConfiguration)>/java.io.File.<init>/0	<java.util.concurrent.LinkedBlockingQueue: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.LinkedBlockingQueue: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.lang.String)>	<<immutable-context>>	<org.parosproxy.paros.Constant: void upgradeFrom2_0_0(org.apache.commons.configuration.XMLConfiguration)>/java.io.File.<init>/1	<java.util.concurrent.LinkedBlockingQueue: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.LinkedBlockingQueue: void readObject(java.io.ObjectInputStream)>	<java.io.FileInputStream: void <init>(java.io.File)>	<<immutable-context>>	<org.parosproxy.paros.model.FileCopier: void copyLegacy(java.io.File,java.io.File)>/java.io.FileInputStream.<init>/0	<java.util.concurrent.LinkedBlockingQueue: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.LinkedBlockingQueue: void readObject(java.io.ObjectInputStream)>	<java.io.FileInputStream: void <init>(java.io.File)>	<<immutable-context>>	<org.parosproxy.paros.model.FileCopier: void copyNIO(java.io.File,java.io.File)>/java.io.FileInputStream.<init>/0	<java.util.concurrent.LinkedBlockingQueue: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.LinkedBlockingQueue: void readObject(java.io.ObjectInputStream)>	<java.io.FileOutputStream: void <init>(java.io.File)>	<<immutable-context>>	<org.parosproxy.paros.model.FileCopier: void copyLegacy(java.io.File,java.io.File)>/java.io.FileOutputStream.<init>/0	<java.util.concurrent.LinkedBlockingQueue: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.LinkedBlockingQueue: void readObject(java.io.ObjectInputStream)>	<java.io.FileOutputStream: void <init>(java.io.File)>	<<immutable-context>>	<org.parosproxy.paros.model.FileCopier: void copyNIO(java.io.File,java.io.File)>/java.io.FileOutputStream.<init>/0	<java.util.concurrent.LinkedBlockingQueue: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<org.apache.commons.collections.map.ListOrderedMap: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.lang.String)>	<<immutable-context>>	<org.parosproxy.paros.Constant: void initializeFilesAndDirectories(org.zaproxy.zap.control.ControlOverrides)>/java.io.File.<init>/7	<org.apache.commons.collections.map.ListOrderedMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<org.apache.commons.collections.map.ListOrderedMap: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.lang.String)>	<<immutable-context>>	<org.parosproxy.paros.Constant: void upgradeFrom2_0_0(org.apache.commons.configuration.XMLConfiguration)>/java.io.File.<init>/0	<org.apache.commons.collections.map.ListOrderedMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<org.apache.commons.collections.map.ListOrderedMap: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.lang.String)>	<<immutable-context>>	<org.parosproxy.paros.Constant: void upgradeFrom2_0_0(org.apache.commons.configuration.XMLConfiguration)>/java.io.File.<init>/1	<org.apache.commons.collections.map.ListOrderedMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<org.apache.commons.collections.map.ListOrderedMap: void readObject(java.io.ObjectInputStream)>	<java.io.FileInputStream: void <init>(java.io.File)>	<<immutable-context>>	<org.parosproxy.paros.model.FileCopier: void copyLegacy(java.io.File,java.io.File)>/java.io.FileInputStream.<init>/0	<org.apache.commons.collections.map.ListOrderedMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<org.apache.commons.collections.map.ListOrderedMap: void readObject(java.io.ObjectInputStream)>	<java.io.FileInputStream: void <init>(java.io.File)>	<<immutable-context>>	<org.parosproxy.paros.model.FileCopier: void copyNIO(java.io.File,java.io.File)>/java.io.FileInputStream.<init>/0	<org.apache.commons.collections.map.ListOrderedMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<org.apache.commons.collections.map.ListOrderedMap: void readObject(java.io.ObjectInputStream)>	<java.io.FileOutputStream: void <init>(java.io.File)>	<<immutable-context>>	<org.parosproxy.paros.model.FileCopier: void copyLegacy(java.io.File,java.io.File)>/java.io.FileOutputStream.<init>/0	<org.apache.commons.collections.map.ListOrderedMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<org.apache.commons.collections.map.ListOrderedMap: void readObject(java.io.ObjectInputStream)>	<java.io.FileOutputStream: void <init>(java.io.File)>	<<immutable-context>>	<org.parosproxy.paros.model.FileCopier: void copyNIO(java.io.File,java.io.File)>/java.io.FileOutputStream.<init>/0	<org.apache.commons.collections.map.ListOrderedMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>	<java.io.FileOutputStream: void <init>(java.io.File)>	<<immutable-context>>	<org.apache.flink.api.java.utils.ParameterTool: void createPropertiesFile(java.lang.String,boolean)>/java.io.FileOutputStream.<init>/0	<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.lang.String)>	<<immutable-context>>	<org.apache.flink.api.java.utils.ParameterTool: void createPropertiesFile(java.lang.String,boolean)>/java.io.File.<init>/0	<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>	<java.io.FileInputStream: void <init>(java.io.File)>	<<immutable-context>>	<org.apache.flink.api.java.utils.ParameterTool: org.apache.flink.api.java.utils.ParameterTool fromPropertiesFile(java.io.File)>/java.io.FileInputStream.<init>/0	<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<org.apache.flink.api.java.utils.ParameterTool: void readObject(java.io.ObjectInputStream)>	<java.io.FileOutputStream: void <init>(java.io.File)>	<<immutable-context>>	<org.apache.flink.api.java.utils.ParameterTool: void createPropertiesFile(java.lang.String,boolean)>/java.io.FileOutputStream.<init>/0	<org.apache.flink.api.java.utils.ParameterTool: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<org.apache.flink.api.java.utils.ParameterTool: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.lang.String)>	<<immutable-context>>	<org.apache.flink.api.java.utils.ParameterTool: void createPropertiesFile(java.lang.String,boolean)>/java.io.File.<init>/0	<org.apache.flink.api.java.utils.ParameterTool: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<org.apache.flink.api.java.utils.ParameterTool: void readObject(java.io.ObjectInputStream)>	<java.io.FileInputStream: void <init>(java.io.File)>	<<immutable-context>>	<org.apache.flink.api.java.utils.ParameterTool: org.apache.flink.api.java.utils.ParameterTool fromPropertiesFile(java.io.File)>/java.io.FileInputStream.<init>/0	<org.apache.flink.api.java.utils.ParameterTool: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<org.apache.flink.shaded.guava31.com.google.common.collect.LinkedHashMultiset: void readObject(java.io.ObjectInputStream)>	<java.io.FileOutputStream: void <init>(java.io.File)>	<<immutable-context>>	<org.apache.flink.api.java.utils.ParameterTool: void createPropertiesFile(java.lang.String,boolean)>/java.io.FileOutputStream.<init>/0	<org.apache.flink.shaded.guava31.com.google.common.collect.LinkedHashMultiset: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<org.apache.flink.shaded.guava31.com.google.common.collect.LinkedHashMultiset: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.lang.String)>	<<immutable-context>>	<org.apache.flink.api.java.utils.ParameterTool: void createPropertiesFile(java.lang.String,boolean)>/java.io.File.<init>/0	<org.apache.flink.shaded.guava31.com.google.common.collect.LinkedHashMultiset: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<org.apache.flink.shaded.guava31.com.google.common.collect.LinkedHashMultiset: void readObject(java.io.ObjectInputStream)>	<java.io.FileInputStream: void <init>(java.io.File)>	<<immutable-context>>	<org.apache.flink.api.java.utils.ParameterTool: org.apache.flink.api.java.utils.ParameterTool fromPropertiesFile(java.io.File)>/java.io.FileInputStream.<init>/0	<org.apache.flink.shaded.guava31.com.google.common.collect.LinkedHashMultiset: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>	<java.io.FileOutputStream: void <init>(java.io.File)>	<<immutable-context>>	<org.apache.flink.api.java.utils.ParameterTool: void createPropertiesFile(java.lang.String,boolean)>/java.io.FileOutputStream.<init>/0	<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.lang.String)>	<<immutable-context>>	<org.apache.flink.api.java.utils.ParameterTool: void createPropertiesFile(java.lang.String,boolean)>/java.io.File.<init>/0	<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>	<java.io.FileInputStream: void <init>(java.io.File)>	<<immutable-context>>	<org.apache.flink.api.java.utils.ParameterTool: org.apache.flink.api.java.utils.ParameterTool fromPropertiesFile(java.io.File)>/java.io.FileInputStream.<init>/0	<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.FileOutputStream: void <init>(java.io.File)>	<<immutable-context>>	<org.apache.flink.api.java.utils.ParameterTool: void createPropertiesFile(java.lang.String,boolean)>/java.io.FileOutputStream.<init>/0	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.lang.String)>	<<immutable-context>>	<org.apache.flink.api.java.utils.ParameterTool: void createPropertiesFile(java.lang.String,boolean)>/java.io.File.<init>/0	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.FileInputStream: void <init>(java.io.File)>	<<immutable-context>>	<org.apache.flink.api.java.utils.ParameterTool: org.apache.flink.api.java.utils.ParameterTool fromPropertiesFile(java.io.File)>/java.io.FileInputStream.<init>/0	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentSkipListMap: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.lang.String)>	<<immutable-context>>	<org.parosproxy.paros.Constant: void initializeFilesAndDirectories(org.zaproxy.zap.control.ControlOverrides)>/java.io.File.<init>/7	<java.util.concurrent.ConcurrentSkipListMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentSkipListMap: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.lang.String)>	<<immutable-context>>	<org.parosproxy.paros.Constant: void upgradeFrom2_0_0(org.apache.commons.configuration.XMLConfiguration)>/java.io.File.<init>/0	<java.util.concurrent.ConcurrentSkipListMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentSkipListMap: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.lang.String)>	<<immutable-context>>	<org.parosproxy.paros.Constant: void upgradeFrom2_0_0(org.apache.commons.configuration.XMLConfiguration)>/java.io.File.<init>/1	<java.util.concurrent.ConcurrentSkipListMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentSkipListMap: void readObject(java.io.ObjectInputStream)>	<java.io.FileInputStream: void <init>(java.io.File)>	<<immutable-context>>	<org.parosproxy.paros.model.FileCopier: void copyLegacy(java.io.File,java.io.File)>/java.io.FileInputStream.<init>/0	<java.util.concurrent.ConcurrentSkipListMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentSkipListMap: void readObject(java.io.ObjectInputStream)>	<java.io.FileInputStream: void <init>(java.io.File)>	<<immutable-context>>	<org.parosproxy.paros.model.FileCopier: void copyNIO(java.io.File,java.io.File)>/java.io.FileInputStream.<init>/0	<java.util.concurrent.ConcurrentSkipListMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentSkipListMap: void readObject(java.io.ObjectInputStream)>	<java.io.FileOutputStream: void <init>(java.io.File)>	<<immutable-context>>	<org.parosproxy.paros.model.FileCopier: void copyLegacy(java.io.File,java.io.File)>/java.io.FileOutputStream.<init>/0	<java.util.concurrent.ConcurrentSkipListMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentSkipListMap: void readObject(java.io.ObjectInputStream)>	<java.io.FileOutputStream: void <init>(java.io.File)>	<<immutable-context>>	<org.parosproxy.paros.model.FileCopier: void copyNIO(java.io.File,java.io.File)>/java.io.FileOutputStream.<init>/0	<java.util.concurrent.ConcurrentSkipListMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<org.apache.commons.collections.map.LRUMap: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.lang.String)>	<<immutable-context>>	<org.parosproxy.paros.Constant: void initializeFilesAndDirectories(org.zaproxy.zap.control.ControlOverrides)>/java.io.File.<init>/7	<org.apache.commons.collections.map.LRUMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<org.apache.commons.collections.map.LRUMap: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.lang.String)>	<<immutable-context>>	<org.parosproxy.paros.Constant: void upgradeFrom2_0_0(org.apache.commons.configuration.XMLConfiguration)>/java.io.File.<init>/0	<org.apache.commons.collections.map.LRUMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<org.apache.commons.collections.map.LRUMap: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.lang.String)>	<<immutable-context>>	<org.parosproxy.paros.Constant: void upgradeFrom2_0_0(org.apache.commons.configuration.XMLConfiguration)>/java.io.File.<init>/1	<org.apache.commons.collections.map.LRUMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<org.apache.commons.collections.map.LRUMap: void readObject(java.io.ObjectInputStream)>	<java.io.FileInputStream: void <init>(java.io.File)>	<<immutable-context>>	<org.parosproxy.paros.model.FileCopier: void copyLegacy(java.io.File,java.io.File)>/java.io.FileInputStream.<init>/0	<org.apache.commons.collections.map.LRUMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<org.apache.commons.collections.map.LRUMap: void readObject(java.io.ObjectInputStream)>	<java.io.FileInputStream: void <init>(java.io.File)>	<<immutable-context>>	<org.parosproxy.paros.model.FileCopier: void copyNIO(java.io.File,java.io.File)>/java.io.FileInputStream.<init>/0	<org.apache.commons.collections.map.LRUMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<org.apache.commons.collections.map.LRUMap: void readObject(java.io.ObjectInputStream)>	<java.io.FileOutputStream: void <init>(java.io.File)>	<<immutable-context>>	<org.parosproxy.paros.model.FileCopier: void copyLegacy(java.io.File,java.io.File)>/java.io.FileOutputStream.<init>/0	<org.apache.commons.collections.map.LRUMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<org.apache.commons.collections.map.LRUMap: void readObject(java.io.ObjectInputStream)>	<java.io.FileOutputStream: void <init>(java.io.File)>	<<immutable-context>>	<org.parosproxy.paros.model.FileCopier: void copyNIO(java.io.File,java.io.File)>/java.io.FileOutputStream.<init>/0	<org.apache.commons.collections.map.LRUMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<org.apache.commons.collections.map.HashedMap: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.lang.String)>	<<immutable-context>>	<org.parosproxy.paros.Constant: void initializeFilesAndDirectories(org.zaproxy.zap.control.ControlOverrides)>/java.io.File.<init>/7	<org.apache.commons.collections.map.HashedMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<org.apache.commons.collections.map.HashedMap: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.lang.String)>	<<immutable-context>>	<org.parosproxy.paros.Constant: void upgradeFrom2_0_0(org.apache.commons.configuration.XMLConfiguration)>/java.io.File.<init>/0	<org.apache.commons.collections.map.HashedMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<org.apache.commons.collections.map.HashedMap: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.lang.String)>	<<immutable-context>>	<org.parosproxy.paros.Constant: void upgradeFrom2_0_0(org.apache.commons.configuration.XMLConfiguration)>/java.io.File.<init>/1	<org.apache.commons.collections.map.HashedMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<org.apache.commons.collections.map.HashedMap: void readObject(java.io.ObjectInputStream)>	<java.io.FileInputStream: void <init>(java.io.File)>	<<immutable-context>>	<org.parosproxy.paros.model.FileCopier: void copyLegacy(java.io.File,java.io.File)>/java.io.FileInputStream.<init>/0	<org.apache.commons.collections.map.HashedMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<org.apache.commons.collections.map.HashedMap: void readObject(java.io.ObjectInputStream)>	<java.io.FileInputStream: void <init>(java.io.File)>	<<immutable-context>>	<org.parosproxy.paros.model.FileCopier: void copyNIO(java.io.File,java.io.File)>/java.io.FileInputStream.<init>/0	<org.apache.commons.collections.map.HashedMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<org.apache.commons.collections.map.HashedMap: void readObject(java.io.ObjectInputStream)>	<java.io.FileOutputStream: void <init>(java.io.File)>	<<immutable-context>>	<org.parosproxy.paros.model.FileCopier: void copyLegacy(java.io.File,java.io.File)>/java.io.FileOutputStream.<init>/0	<org.apache.commons.collections.map.HashedMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<org.apache.commons.collections.map.HashedMap: void readObject(java.io.ObjectInputStream)>	<java.io.FileOutputStream: void <init>(java.io.File)>	<<immutable-context>>	<org.parosproxy.paros.model.FileCopier: void copyNIO(java.io.File,java.io.File)>/java.io.FileOutputStream.<init>/0	<org.apache.commons.collections.map.HashedMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.lang.String)>	<<immutable-context>>	<org.parosproxy.paros.Constant: void initializeFilesAndDirectories(org.zaproxy.zap.control.ControlOverrides)>/java.io.File.<init>/7	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.lang.String)>	<<immutable-context>>	<org.parosproxy.paros.Constant: void upgradeFrom2_0_0(org.apache.commons.configuration.XMLConfiguration)>/java.io.File.<init>/0	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.lang.String)>	<<immutable-context>>	<org.parosproxy.paros.Constant: void upgradeFrom2_0_0(org.apache.commons.configuration.XMLConfiguration)>/java.io.File.<init>/1	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.FileInputStream: void <init>(java.io.File)>	<<immutable-context>>	<org.parosproxy.paros.model.FileCopier: void copyLegacy(java.io.File,java.io.File)>/java.io.FileInputStream.<init>/0	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.FileInputStream: void <init>(java.io.File)>	<<immutable-context>>	<org.parosproxy.paros.model.FileCopier: void copyNIO(java.io.File,java.io.File)>/java.io.FileInputStream.<init>/0	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.FileOutputStream: void <init>(java.io.File)>	<<immutable-context>>	<org.parosproxy.paros.model.FileCopier: void copyLegacy(java.io.File,java.io.File)>/java.io.FileOutputStream.<init>/0	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.FileOutputStream: void <init>(java.io.File)>	<<immutable-context>>	<org.parosproxy.paros.model.FileCopier: void copyNIO(java.io.File,java.io.File)>/java.io.FileOutputStream.<init>/0	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.lang.String)>	<<immutable-context>>	<org.parosproxy.paros.Constant: void initializeFilesAndDirectories(org.zaproxy.zap.control.ControlOverrides)>/java.io.File.<init>/7	<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.lang.String)>	<<immutable-context>>	<org.parosproxy.paros.Constant: void upgradeFrom2_0_0(org.apache.commons.configuration.XMLConfiguration)>/java.io.File.<init>/0	<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.lang.String)>	<<immutable-context>>	<org.parosproxy.paros.Constant: void upgradeFrom2_0_0(org.apache.commons.configuration.XMLConfiguration)>/java.io.File.<init>/1	<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>	<java.io.FileInputStream: void <init>(java.io.File)>	<<immutable-context>>	<org.parosproxy.paros.model.FileCopier: void copyLegacy(java.io.File,java.io.File)>/java.io.FileInputStream.<init>/0	<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>	<java.io.FileInputStream: void <init>(java.io.File)>	<<immutable-context>>	<org.parosproxy.paros.model.FileCopier: void copyNIO(java.io.File,java.io.File)>/java.io.FileInputStream.<init>/0	<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>	<java.io.FileOutputStream: void <init>(java.io.File)>	<<immutable-context>>	<org.parosproxy.paros.model.FileCopier: void copyLegacy(java.io.File,java.io.File)>/java.io.FileOutputStream.<init>/0	<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>	<java.io.FileOutputStream: void <init>(java.io.File)>	<<immutable-context>>	<org.parosproxy.paros.model.FileCopier: void copyNIO(java.io.File,java.io.File)>/java.io.FileOutputStream.<init>/0	<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.PriorityQueue: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.lang.String)>	<<immutable-context>>	<org.parosproxy.paros.Constant: void initializeFilesAndDirectories(org.zaproxy.zap.control.ControlOverrides)>/java.io.File.<init>/7	<java.util.PriorityQueue: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.PriorityQueue: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.lang.String)>	<<immutable-context>>	<org.parosproxy.paros.Constant: void upgradeFrom2_0_0(org.apache.commons.configuration.XMLConfiguration)>/java.io.File.<init>/0	<java.util.PriorityQueue: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.PriorityQueue: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.lang.String)>	<<immutable-context>>	<org.parosproxy.paros.Constant: void upgradeFrom2_0_0(org.apache.commons.configuration.XMLConfiguration)>/java.io.File.<init>/1	<java.util.PriorityQueue: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.PriorityQueue: void readObject(java.io.ObjectInputStream)>	<java.io.FileInputStream: void <init>(java.io.File)>	<<immutable-context>>	<org.parosproxy.paros.model.FileCopier: void copyLegacy(java.io.File,java.io.File)>/java.io.FileInputStream.<init>/0	<java.util.PriorityQueue: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.PriorityQueue: void readObject(java.io.ObjectInputStream)>	<java.io.FileInputStream: void <init>(java.io.File)>	<<immutable-context>>	<org.parosproxy.paros.model.FileCopier: void copyNIO(java.io.File,java.io.File)>/java.io.FileInputStream.<init>/0	<java.util.PriorityQueue: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.PriorityQueue: void readObject(java.io.ObjectInputStream)>	<java.io.FileOutputStream: void <init>(java.io.File)>	<<immutable-context>>	<org.parosproxy.paros.model.FileCopier: void copyLegacy(java.io.File,java.io.File)>/java.io.FileOutputStream.<init>/0	<java.util.PriorityQueue: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.PriorityQueue: void readObject(java.io.ObjectInputStream)>	<java.io.FileOutputStream: void <init>(java.io.File)>	<<immutable-context>>	<org.parosproxy.paros.model.FileCopier: void copyNIO(java.io.File,java.io.File)>/java.io.FileOutputStream.<init>/0	<java.util.PriorityQueue: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.lang.String)>	<<immutable-context>>	<org.parosproxy.paros.Constant: void initializeFilesAndDirectories(org.zaproxy.zap.control.ControlOverrides)>/java.io.File.<init>/7	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.lang.String)>	<<immutable-context>>	<org.parosproxy.paros.Constant: void upgradeFrom2_0_0(org.apache.commons.configuration.XMLConfiguration)>/java.io.File.<init>/0	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.lang.String)>	<<immutable-context>>	<org.parosproxy.paros.Constant: void upgradeFrom2_0_0(org.apache.commons.configuration.XMLConfiguration)>/java.io.File.<init>/1	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.FileInputStream: void <init>(java.io.File)>	<<immutable-context>>	<org.parosproxy.paros.model.FileCopier: void copyLegacy(java.io.File,java.io.File)>/java.io.FileInputStream.<init>/0	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.FileInputStream: void <init>(java.io.File)>	<<immutable-context>>	<org.parosproxy.paros.model.FileCopier: void copyNIO(java.io.File,java.io.File)>/java.io.FileInputStream.<init>/0	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.FileOutputStream: void <init>(java.io.File)>	<<immutable-context>>	<org.parosproxy.paros.model.FileCopier: void copyLegacy(java.io.File,java.io.File)>/java.io.FileOutputStream.<init>/0	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.FileOutputStream: void <init>(java.io.File)>	<<immutable-context>>	<org.parosproxy.paros.model.FileCopier: void copyNIO(java.io.File,java.io.File)>/java.io.FileOutputStream.<init>/0	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.PriorityBlockingQueue: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<org.apache.dubbo.common.utils.MethodUtils: java.lang.Object invokeMethod(java.lang.Object,java.lang.String,java.lang.Object[])>/java.lang.reflect.Method.invoke/0	<java.util.concurrent.PriorityBlockingQueue: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.PriorityBlockingQueue: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<org.apache.dubbo.config.AbstractConfig: java.lang.String toString()>/java.lang.reflect.Method.invoke/0	<java.util.concurrent.PriorityBlockingQueue: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.PriorityBlockingQueue: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<org.apache.dubbo.config.AbstractConfig: boolean equals(java.lang.Object)>/java.lang.reflect.Method.invoke/0	<java.util.concurrent.PriorityBlockingQueue: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.PriorityBlockingQueue: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<org.apache.dubbo.config.AbstractConfig: boolean equals(java.lang.Object)>/java.lang.reflect.Method.invoke/1	<java.util.concurrent.PriorityBlockingQueue: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.PriorityBlockingQueue: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<org.apache.dubbo.config.AbstractConfig: int hashCode()>/java.lang.reflect.Method.invoke/0	<java.util.concurrent.PriorityBlockingQueue: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.LinkedBlockingQueue: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<org.apache.dubbo.config.AbstractConfig: java.lang.String toString()>/java.lang.reflect.Method.invoke/0	<java.util.concurrent.LinkedBlockingQueue: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.LinkedBlockingQueue: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<org.apache.dubbo.config.AbstractConfig: boolean equals(java.lang.Object)>/java.lang.reflect.Method.invoke/0	<java.util.concurrent.LinkedBlockingQueue: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.LinkedBlockingQueue: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<org.apache.dubbo.config.AbstractConfig: boolean equals(java.lang.Object)>/java.lang.reflect.Method.invoke/1	<java.util.concurrent.LinkedBlockingQueue: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.LinkedBlockingQueue: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<org.apache.dubbo.config.AbstractConfig: int hashCode()>/java.lang.reflect.Method.invoke/0	<java.util.concurrent.LinkedBlockingQueue: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<org.apache.commons.pool2.impl.LinkedBlockingDeque: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<org.apache.dubbo.config.AbstractConfig: java.lang.String toString()>/java.lang.reflect.Method.invoke/0	<org.apache.commons.pool2.impl.LinkedBlockingDeque: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<org.apache.commons.pool2.impl.LinkedBlockingDeque: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<org.apache.dubbo.config.AbstractConfig: boolean equals(java.lang.Object)>/java.lang.reflect.Method.invoke/0	<org.apache.commons.pool2.impl.LinkedBlockingDeque: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<org.apache.commons.pool2.impl.LinkedBlockingDeque: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<org.apache.dubbo.config.AbstractConfig: boolean equals(java.lang.Object)>/java.lang.reflect.Method.invoke/1	<org.apache.commons.pool2.impl.LinkedBlockingDeque: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<org.apache.commons.pool2.impl.LinkedBlockingDeque: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<org.apache.dubbo.config.AbstractConfig: int hashCode()>/java.lang.reflect.Method.invoke/0	<org.apache.commons.pool2.impl.LinkedBlockingDeque: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentLinkedQueue: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<org.apache.dubbo.config.AbstractConfig: java.lang.String toString()>/java.lang.reflect.Method.invoke/0	<java.util.concurrent.ConcurrentLinkedQueue: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentLinkedQueue: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<org.apache.dubbo.config.AbstractConfig: boolean equals(java.lang.Object)>/java.lang.reflect.Method.invoke/0	<java.util.concurrent.ConcurrentLinkedQueue: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentLinkedQueue: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<org.apache.dubbo.config.AbstractConfig: boolean equals(java.lang.Object)>/java.lang.reflect.Method.invoke/1	<java.util.concurrent.ConcurrentLinkedQueue: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentLinkedQueue: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<org.apache.dubbo.config.AbstractConfig: int hashCode()>/java.lang.reflect.Method.invoke/0	<java.util.concurrent.ConcurrentLinkedQueue: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<org.apache.curator.shaded.com.google.common.collect.HashMultiset: void readObject(java.io.ObjectInputStream)>	<java.lang.ProcessBuilder: java.lang.Process start()>	<<immutable-context>>	<org.apache.hadoop.util.Shell: void runCommand()>/java.lang.ProcessBuilder.start/0	<org.apache.curator.shaded.com.google.common.collect.HashMultiset: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<org.apache.curator.shaded.com.google.common.collect.HashMultiset: void readObject(java.io.ObjectInputStream)>	<java.lang.ProcessBuilder: java.lang.Process start()>	<<immutable-context>>	<org.apache.hadoop.util.Shell: void runCommand()>/java.lang.ProcessBuilder.start/1	<org.apache.curator.shaded.com.google.common.collect.HashMultiset: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<org.apache.curator.shaded.com.google.common.collect.HashMultiset: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.lang.String)>	<<immutable-context>>	<org.apache.hadoop.util.Shell: java.io.File checkHadoopHomeInner(java.lang.String)>/java.io.File.<init>/0	<org.apache.curator.shaded.com.google.common.collect.HashMultiset: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<org.apache.curator.shaded.com.google.common.collect.HashMultiset: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.io.File,java.lang.String)>	<<immutable-context>>	<org.apache.hadoop.util.Shell: java.io.File getQualifiedBinInner(java.io.File,java.lang.String)>/java.io.File.<init>/0	<org.apache.curator.shaded.com.google.common.collect.HashMultiset: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<org.apache.curator.shaded.com.google.common.collect.HashMultiset: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.io.File,java.lang.String)>	<<immutable-context>>	<org.apache.hadoop.util.Shell: java.io.File getQualifiedBinInner(java.io.File,java.lang.String)>/java.io.File.<init>/1	<org.apache.curator.shaded.com.google.common.collect.HashMultiset: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<com.google.gson.internal.LinkedTreeMap: void readObject(java.io.ObjectInputStream)>	<java.lang.ProcessBuilder: java.lang.Process start()>	<<immutable-context>>	<org.apache.hadoop.util.Shell: void runCommand()>/java.lang.ProcessBuilder.start/0	<com.google.gson.internal.LinkedTreeMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<com.google.gson.internal.LinkedTreeMap: void readObject(java.io.ObjectInputStream)>	<java.lang.ProcessBuilder: java.lang.Process start()>	<<immutable-context>>	<org.apache.hadoop.util.Shell: void runCommand()>/java.lang.ProcessBuilder.start/1	<com.google.gson.internal.LinkedTreeMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<com.google.gson.internal.LinkedTreeMap: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.lang.String)>	<<immutable-context>>	<org.apache.hadoop.util.Shell: java.io.File checkHadoopHomeInner(java.lang.String)>/java.io.File.<init>/0	<com.google.gson.internal.LinkedTreeMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<com.google.gson.internal.LinkedTreeMap: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.io.File,java.lang.String)>	<<immutable-context>>	<org.apache.hadoop.util.Shell: java.io.File getQualifiedBinInner(java.io.File,java.lang.String)>/java.io.File.<init>/0	<com.google.gson.internal.LinkedTreeMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<com.google.gson.internal.LinkedTreeMap: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.io.File,java.lang.String)>	<<immutable-context>>	<org.apache.hadoop.util.Shell: java.io.File getQualifiedBinInner(java.io.File,java.lang.String)>/java.io.File.<init>/1	<com.google.gson.internal.LinkedTreeMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.lang.ProcessBuilder: java.lang.Process start()>	<<immutable-context>>	<org.apache.hadoop.util.Shell: void runCommand()>/java.lang.ProcessBuilder.start/0	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.lang.ProcessBuilder: java.lang.Process start()>	<<immutable-context>>	<org.apache.hadoop.util.Shell: void runCommand()>/java.lang.ProcessBuilder.start/1	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.lang.String)>	<<immutable-context>>	<org.apache.hadoop.util.Shell: java.io.File checkHadoopHomeInner(java.lang.String)>/java.io.File.<init>/0	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.io.File,java.lang.String)>	<<immutable-context>>	<org.apache.hadoop.util.Shell: java.io.File getQualifiedBinInner(java.io.File,java.lang.String)>/java.io.File.<init>/0	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.io.File,java.lang.String)>	<<immutable-context>>	<org.apache.hadoop.util.Shell: java.io.File getQualifiedBinInner(java.io.File,java.lang.String)>/java.io.File.<init>/1	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<org.wildfly.openssl.util.FastConcurrentDirectDeque: void readObject(java.io.ObjectInputStream)>	<java.lang.ProcessBuilder: java.lang.Process start()>	<<immutable-context>>	<org.apache.hadoop.util.Shell: void runCommand()>/java.lang.ProcessBuilder.start/0	<org.wildfly.openssl.util.FastConcurrentDirectDeque: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<org.wildfly.openssl.util.FastConcurrentDirectDeque: void readObject(java.io.ObjectInputStream)>	<java.lang.ProcessBuilder: java.lang.Process start()>	<<immutable-context>>	<org.apache.hadoop.util.Shell: void runCommand()>/java.lang.ProcessBuilder.start/1	<org.wildfly.openssl.util.FastConcurrentDirectDeque: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<org.wildfly.openssl.util.FastConcurrentDirectDeque: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.lang.String)>	<<immutable-context>>	<org.apache.hadoop.util.Shell: java.io.File checkHadoopHomeInner(java.lang.String)>/java.io.File.<init>/0	<org.wildfly.openssl.util.FastConcurrentDirectDeque: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<org.wildfly.openssl.util.FastConcurrentDirectDeque: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.io.File,java.lang.String)>	<<immutable-context>>	<org.apache.hadoop.util.Shell: java.io.File getQualifiedBinInner(java.io.File,java.lang.String)>/java.io.File.<init>/0	<org.wildfly.openssl.util.FastConcurrentDirectDeque: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<org.wildfly.openssl.util.FastConcurrentDirectDeque: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.io.File,java.lang.String)>	<<immutable-context>>	<org.apache.hadoop.util.Shell: java.io.File getQualifiedBinInner(java.io.File,java.lang.String)>/java.io.File.<init>/1	<org.wildfly.openssl.util.FastConcurrentDirectDeque: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<org.apache.commons.httpclient.URI: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.lang.String)>	<<immutable-context>>	<org.parosproxy.paros.Constant: void initializeFilesAndDirectories(org.zaproxy.zap.control.ControlOverrides)>/java.io.File.<init>/7	<org.apache.commons.httpclient.URI: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<org.apache.commons.httpclient.URI: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.lang.String)>	<<immutable-context>>	<org.parosproxy.paros.Constant: void upgradeFrom2_0_0(org.apache.commons.configuration.XMLConfiguration)>/java.io.File.<init>/0	<org.apache.commons.httpclient.URI: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<org.apache.commons.httpclient.URI: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.lang.String)>	<<immutable-context>>	<org.parosproxy.paros.Constant: void upgradeFrom2_0_0(org.apache.commons.configuration.XMLConfiguration)>/java.io.File.<init>/1	<org.apache.commons.httpclient.URI: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<org.apache.commons.httpclient.URI: void readObject(java.io.ObjectInputStream)>	<java.io.FileInputStream: void <init>(java.io.File)>	<<immutable-context>>	<org.parosproxy.paros.model.FileCopier: void copyLegacy(java.io.File,java.io.File)>/java.io.FileInputStream.<init>/0	<org.apache.commons.httpclient.URI: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<org.apache.commons.httpclient.URI: void readObject(java.io.ObjectInputStream)>	<java.io.FileInputStream: void <init>(java.io.File)>	<<immutable-context>>	<org.parosproxy.paros.model.FileCopier: void copyNIO(java.io.File,java.io.File)>/java.io.FileInputStream.<init>/0	<org.apache.commons.httpclient.URI: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<org.apache.commons.httpclient.URI: void readObject(java.io.ObjectInputStream)>	<java.io.FileOutputStream: void <init>(java.io.File)>	<<immutable-context>>	<org.parosproxy.paros.model.FileCopier: void copyLegacy(java.io.File,java.io.File)>/java.io.FileOutputStream.<init>/0	<org.apache.commons.httpclient.URI: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<org.apache.commons.httpclient.URI: void readObject(java.io.ObjectInputStream)>	<java.io.FileOutputStream: void <init>(java.io.File)>	<<immutable-context>>	<org.parosproxy.paros.model.FileCopier: void copyNIO(java.io.File,java.io.File)>/java.io.FileOutputStream.<init>/0	<org.apache.commons.httpclient.URI: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.SynchronousQueue: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.lang.String)>	<<immutable-context>>	<org.parosproxy.paros.Constant: void initializeFilesAndDirectories(org.zaproxy.zap.control.ControlOverrides)>/java.io.File.<init>/7	<java.util.concurrent.SynchronousQueue: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.SynchronousQueue: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.lang.String)>	<<immutable-context>>	<org.parosproxy.paros.Constant: void upgradeFrom2_0_0(org.apache.commons.configuration.XMLConfiguration)>/java.io.File.<init>/0	<java.util.concurrent.SynchronousQueue: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.SynchronousQueue: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.lang.String)>	<<immutable-context>>	<org.parosproxy.paros.Constant: void upgradeFrom2_0_0(org.apache.commons.configuration.XMLConfiguration)>/java.io.File.<init>/1	<java.util.concurrent.SynchronousQueue: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.SynchronousQueue: void readObject(java.io.ObjectInputStream)>	<java.io.FileInputStream: void <init>(java.io.File)>	<<immutable-context>>	<org.parosproxy.paros.model.FileCopier: void copyLegacy(java.io.File,java.io.File)>/java.io.FileInputStream.<init>/0	<java.util.concurrent.SynchronousQueue: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.SynchronousQueue: void readObject(java.io.ObjectInputStream)>	<java.io.FileInputStream: void <init>(java.io.File)>	<<immutable-context>>	<org.parosproxy.paros.model.FileCopier: void copyNIO(java.io.File,java.io.File)>/java.io.FileInputStream.<init>/0	<java.util.concurrent.SynchronousQueue: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.SynchronousQueue: void readObject(java.io.ObjectInputStream)>	<java.io.FileOutputStream: void <init>(java.io.File)>	<<immutable-context>>	<org.parosproxy.paros.model.FileCopier: void copyLegacy(java.io.File,java.io.File)>/java.io.FileOutputStream.<init>/0	<java.util.concurrent.SynchronousQueue: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.SynchronousQueue: void readObject(java.io.ObjectInputStream)>	<java.io.FileOutputStream: void <init>(java.io.File)>	<<immutable-context>>	<org.parosproxy.paros.model.FileCopier: void copyNIO(java.io.File,java.io.File)>/java.io.FileOutputStream.<init>/0	<java.util.concurrent.SynchronousQueue: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<org.apache.commons.collections.collection.AbstractSerializableCollectionDecorator: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.lang.String)>	<<immutable-context>>	<org.parosproxy.paros.Constant: void initializeFilesAndDirectories(org.zaproxy.zap.control.ControlOverrides)>/java.io.File.<init>/7	<org.apache.commons.collections.collection.AbstractSerializableCollectionDecorator: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<org.apache.commons.collections.collection.AbstractSerializableCollectionDecorator: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.lang.String)>	<<immutable-context>>	<org.parosproxy.paros.Constant: void upgradeFrom2_0_0(org.apache.commons.configuration.XMLConfiguration)>/java.io.File.<init>/0	<org.apache.commons.collections.collection.AbstractSerializableCollectionDecorator: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<org.apache.commons.collections.collection.AbstractSerializableCollectionDecorator: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.lang.String)>	<<immutable-context>>	<org.parosproxy.paros.Constant: void upgradeFrom2_0_0(org.apache.commons.configuration.XMLConfiguration)>/java.io.File.<init>/1	<org.apache.commons.collections.collection.AbstractSerializableCollectionDecorator: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<org.apache.commons.collections.collection.AbstractSerializableCollectionDecorator: void readObject(java.io.ObjectInputStream)>	<java.io.FileInputStream: void <init>(java.io.File)>	<<immutable-context>>	<org.parosproxy.paros.model.FileCopier: void copyLegacy(java.io.File,java.io.File)>/java.io.FileInputStream.<init>/0	<org.apache.commons.collections.collection.AbstractSerializableCollectionDecorator: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<org.apache.commons.collections.collection.AbstractSerializableCollectionDecorator: void readObject(java.io.ObjectInputStream)>	<java.io.FileInputStream: void <init>(java.io.File)>	<<immutable-context>>	<org.parosproxy.paros.model.FileCopier: void copyNIO(java.io.File,java.io.File)>/java.io.FileInputStream.<init>/0	<org.apache.commons.collections.collection.AbstractSerializableCollectionDecorator: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<org.apache.commons.collections.collection.AbstractSerializableCollectionDecorator: void readObject(java.io.ObjectInputStream)>	<java.io.FileOutputStream: void <init>(java.io.File)>	<<immutable-context>>	<org.parosproxy.paros.model.FileCopier: void copyLegacy(java.io.File,java.io.File)>/java.io.FileOutputStream.<init>/0	<org.apache.commons.collections.collection.AbstractSerializableCollectionDecorator: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<org.apache.commons.collections.collection.AbstractSerializableCollectionDecorator: void readObject(java.io.ObjectInputStream)>	<java.io.FileOutputStream: void <init>(java.io.File)>	<<immutable-context>>	<org.parosproxy.paros.model.FileCopier: void copyNIO(java.io.File,java.io.File)>/java.io.FileOutputStream.<init>/0	<org.apache.commons.collections.collection.AbstractSerializableCollectionDecorator: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.HashSet: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.lang.String)>	<<immutable-context>>	<org.parosproxy.paros.Constant: void initializeFilesAndDirectories(org.zaproxy.zap.control.ControlOverrides)>/java.io.File.<init>/7	<java.util.HashSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.HashSet: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.lang.String)>	<<immutable-context>>	<org.parosproxy.paros.Constant: void upgradeFrom2_0_0(org.apache.commons.configuration.XMLConfiguration)>/java.io.File.<init>/0	<java.util.HashSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.HashSet: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.lang.String)>	<<immutable-context>>	<org.parosproxy.paros.Constant: void upgradeFrom2_0_0(org.apache.commons.configuration.XMLConfiguration)>/java.io.File.<init>/1	<java.util.HashSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.HashSet: void readObject(java.io.ObjectInputStream)>	<java.io.FileInputStream: void <init>(java.io.File)>	<<immutable-context>>	<org.parosproxy.paros.model.FileCopier: void copyLegacy(java.io.File,java.io.File)>/java.io.FileInputStream.<init>/0	<java.util.HashSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.HashSet: void readObject(java.io.ObjectInputStream)>	<java.io.FileInputStream: void <init>(java.io.File)>	<<immutable-context>>	<org.parosproxy.paros.model.FileCopier: void copyNIO(java.io.File,java.io.File)>/java.io.FileInputStream.<init>/0	<java.util.HashSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.HashSet: void readObject(java.io.ObjectInputStream)>	<java.io.FileOutputStream: void <init>(java.io.File)>	<<immutable-context>>	<org.parosproxy.paros.model.FileCopier: void copyLegacy(java.io.File,java.io.File)>/java.io.FileOutputStream.<init>/0	<java.util.HashSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.HashSet: void readObject(java.io.ObjectInputStream)>	<java.io.FileOutputStream: void <init>(java.io.File)>	<<immutable-context>>	<org.parosproxy.paros.model.FileCopier: void copyNIO(java.io.File,java.io.File)>/java.io.FileOutputStream.<init>/0	<java.util.HashSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.lang.String)>	<<immutable-context>>	<org.parosproxy.paros.Constant: void initializeFilesAndDirectories(org.zaproxy.zap.control.ControlOverrides)>/java.io.File.<init>/7	<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.lang.String)>	<<immutable-context>>	<org.parosproxy.paros.Constant: void upgradeFrom2_0_0(org.apache.commons.configuration.XMLConfiguration)>/java.io.File.<init>/0	<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.lang.String)>	<<immutable-context>>	<org.parosproxy.paros.Constant: void upgradeFrom2_0_0(org.apache.commons.configuration.XMLConfiguration)>/java.io.File.<init>/1	<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>	<java.io.FileInputStream: void <init>(java.io.File)>	<<immutable-context>>	<org.parosproxy.paros.model.FileCopier: void copyLegacy(java.io.File,java.io.File)>/java.io.FileInputStream.<init>/0	<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>	<java.io.FileInputStream: void <init>(java.io.File)>	<<immutable-context>>	<org.parosproxy.paros.model.FileCopier: void copyNIO(java.io.File,java.io.File)>/java.io.FileInputStream.<init>/0	<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>	<java.io.FileOutputStream: void <init>(java.io.File)>	<<immutable-context>>	<org.parosproxy.paros.model.FileCopier: void copyLegacy(java.io.File,java.io.File)>/java.io.FileOutputStream.<init>/0	<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>	<java.io.FileOutputStream: void <init>(java.io.File)>	<<immutable-context>>	<org.parosproxy.paros.model.FileCopier: void copyNIO(java.io.File,java.io.File)>/java.io.FileOutputStream.<init>/0	<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.lang.String)>	<<immutable-context>>	<org.parosproxy.paros.Constant: void initializeFilesAndDirectories(org.zaproxy.zap.control.ControlOverrides)>/java.io.File.<init>/7	<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.lang.String)>	<<immutable-context>>	<org.parosproxy.paros.Constant: void upgradeFrom2_0_0(org.apache.commons.configuration.XMLConfiguration)>/java.io.File.<init>/0	<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.lang.String)>	<<immutable-context>>	<org.parosproxy.paros.Constant: void upgradeFrom2_0_0(org.apache.commons.configuration.XMLConfiguration)>/java.io.File.<init>/1	<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>	<java.io.FileInputStream: void <init>(java.io.File)>	<<immutable-context>>	<org.parosproxy.paros.model.FileCopier: void copyLegacy(java.io.File,java.io.File)>/java.io.FileInputStream.<init>/0	<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>	<java.io.FileInputStream: void <init>(java.io.File)>	<<immutable-context>>	<org.parosproxy.paros.model.FileCopier: void copyNIO(java.io.File,java.io.File)>/java.io.FileInputStream.<init>/0	<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>	<java.io.FileOutputStream: void <init>(java.io.File)>	<<immutable-context>>	<org.parosproxy.paros.model.FileCopier: void copyLegacy(java.io.File,java.io.File)>/java.io.FileOutputStream.<init>/0	<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>	<java.io.FileOutputStream: void <init>(java.io.File)>	<<immutable-context>>	<org.parosproxy.paros.model.FileCopier: void copyNIO(java.io.File,java.io.File)>/java.io.FileOutputStream.<init>/0	<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.lang.String)>	<<immutable-context>>	<org.parosproxy.paros.Constant: void initializeFilesAndDirectories(org.zaproxy.zap.control.ControlOverrides)>/java.io.File.<init>/7	<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.lang.String)>	<<immutable-context>>	<org.parosproxy.paros.Constant: void upgradeFrom2_0_0(org.apache.commons.configuration.XMLConfiguration)>/java.io.File.<init>/0	<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.lang.String)>	<<immutable-context>>	<org.parosproxy.paros.Constant: void upgradeFrom2_0_0(org.apache.commons.configuration.XMLConfiguration)>/java.io.File.<init>/1	<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>	<java.io.FileInputStream: void <init>(java.io.File)>	<<immutable-context>>	<org.parosproxy.paros.model.FileCopier: void copyLegacy(java.io.File,java.io.File)>/java.io.FileInputStream.<init>/0	<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>	<java.io.FileInputStream: void <init>(java.io.File)>	<<immutable-context>>	<org.parosproxy.paros.model.FileCopier: void copyNIO(java.io.File,java.io.File)>/java.io.FileInputStream.<init>/0	<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>	<java.io.FileOutputStream: void <init>(java.io.File)>	<<immutable-context>>	<org.parosproxy.paros.model.FileCopier: void copyLegacy(java.io.File,java.io.File)>/java.io.FileOutputStream.<init>/0	<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>	<java.io.FileOutputStream: void <init>(java.io.File)>	<<immutable-context>>	<org.parosproxy.paros.model.FileCopier: void copyNIO(java.io.File,java.io.File)>/java.io.FileOutputStream.<init>/0	<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<com.alibaba.nacos.shaded.com.google.common.collect.ImmutableEnumSet: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<com.alibaba.nacos.shaded.io.grpc.netty.shaded.io.netty.util.internal.PlatformDependent0: void <clinit>()>/java.lang.reflect.Method.invoke/0	<com.alibaba.nacos.shaded.com.google.common.collect.ImmutableEnumSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<com.alibaba.nacos.shaded.com.google.common.collect.ImmutableEnumSet: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<com.alibaba.nacos.shaded.io.grpc.netty.shaded.io.netty.util.internal.CleanerJava9$1: java.lang.Object run()>/java.lang.reflect.Method.invoke/0	<com.alibaba.nacos.shaded.com.google.common.collect.ImmutableEnumSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<com.alibaba.nacos.shaded.com.google.common.collect.ImmutableEnumSet: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>	<<immutable-context>>	<com.alibaba.nacos.shaded.io.grpc.netty.shaded.io.netty.util.internal.PlatformDependent0: void <clinit>()>/java.lang.reflect.Constructor.newInstance/0	<com.alibaba.nacos.shaded.com.google.common.collect.ImmutableEnumSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<com.alibaba.nacos.shaded.com.google.common.collect.ImmutableEnumSet: void readObject(java.io.ObjectInputStream)>	<java.io.FileReader: void <init>(java.io.File)>	<<immutable-context>>	<com.alibaba.nacos.shaded.io.grpc.netty.shaded.io.netty.util.NetUtil$SoMaxConnAction: java.lang.Integer run()>/java.io.FileReader.<init>/0	<com.alibaba.nacos.shaded.com.google.common.collect.ImmutableEnumSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<com.alibaba.nacos.shaded.com.google.common.collect.ImmutableEnumSet: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.lang.String)>	<<immutable-context>>	<com.alibaba.nacos.shaded.io.grpc.netty.shaded.io.netty.util.internal.PlatformDependent: void addFilesystemOsClassifiers(java.util.Set,java.util.Set)>/java.io.File.<init>/0	<com.alibaba.nacos.shaded.com.google.common.collect.ImmutableEnumSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<com.alibaba.nacos.shaded.com.google.common.collect.ImmutableEnumSet: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.lang.String)>	<<immutable-context>>	<com.alibaba.nacos.shaded.io.grpc.netty.shaded.io.netty.util.internal.PlatformDependent: java.io.File toDirectory(java.lang.String)>/java.io.File.<init>/0	<com.alibaba.nacos.shaded.com.google.common.collect.ImmutableEnumSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<com.alibaba.nacos.shaded.com.google.common.collect.ImmutableEnumSet: void readObject(java.io.ObjectInputStream)>	<java.io.FileInputStream: void <init>(java.io.File)>	<<immutable-context>>	<com.alibaba.nacos.shaded.io.grpc.netty.shaded.io.netty.util.internal.PlatformDependent$4: java.lang.Boolean run()>/java.io.FileInputStream.<init>/0	<com.alibaba.nacos.shaded.com.google.common.collect.ImmutableEnumSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<com.alibaba.nacos.shaded.com.google.gson.internal.LazilyParsedNumber: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<com.alibaba.nacos.shaded.io.grpc.netty.shaded.io.netty.util.internal.PlatformDependent0: void <clinit>()>/java.lang.reflect.Method.invoke/0	<com.alibaba.nacos.shaded.com.google.gson.internal.LazilyParsedNumber: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<com.alibaba.nacos.shaded.com.google.gson.internal.LazilyParsedNumber: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<com.alibaba.nacos.shaded.io.grpc.netty.shaded.io.netty.util.internal.CleanerJava9$1: java.lang.Object run()>/java.lang.reflect.Method.invoke/0	<com.alibaba.nacos.shaded.com.google.gson.internal.LazilyParsedNumber: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<com.alibaba.nacos.shaded.com.google.gson.internal.LazilyParsedNumber: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>	<<immutable-context>>	<com.alibaba.nacos.shaded.io.grpc.netty.shaded.io.netty.util.internal.PlatformDependent0: void <clinit>()>/java.lang.reflect.Constructor.newInstance/0	<com.alibaba.nacos.shaded.com.google.gson.internal.LazilyParsedNumber: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<com.alibaba.nacos.shaded.com.google.gson.internal.LazilyParsedNumber: void readObject(java.io.ObjectInputStream)>	<java.io.FileReader: void <init>(java.io.File)>	<<immutable-context>>	<com.alibaba.nacos.shaded.io.grpc.netty.shaded.io.netty.util.NetUtil$SoMaxConnAction: java.lang.Integer run()>/java.io.FileReader.<init>/0	<com.alibaba.nacos.shaded.com.google.gson.internal.LazilyParsedNumber: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<com.alibaba.nacos.shaded.com.google.gson.internal.LazilyParsedNumber: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.lang.String)>	<<immutable-context>>	<com.alibaba.nacos.shaded.io.grpc.netty.shaded.io.netty.util.internal.PlatformDependent: void addFilesystemOsClassifiers(java.util.Set,java.util.Set)>/java.io.File.<init>/0	<com.alibaba.nacos.shaded.com.google.gson.internal.LazilyParsedNumber: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<com.alibaba.nacos.shaded.com.google.gson.internal.LazilyParsedNumber: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.lang.String)>	<<immutable-context>>	<com.alibaba.nacos.shaded.io.grpc.netty.shaded.io.netty.util.internal.PlatformDependent: java.io.File toDirectory(java.lang.String)>/java.io.File.<init>/0	<com.alibaba.nacos.shaded.com.google.gson.internal.LazilyParsedNumber: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<com.alibaba.nacos.shaded.com.google.gson.internal.LazilyParsedNumber: void readObject(java.io.ObjectInputStream)>	<java.io.FileInputStream: void <init>(java.io.File)>	<<immutable-context>>	<com.alibaba.nacos.shaded.io.grpc.netty.shaded.io.netty.util.internal.PlatformDependent$4: java.lang.Boolean run()>/java.io.FileInputStream.<init>/0	<com.alibaba.nacos.shaded.com.google.gson.internal.LazilyParsedNumber: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.HashSet: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<com.alibaba.nacos.shaded.io.grpc.netty.shaded.io.netty.util.internal.PlatformDependent0: void <clinit>()>/java.lang.reflect.Method.invoke/0	<java.util.HashSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.HashSet: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<com.alibaba.nacos.shaded.io.grpc.netty.shaded.io.netty.util.internal.CleanerJava9$1: java.lang.Object run()>/java.lang.reflect.Method.invoke/0	<java.util.HashSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.HashSet: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>	<<immutable-context>>	<com.alibaba.nacos.shaded.io.grpc.netty.shaded.io.netty.util.internal.PlatformDependent0: void <clinit>()>/java.lang.reflect.Constructor.newInstance/0	<java.util.HashSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.HashSet: void readObject(java.io.ObjectInputStream)>	<java.io.FileReader: void <init>(java.io.File)>	<<immutable-context>>	<com.alibaba.nacos.shaded.io.grpc.netty.shaded.io.netty.util.NetUtil$SoMaxConnAction: java.lang.Integer run()>/java.io.FileReader.<init>/0	<java.util.HashSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.HashSet: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.lang.String)>	<<immutable-context>>	<com.alibaba.nacos.shaded.io.grpc.netty.shaded.io.netty.util.internal.PlatformDependent: void addFilesystemOsClassifiers(java.util.Set,java.util.Set)>/java.io.File.<init>/0	<java.util.HashSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.HashSet: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.lang.String)>	<<immutable-context>>	<com.alibaba.nacos.shaded.io.grpc.netty.shaded.io.netty.util.internal.PlatformDependent: java.io.File toDirectory(java.lang.String)>/java.io.File.<init>/0	<java.util.HashSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.HashSet: void readObject(java.io.ObjectInputStream)>	<java.io.FileInputStream: void <init>(java.io.File)>	<<immutable-context>>	<com.alibaba.nacos.shaded.io.grpc.netty.shaded.io.netty.util.internal.PlatformDependent$4: java.lang.Boolean run()>/java.io.FileInputStream.<init>/0	<java.util.HashSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<com.alibaba.nacos.shaded.io.grpc.netty.shaded.io.netty.util.internal.PlatformDependent0: void <clinit>()>/java.lang.reflect.Method.invoke/0	<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<com.alibaba.nacos.shaded.io.grpc.netty.shaded.io.netty.util.internal.CleanerJava9$1: java.lang.Object run()>/java.lang.reflect.Method.invoke/0	<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>	<<immutable-context>>	<com.alibaba.nacos.shaded.io.grpc.netty.shaded.io.netty.util.internal.PlatformDependent0: void <clinit>()>/java.lang.reflect.Constructor.newInstance/0	<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>	<java.io.FileReader: void <init>(java.io.File)>	<<immutable-context>>	<com.alibaba.nacos.shaded.io.grpc.netty.shaded.io.netty.util.NetUtil$SoMaxConnAction: java.lang.Integer run()>/java.io.FileReader.<init>/0	<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.lang.String)>	<<immutable-context>>	<com.alibaba.nacos.shaded.io.grpc.netty.shaded.io.netty.util.internal.PlatformDependent: void addFilesystemOsClassifiers(java.util.Set,java.util.Set)>/java.io.File.<init>/0	<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.lang.String)>	<<immutable-context>>	<com.alibaba.nacos.shaded.io.grpc.netty.shaded.io.netty.util.internal.PlatformDependent: java.io.File toDirectory(java.lang.String)>/java.io.File.<init>/0	<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>	<java.io.FileInputStream: void <init>(java.io.File)>	<<immutable-context>>	<com.alibaba.nacos.shaded.io.grpc.netty.shaded.io.netty.util.internal.PlatformDependent$4: java.lang.Boolean run()>/java.io.FileInputStream.<init>/0	<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<com.alibaba.nacos.shaded.io.grpc.netty.shaded.io.netty.util.internal.PlatformDependent0: void <clinit>()>/java.lang.reflect.Method.invoke/0	<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<com.alibaba.nacos.shaded.io.grpc.netty.shaded.io.netty.util.internal.CleanerJava9$1: java.lang.Object run()>/java.lang.reflect.Method.invoke/0	<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>	<<immutable-context>>	<com.alibaba.nacos.shaded.io.grpc.netty.shaded.io.netty.util.internal.PlatformDependent0: void <clinit>()>/java.lang.reflect.Constructor.newInstance/0	<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>	<java.io.FileReader: void <init>(java.io.File)>	<<immutable-context>>	<com.alibaba.nacos.shaded.io.grpc.netty.shaded.io.netty.util.NetUtil$SoMaxConnAction: java.lang.Integer run()>/java.io.FileReader.<init>/0	<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.lang.String)>	<<immutable-context>>	<com.alibaba.nacos.shaded.io.grpc.netty.shaded.io.netty.util.internal.PlatformDependent: void addFilesystemOsClassifiers(java.util.Set,java.util.Set)>/java.io.File.<init>/0	<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.lang.String)>	<<immutable-context>>	<com.alibaba.nacos.shaded.io.grpc.netty.shaded.io.netty.util.internal.PlatformDependent: java.io.File toDirectory(java.lang.String)>/java.io.File.<init>/0	<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>	<java.io.FileInputStream: void <init>(java.io.File)>	<<immutable-context>>	<com.alibaba.nacos.shaded.io.grpc.netty.shaded.io.netty.util.internal.PlatformDependent$4: java.lang.Boolean run()>/java.io.FileInputStream.<init>/0	<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentSkipListMap: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<com.alibaba.nacos.shaded.io.grpc.netty.shaded.io.netty.util.internal.PlatformDependent0: void <clinit>()>/java.lang.reflect.Method.invoke/0	<java.util.concurrent.ConcurrentSkipListMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentSkipListMap: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<com.alibaba.nacos.shaded.io.grpc.netty.shaded.io.netty.util.internal.CleanerJava9$1: java.lang.Object run()>/java.lang.reflect.Method.invoke/0	<java.util.concurrent.ConcurrentSkipListMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentSkipListMap: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>	<<immutable-context>>	<com.alibaba.nacos.shaded.io.grpc.netty.shaded.io.netty.util.internal.PlatformDependent0: void <clinit>()>/java.lang.reflect.Constructor.newInstance/0	<java.util.concurrent.ConcurrentSkipListMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentSkipListMap: void readObject(java.io.ObjectInputStream)>	<java.io.FileReader: void <init>(java.io.File)>	<<immutable-context>>	<com.alibaba.nacos.shaded.io.grpc.netty.shaded.io.netty.util.NetUtil$SoMaxConnAction: java.lang.Integer run()>/java.io.FileReader.<init>/0	<java.util.concurrent.ConcurrentSkipListMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentSkipListMap: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.lang.String)>	<<immutable-context>>	<com.alibaba.nacos.shaded.io.grpc.netty.shaded.io.netty.util.internal.PlatformDependent: void addFilesystemOsClassifiers(java.util.Set,java.util.Set)>/java.io.File.<init>/0	<java.util.concurrent.ConcurrentSkipListMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentSkipListMap: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.lang.String)>	<<immutable-context>>	<com.alibaba.nacos.shaded.io.grpc.netty.shaded.io.netty.util.internal.PlatformDependent: java.io.File toDirectory(java.lang.String)>/java.io.File.<init>/0	<java.util.concurrent.ConcurrentSkipListMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentSkipListMap: void readObject(java.io.ObjectInputStream)>	<java.io.FileInputStream: void <init>(java.io.File)>	<<immutable-context>>	<com.alibaba.nacos.shaded.io.grpc.netty.shaded.io.netty.util.internal.PlatformDependent$4: java.lang.Boolean run()>/java.io.FileInputStream.<init>/0	<java.util.concurrent.ConcurrentSkipListMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentSkipListMap: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<cn.hutool.core.util.ReflectUtil: java.lang.Object invokeRaw(java.lang.Object,java.lang.reflect.Method,java.lang.Object[])>/java.lang.reflect.Method.invoke/0	<java.util.concurrent.ConcurrentSkipListMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentSkipListMap: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>	<<immutable-context>>	<cn.hutool.core.util.ReflectUtil: java.lang.Object newInstance(java.lang.Class,java.lang.Object[])>/java.lang.reflect.Constructor.newInstance/0	<java.util.concurrent.ConcurrentSkipListMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentSkipListMap: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>	<<immutable-context>>	<cn.hutool.core.util.ReflectUtil: java.lang.Object newInstance(java.lang.Class,java.lang.Object[])>/java.lang.reflect.Constructor.newInstance/1	<java.util.concurrent.ConcurrentSkipListMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentSkipListMap: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>	<<immutable-context>>	<cn.hutool.core.util.ReflectUtil: java.lang.Object newInstanceIfPossible(java.lang.Class)>/java.lang.reflect.Constructor.newInstance/0	<java.util.concurrent.ConcurrentSkipListMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentSkipListMap: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void println(java.lang.String)>	<<immutable-context>>	<cn.hutool.core.lang.tree.Tree: void printTree(cn.hutool.core.lang.tree.Tree,java.io.PrintWriter,int)>/java.io.PrintWriter.println/0	<java.util.concurrent.ConcurrentSkipListMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentSkipListMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(int)>	<<immutable-context>>	<cn.hutool.json.serialize.JSONWriter: cn.hutool.json.serialize.JSONWriter writeRaw(char)>/java.io.Writer.write/0	<java.util.concurrent.ConcurrentSkipListMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentSkipListMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(char[])>	<<immutable-context>>	<cn.hutool.core.text.csv.CsvWriter: cn.hutool.core.text.csv.CsvWriter writeLine()>/java.io.Writer.write/0	<java.util.concurrent.ConcurrentSkipListMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<cn.hutool.core.date.format.FastDatePrinter: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<cn.hutool.core.util.ReflectUtil: java.lang.Object invokeRaw(java.lang.Object,java.lang.reflect.Method,java.lang.Object[])>/java.lang.reflect.Method.invoke/0	<cn.hutool.core.date.format.FastDatePrinter: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<cn.hutool.core.date.format.FastDatePrinter: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>	<<immutable-context>>	<cn.hutool.core.util.ReflectUtil: java.lang.Object newInstance(java.lang.Class,java.lang.Object[])>/java.lang.reflect.Constructor.newInstance/0	<cn.hutool.core.date.format.FastDatePrinter: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<cn.hutool.core.date.format.FastDatePrinter: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>	<<immutable-context>>	<cn.hutool.core.util.ReflectUtil: java.lang.Object newInstance(java.lang.Class,java.lang.Object[])>/java.lang.reflect.Constructor.newInstance/1	<cn.hutool.core.date.format.FastDatePrinter: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<cn.hutool.core.date.format.FastDatePrinter: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>	<<immutable-context>>	<cn.hutool.core.util.ReflectUtil: java.lang.Object newInstanceIfPossible(java.lang.Class)>/java.lang.reflect.Constructor.newInstance/0	<cn.hutool.core.date.format.FastDatePrinter: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<cn.hutool.core.date.format.FastDatePrinter: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void println(java.lang.String)>	<<immutable-context>>	<cn.hutool.core.lang.tree.Tree: void printTree(cn.hutool.core.lang.tree.Tree,java.io.PrintWriter,int)>/java.io.PrintWriter.println/0	<cn.hutool.core.date.format.FastDatePrinter: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<cn.hutool.core.date.format.FastDatePrinter: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(int)>	<<immutable-context>>	<cn.hutool.json.serialize.JSONWriter: cn.hutool.json.serialize.JSONWriter writeRaw(char)>/java.io.Writer.write/0	<cn.hutool.core.date.format.FastDatePrinter: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<cn.hutool.core.date.format.FastDatePrinter: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(char[])>	<<immutable-context>>	<cn.hutool.core.text.csv.CsvWriter: cn.hutool.core.text.csv.CsvWriter writeLine()>/java.io.Writer.write/0	<cn.hutool.core.date.format.FastDatePrinter: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.SynchronousQueue: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>	<<immutable-context>>	<cn.hutool.core.util.ReflectUtil: java.lang.Object newInstance(java.lang.Class,java.lang.Object[])>/java.lang.reflect.Constructor.newInstance/0	<java.util.concurrent.SynchronousQueue: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.SynchronousQueue: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>	<<immutable-context>>	<cn.hutool.core.util.ReflectUtil: java.lang.Object newInstance(java.lang.Class,java.lang.Object[])>/java.lang.reflect.Constructor.newInstance/1	<java.util.concurrent.SynchronousQueue: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.SynchronousQueue: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>	<<immutable-context>>	<cn.hutool.core.util.ReflectUtil: java.lang.Object newInstanceIfPossible(java.lang.Class)>/java.lang.reflect.Constructor.newInstance/0	<java.util.concurrent.SynchronousQueue: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.SynchronousQueue: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void println(java.lang.String)>	<<immutable-context>>	<cn.hutool.core.lang.tree.Tree: void printTree(cn.hutool.core.lang.tree.Tree,java.io.PrintWriter,int)>/java.io.PrintWriter.println/0	<java.util.concurrent.SynchronousQueue: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.SynchronousQueue: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(char[])>	<<immutable-context>>	<cn.hutool.core.text.csv.CsvWriter: cn.hutool.core.text.csv.CsvWriter writeLine()>/java.io.Writer.write/0	<java.util.concurrent.SynchronousQueue: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<cn.hutool.core.map.MapWrapper: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<cn.hutool.core.util.ReflectUtil: java.lang.Object invokeRaw(java.lang.Object,java.lang.reflect.Method,java.lang.Object[])>/java.lang.reflect.Method.invoke/0	<cn.hutool.core.map.MapWrapper: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<cn.hutool.core.map.MapWrapper: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>	<<immutable-context>>	<cn.hutool.core.util.ReflectUtil: java.lang.Object newInstance(java.lang.Class,java.lang.Object[])>/java.lang.reflect.Constructor.newInstance/0	<cn.hutool.core.map.MapWrapper: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<cn.hutool.core.map.MapWrapper: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>	<<immutable-context>>	<cn.hutool.core.util.ReflectUtil: java.lang.Object newInstance(java.lang.Class,java.lang.Object[])>/java.lang.reflect.Constructor.newInstance/1	<cn.hutool.core.map.MapWrapper: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<cn.hutool.core.map.MapWrapper: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>	<<immutable-context>>	<cn.hutool.core.util.ReflectUtil: java.lang.Object newInstanceIfPossible(java.lang.Class)>/java.lang.reflect.Constructor.newInstance/0	<cn.hutool.core.map.MapWrapper: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<cn.hutool.core.map.MapWrapper: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void println(java.lang.String)>	<<immutable-context>>	<cn.hutool.core.lang.tree.Tree: void printTree(cn.hutool.core.lang.tree.Tree,java.io.PrintWriter,int)>/java.io.PrintWriter.println/0	<cn.hutool.core.map.MapWrapper: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<cn.hutool.core.map.MapWrapper: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(int)>	<<immutable-context>>	<cn.hutool.json.serialize.JSONWriter: cn.hutool.json.serialize.JSONWriter writeRaw(char)>/java.io.Writer.write/0	<cn.hutool.core.map.MapWrapper: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<cn.hutool.core.map.MapWrapper: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(char[])>	<<immutable-context>>	<cn.hutool.core.text.csv.CsvWriter: cn.hutool.core.text.csv.CsvWriter writeLine()>/java.io.Writer.write/0	<cn.hutool.core.map.MapWrapper: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.PriorityQueue: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<cn.hutool.core.util.ReflectUtil: java.lang.Object invokeRaw(java.lang.Object,java.lang.reflect.Method,java.lang.Object[])>/java.lang.reflect.Method.invoke/0	<java.util.PriorityQueue: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.PriorityQueue: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>	<<immutable-context>>	<cn.hutool.core.util.ReflectUtil: java.lang.Object newInstance(java.lang.Class,java.lang.Object[])>/java.lang.reflect.Constructor.newInstance/0	<java.util.PriorityQueue: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.PriorityQueue: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>	<<immutable-context>>	<cn.hutool.core.util.ReflectUtil: java.lang.Object newInstance(java.lang.Class,java.lang.Object[])>/java.lang.reflect.Constructor.newInstance/1	<java.util.PriorityQueue: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.PriorityQueue: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>	<<immutable-context>>	<cn.hutool.core.util.ReflectUtil: java.lang.Object newInstanceIfPossible(java.lang.Class)>/java.lang.reflect.Constructor.newInstance/0	<java.util.PriorityQueue: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.PriorityQueue: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void println(java.lang.String)>	<<immutable-context>>	<cn.hutool.core.lang.tree.Tree: void printTree(cn.hutool.core.lang.tree.Tree,java.io.PrintWriter,int)>/java.io.PrintWriter.println/0	<java.util.PriorityQueue: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.PriorityQueue: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(int)>	<<immutable-context>>	<cn.hutool.json.serialize.JSONWriter: cn.hutool.json.serialize.JSONWriter writeRaw(char)>/java.io.Writer.write/0	<java.util.PriorityQueue: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.PriorityQueue: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(char[])>	<<immutable-context>>	<cn.hutool.core.text.csv.CsvWriter: cn.hutool.core.text.csv.CsvWriter writeLine()>/java.io.Writer.write/0	<java.util.PriorityQueue: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentLinkedQueue: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>	<<immutable-context>>	<cn.hutool.core.util.ReflectUtil: java.lang.Object newInstance(java.lang.Class,java.lang.Object[])>/java.lang.reflect.Constructor.newInstance/0	<java.util.concurrent.ConcurrentLinkedQueue: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentLinkedQueue: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>	<<immutable-context>>	<cn.hutool.core.util.ReflectUtil: java.lang.Object newInstance(java.lang.Class,java.lang.Object[])>/java.lang.reflect.Constructor.newInstance/1	<java.util.concurrent.ConcurrentLinkedQueue: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentLinkedQueue: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>	<<immutable-context>>	<cn.hutool.core.util.ReflectUtil: java.lang.Object newInstanceIfPossible(java.lang.Class)>/java.lang.reflect.Constructor.newInstance/0	<java.util.concurrent.ConcurrentLinkedQueue: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentLinkedQueue: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void println(java.lang.String)>	<<immutable-context>>	<cn.hutool.core.lang.tree.Tree: void printTree(cn.hutool.core.lang.tree.Tree,java.io.PrintWriter,int)>/java.io.PrintWriter.println/0	<java.util.concurrent.ConcurrentLinkedQueue: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentLinkedQueue: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(char[])>	<<immutable-context>>	<cn.hutool.core.text.csv.CsvWriter: cn.hutool.core.text.csv.CsvWriter writeLine()>/java.io.Writer.write/0	<java.util.concurrent.ConcurrentLinkedQueue: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<org.apache.dubbo.config.AbstractConfig: java.lang.String toString()>/java.lang.reflect.Method.invoke/0	<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<org.apache.dubbo.config.AbstractConfig: boolean equals(java.lang.Object)>/java.lang.reflect.Method.invoke/0	<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<org.apache.dubbo.config.AbstractConfig: boolean equals(java.lang.Object)>/java.lang.reflect.Method.invoke/1	<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<org.apache.dubbo.config.AbstractConfig: int hashCode()>/java.lang.reflect.Method.invoke/0	<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeMap: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<org.apache.dubbo.config.AbstractConfig: java.lang.String toString()>/java.lang.reflect.Method.invoke/0	<java.util.TreeMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeMap: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<org.apache.dubbo.config.AbstractConfig: boolean equals(java.lang.Object)>/java.lang.reflect.Method.invoke/0	<java.util.TreeMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeMap: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<org.apache.dubbo.config.AbstractConfig: boolean equals(java.lang.Object)>/java.lang.reflect.Method.invoke/1	<java.util.TreeMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeMap: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<org.apache.dubbo.config.AbstractConfig: int hashCode()>/java.lang.reflect.Method.invoke/0	<java.util.TreeMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.HashSet: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<org.apache.dubbo.config.AbstractConfig: java.lang.String toString()>/java.lang.reflect.Method.invoke/0	<java.util.HashSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.HashSet: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<org.apache.dubbo.config.AbstractConfig: boolean equals(java.lang.Object)>/java.lang.reflect.Method.invoke/0	<java.util.HashSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.HashSet: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<org.apache.dubbo.config.AbstractConfig: boolean equals(java.lang.Object)>/java.lang.reflect.Method.invoke/1	<java.util.HashSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.HashSet: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<org.apache.dubbo.config.AbstractConfig: int hashCode()>/java.lang.reflect.Method.invoke/0	<java.util.HashSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<org.apache.dubbo.config.AbstractConfig: java.lang.String toString()>/java.lang.reflect.Method.invoke/0	<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<org.apache.dubbo.config.AbstractConfig: boolean equals(java.lang.Object)>/java.lang.reflect.Method.invoke/0	<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<org.apache.dubbo.config.AbstractConfig: boolean equals(java.lang.Object)>/java.lang.reflect.Method.invoke/1	<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<org.apache.dubbo.config.AbstractConfig: int hashCode()>/java.lang.reflect.Method.invoke/0	<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.HashMap: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<org.apache.dubbo.config.AbstractConfig: java.lang.String toString()>/java.lang.reflect.Method.invoke/0	<java.util.HashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.HashMap: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<org.apache.dubbo.config.AbstractConfig: boolean equals(java.lang.Object)>/java.lang.reflect.Method.invoke/0	<java.util.HashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.HashMap: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<org.apache.dubbo.config.AbstractConfig: boolean equals(java.lang.Object)>/java.lang.reflect.Method.invoke/1	<java.util.HashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.HashMap: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<org.apache.dubbo.config.AbstractConfig: int hashCode()>/java.lang.reflect.Method.invoke/0	<java.util.HashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeMap: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>	<<immutable-context>>	<cn.hutool.core.util.ReflectUtil: java.lang.Object newInstance(java.lang.Class,java.lang.Object[])>/java.lang.reflect.Constructor.newInstance/0	<java.util.TreeMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeMap: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>	<<immutable-context>>	<cn.hutool.core.util.ReflectUtil: java.lang.Object newInstance(java.lang.Class,java.lang.Object[])>/java.lang.reflect.Constructor.newInstance/1	<java.util.TreeMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeMap: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>	<<immutable-context>>	<cn.hutool.core.util.ReflectUtil: java.lang.Object newInstanceIfPossible(java.lang.Class)>/java.lang.reflect.Constructor.newInstance/0	<java.util.TreeMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeMap: void readObject(java.io.ObjectInputStream)>	<java.io.FileInputStream: void <init>(java.io.File)>	<<immutable-context>>	<cn.hutool.core.io.IoUtil: java.io.FileInputStream toStream(java.io.File)>/java.io.FileInputStream.<init>/0	<java.util.TreeMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeMap: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void println(java.lang.String)>	<<immutable-context>>	<cn.hutool.core.lang.tree.Tree: void printTree(cn.hutool.core.lang.tree.Tree,java.io.PrintWriter,int)>/java.io.PrintWriter.println/0	<java.util.TreeMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeMap: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.lang.String)>	<<immutable-context>>	<cn.hutool.core.io.FileUtil: java.io.File file(java.lang.String)>/java.io.File.<init>/0	<java.util.TreeMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeMap: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.io.File,java.lang.String)>	<<immutable-context>>	<cn.hutool.core.io.file.FileCopier: void internalCopyDirContent(java.io.File,java.io.File)>/java.io.File.<init>/0	<java.util.TreeMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeMap: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.io.File,java.lang.String)>	<<immutable-context>>	<cn.hutool.core.io.file.FileCopier: void internalCopyDirContent(java.io.File,java.io.File)>/java.io.File.<init>/1	<java.util.TreeMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeMap: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.io.File,java.lang.String)>	<<immutable-context>>	<cn.hutool.core.io.file.FileCopier: java.io.File internalCopyFile(java.io.File,java.io.File)>/java.io.File.<init>/0	<java.util.TreeMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeMap: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.io.File,java.lang.String)>	<<immutable-context>>	<cn.hutool.core.io.FileUtil: java.io.File buildFile(java.io.File,java.lang.String)>/java.io.File.<init>/0	<java.util.TreeMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeMap: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.io.File,java.lang.String)>	<<immutable-context>>	<cn.hutool.core.io.FileUtil: java.io.File buildFile(java.io.File,java.lang.String)>/java.io.File.<init>/1	<java.util.TreeMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeMap: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.net.URI)>	<<immutable-context>>	<cn.hutool.core.io.FileUtil: java.io.File file(java.net.URL)>/java.io.File.<init>/0	<java.util.TreeMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(int)>	<<immutable-context>>	<cn.hutool.json.serialize.JSONWriter: cn.hutool.json.serialize.JSONWriter writeRaw(char)>/java.io.Writer.write/0	<java.util.TreeMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(char[])>	<<immutable-context>>	<cn.hutool.core.text.csv.CsvWriter: cn.hutool.core.text.csv.CsvWriter writeLine()>/java.io.Writer.write/0	<java.util.TreeMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<org.apache.xerces.dom.NamedNodeMapImpl: void readObject(java.io.ObjectInputStream)>	<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>	<<immutable-context>>	<org.apache.xerces.dom.ObjectFactory: java.lang.Class findProviderClass(java.lang.String,java.lang.ClassLoader,boolean)>/java.lang.ClassLoader.loadClass/0	<org.apache.xerces.dom.NamedNodeMapImpl: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<org.apache.xerces.dom.NamedNodeMapImpl: void readObject(java.io.ObjectInputStream)>	<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>	<<immutable-context>>	<org.apache.xerces.dom.ObjectFactory: java.lang.Class findProviderClass(java.lang.String,java.lang.ClassLoader,boolean)>/java.lang.ClassLoader.loadClass/1	<org.apache.xerces.dom.NamedNodeMapImpl: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<org.apache.xerces.dom.NamedNodeMapImpl: void readObject(java.io.ObjectInputStream)>	<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>	<<immutable-context>>	<org.apache.html.dom.ObjectFactory: java.lang.Class findProviderClass(java.lang.String,java.lang.ClassLoader,boolean)>/java.lang.ClassLoader.loadClass/0	<org.apache.xerces.dom.NamedNodeMapImpl: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<org.apache.xerces.dom.NamedNodeMapImpl: void readObject(java.io.ObjectInputStream)>	<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>	<<immutable-context>>	<org.apache.html.dom.ObjectFactory: java.lang.Class findProviderClass(java.lang.String,java.lang.ClassLoader,boolean)>/java.lang.ClassLoader.loadClass/1	<org.apache.xerces.dom.NamedNodeMapImpl: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentLinkedQueue: void readObject(java.io.ObjectInputStream)>	<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>	<<immutable-context>>	<org.apache.xerces.dom.ObjectFactory: java.lang.Class findProviderClass(java.lang.String,java.lang.ClassLoader,boolean)>/java.lang.ClassLoader.loadClass/0	<java.util.concurrent.ConcurrentLinkedQueue: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentLinkedQueue: void readObject(java.io.ObjectInputStream)>	<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>	<<immutable-context>>	<org.apache.xerces.dom.ObjectFactory: java.lang.Class findProviderClass(java.lang.String,java.lang.ClassLoader,boolean)>/java.lang.ClassLoader.loadClass/1	<java.util.concurrent.ConcurrentLinkedQueue: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentLinkedQueue: void readObject(java.io.ObjectInputStream)>	<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>	<<immutable-context>>	<org.apache.html.dom.ObjectFactory: java.lang.Class findProviderClass(java.lang.String,java.lang.ClassLoader,boolean)>/java.lang.ClassLoader.loadClass/0	<java.util.concurrent.ConcurrentLinkedQueue: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentLinkedQueue: void readObject(java.io.ObjectInputStream)>	<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>	<<immutable-context>>	<org.apache.html.dom.ObjectFactory: java.lang.Class findProviderClass(java.lang.String,java.lang.ClassLoader,boolean)>/java.lang.ClassLoader.loadClass/1	<java.util.concurrent.ConcurrentLinkedQueue: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>	<<immutable-context>>	<org.apache.xerces.dom.ObjectFactory: java.lang.Class findProviderClass(java.lang.String,java.lang.ClassLoader,boolean)>/java.lang.ClassLoader.loadClass/0	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>	<<immutable-context>>	<org.apache.xerces.dom.ObjectFactory: java.lang.Class findProviderClass(java.lang.String,java.lang.ClassLoader,boolean)>/java.lang.ClassLoader.loadClass/1	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>	<<immutable-context>>	<org.apache.html.dom.ObjectFactory: java.lang.Class findProviderClass(java.lang.String,java.lang.ClassLoader,boolean)>/java.lang.ClassLoader.loadClass/0	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>	<<immutable-context>>	<org.apache.html.dom.ObjectFactory: java.lang.Class findProviderClass(java.lang.String,java.lang.ClassLoader,boolean)>/java.lang.ClassLoader.loadClass/1	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.LinkedBlockingQueue: void readObject(java.io.ObjectInputStream)>	<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>	<<immutable-context>>	<org.apache.xerces.dom.ObjectFactory: java.lang.Class findProviderClass(java.lang.String,java.lang.ClassLoader,boolean)>/java.lang.ClassLoader.loadClass/0	<java.util.concurrent.LinkedBlockingQueue: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.LinkedBlockingQueue: void readObject(java.io.ObjectInputStream)>	<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>	<<immutable-context>>	<org.apache.xerces.dom.ObjectFactory: java.lang.Class findProviderClass(java.lang.String,java.lang.ClassLoader,boolean)>/java.lang.ClassLoader.loadClass/1	<java.util.concurrent.LinkedBlockingQueue: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.LinkedBlockingQueue: void readObject(java.io.ObjectInputStream)>	<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>	<<immutable-context>>	<org.apache.html.dom.ObjectFactory: java.lang.Class findProviderClass(java.lang.String,java.lang.ClassLoader,boolean)>/java.lang.ClassLoader.loadClass/0	<java.util.concurrent.LinkedBlockingQueue: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.LinkedBlockingQueue: void readObject(java.io.ObjectInputStream)>	<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>	<<immutable-context>>	<org.apache.html.dom.ObjectFactory: java.lang.Class findProviderClass(java.lang.String,java.lang.ClassLoader,boolean)>/java.lang.ClassLoader.loadClass/1	<java.util.concurrent.LinkedBlockingQueue: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.CopyOnWriteArrayList: void readObject(java.io.ObjectInputStream)>	<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>	<<immutable-context>>	<org.apache.xerces.dom.ObjectFactory: java.lang.Class findProviderClass(java.lang.String,java.lang.ClassLoader,boolean)>/java.lang.ClassLoader.loadClass/0	<java.util.concurrent.CopyOnWriteArrayList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.CopyOnWriteArrayList: void readObject(java.io.ObjectInputStream)>	<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>	<<immutable-context>>	<org.apache.xerces.dom.ObjectFactory: java.lang.Class findProviderClass(java.lang.String,java.lang.ClassLoader,boolean)>/java.lang.ClassLoader.loadClass/1	<java.util.concurrent.CopyOnWriteArrayList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.CopyOnWriteArrayList: void readObject(java.io.ObjectInputStream)>	<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>	<<immutable-context>>	<org.apache.html.dom.ObjectFactory: java.lang.Class findProviderClass(java.lang.String,java.lang.ClassLoader,boolean)>/java.lang.ClassLoader.loadClass/0	<java.util.concurrent.CopyOnWriteArrayList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.CopyOnWriteArrayList: void readObject(java.io.ObjectInputStream)>	<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>	<<immutable-context>>	<org.apache.html.dom.ObjectFactory: java.lang.Class findProviderClass(java.lang.String,java.lang.ClassLoader,boolean)>/java.lang.ClassLoader.loadClass/1	<java.util.concurrent.CopyOnWriteArrayList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>	<<immutable-context>>	<org.apache.xerces.dom.ObjectFactory: java.lang.Class findProviderClass(java.lang.String,java.lang.ClassLoader,boolean)>/java.lang.ClassLoader.loadClass/0	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>	<<immutable-context>>	<org.apache.xerces.dom.ObjectFactory: java.lang.Class findProviderClass(java.lang.String,java.lang.ClassLoader,boolean)>/java.lang.ClassLoader.loadClass/1	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>	<<immutable-context>>	<org.apache.html.dom.ObjectFactory: java.lang.Class findProviderClass(java.lang.String,java.lang.ClassLoader,boolean)>/java.lang.ClassLoader.loadClass/0	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>	<<immutable-context>>	<org.apache.html.dom.ObjectFactory: java.lang.Class findProviderClass(java.lang.String,java.lang.ClassLoader,boolean)>/java.lang.ClassLoader.loadClass/1	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<org.apache.xerces.dom.ParentNode: void readObject(java.io.ObjectInputStream)>	<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>	<<immutable-context>>	<org.apache.xerces.dom.ObjectFactory: java.lang.Class findProviderClass(java.lang.String,java.lang.ClassLoader,boolean)>/java.lang.ClassLoader.loadClass/0	<org.apache.xerces.dom.ParentNode: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<org.apache.xerces.dom.ParentNode: void readObject(java.io.ObjectInputStream)>	<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>	<<immutable-context>>	<org.apache.xerces.dom.ObjectFactory: java.lang.Class findProviderClass(java.lang.String,java.lang.ClassLoader,boolean)>/java.lang.ClassLoader.loadClass/1	<org.apache.xerces.dom.ParentNode: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<org.apache.xerces.dom.ParentNode: void readObject(java.io.ObjectInputStream)>	<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>	<<immutable-context>>	<org.apache.html.dom.ObjectFactory: java.lang.Class findProviderClass(java.lang.String,java.lang.ClassLoader,boolean)>/java.lang.ClassLoader.loadClass/0	<org.apache.xerces.dom.ParentNode: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<org.apache.xerces.dom.ParentNode: void readObject(java.io.ObjectInputStream)>	<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>	<<immutable-context>>	<org.apache.html.dom.ObjectFactory: java.lang.Class findProviderClass(java.lang.String,java.lang.ClassLoader,boolean)>/java.lang.ClassLoader.loadClass/1	<org.apache.xerces.dom.ParentNode: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.HashSet: void readObject(java.io.ObjectInputStream)>	<java.io.FileInputStream: void <init>(java.lang.String)>	<<immutable-context>>	<water.network.SSLSocketChannelFactory: javax.net.ssl.TrustManager[] trustManager()>/java.io.FileInputStream.<init>/0	<java.util.HashSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.HashSet: void readObject(java.io.ObjectInputStream)>	<java.io.FileInputStream: void <init>(java.lang.String)>	<<immutable-context>>	<water.network.SSLSocketChannelFactory: javax.net.ssl.KeyManager[] keyManager()>/java.io.FileInputStream.<init>/0	<java.util.HashSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.HashSet: void readObject(java.io.ObjectInputStream)>	<java.io.FileInputStream: void <init>(java.io.File)>	<<immutable-context>>	<water.network.SSLSocketChannelFactory: void <init>()>/java.io.FileInputStream.<init>/0	<java.util.HashSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.HashSet: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.lang.String)>	<<immutable-context>>	<water.util.Log: java.io.File determineLogDir()>/java.io.File.<init>/3	<java.util.HashSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.HashSet: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.lang.String)>	<<immutable-context>>	<water.network.SSLProperties: java.lang.String expandPath(java.lang.String)>/java.io.File.<init>/0	<java.util.HashSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.HashSet: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.io.File,java.lang.String)>	<<immutable-context>>	<water.util.Log: java.io.File determineLogDir()>/java.io.File.<init>/4	<java.util.HashSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.HashSet: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.io.File,java.lang.String)>	<<immutable-context>>	<water.network.SSLProperties: java.lang.String expandPath(java.lang.String)>/java.io.File.<init>/1	<java.util.HashSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>	<java.io.FileInputStream: void <init>(java.lang.String)>	<<immutable-context>>	<water.network.SSLSocketChannelFactory: javax.net.ssl.TrustManager[] trustManager()>/java.io.FileInputStream.<init>/0	<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>	<java.io.FileInputStream: void <init>(java.lang.String)>	<<immutable-context>>	<water.network.SSLSocketChannelFactory: javax.net.ssl.KeyManager[] keyManager()>/java.io.FileInputStream.<init>/0	<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>	<java.io.FileInputStream: void <init>(java.io.File)>	<<immutable-context>>	<water.network.SSLSocketChannelFactory: void <init>()>/java.io.FileInputStream.<init>/0	<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.lang.String)>	<<immutable-context>>	<water.util.Log: java.io.File determineLogDir()>/java.io.File.<init>/3	<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.lang.String)>	<<immutable-context>>	<water.network.SSLProperties: java.lang.String expandPath(java.lang.String)>/java.io.File.<init>/0	<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.io.File,java.lang.String)>	<<immutable-context>>	<water.util.Log: java.io.File determineLogDir()>/java.io.File.<init>/4	<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.io.File,java.lang.String)>	<<immutable-context>>	<water.network.SSLProperties: java.lang.String expandPath(java.lang.String)>/java.io.File.<init>/1	<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeMap: void readObject(java.io.ObjectInputStream)>	<java.io.FileInputStream: void <init>(java.lang.String)>	<<immutable-context>>	<water.network.SSLSocketChannelFactory: javax.net.ssl.TrustManager[] trustManager()>/java.io.FileInputStream.<init>/0	<java.util.TreeMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeMap: void readObject(java.io.ObjectInputStream)>	<java.io.FileInputStream: void <init>(java.lang.String)>	<<immutable-context>>	<water.network.SSLSocketChannelFactory: javax.net.ssl.KeyManager[] keyManager()>/java.io.FileInputStream.<init>/0	<java.util.TreeMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeMap: void readObject(java.io.ObjectInputStream)>	<java.io.FileInputStream: void <init>(java.io.File)>	<<immutable-context>>	<water.network.SSLSocketChannelFactory: void <init>()>/java.io.FileInputStream.<init>/0	<java.util.TreeMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeMap: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.lang.String)>	<<immutable-context>>	<water.util.Log: java.io.File determineLogDir()>/java.io.File.<init>/3	<java.util.TreeMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeMap: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.lang.String)>	<<immutable-context>>	<water.network.SSLProperties: java.lang.String expandPath(java.lang.String)>/java.io.File.<init>/0	<java.util.TreeMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeMap: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.io.File,java.lang.String)>	<<immutable-context>>	<water.util.Log: java.io.File determineLogDir()>/java.io.File.<init>/4	<java.util.TreeMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeMap: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.io.File,java.lang.String)>	<<immutable-context>>	<water.network.SSLProperties: java.lang.String expandPath(java.lang.String)>/java.io.File.<init>/1	<java.util.TreeMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.PriorityQueue: void readObject(java.io.ObjectInputStream)>	<java.io.FileInputStream: void <init>(java.lang.String)>	<<immutable-context>>	<water.network.SSLSocketChannelFactory: javax.net.ssl.TrustManager[] trustManager()>/java.io.FileInputStream.<init>/0	<java.util.PriorityQueue: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.PriorityQueue: void readObject(java.io.ObjectInputStream)>	<java.io.FileInputStream: void <init>(java.lang.String)>	<<immutable-context>>	<water.network.SSLSocketChannelFactory: javax.net.ssl.KeyManager[] keyManager()>/java.io.FileInputStream.<init>/0	<java.util.PriorityQueue: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.PriorityQueue: void readObject(java.io.ObjectInputStream)>	<java.io.FileInputStream: void <init>(java.io.File)>	<<immutable-context>>	<water.network.SSLSocketChannelFactory: void <init>()>/java.io.FileInputStream.<init>/0	<java.util.PriorityQueue: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.PriorityQueue: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.lang.String)>	<<immutable-context>>	<water.util.Log: java.io.File determineLogDir()>/java.io.File.<init>/3	<java.util.PriorityQueue: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.PriorityQueue: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.lang.String)>	<<immutable-context>>	<water.network.SSLProperties: java.lang.String expandPath(java.lang.String)>/java.io.File.<init>/0	<java.util.PriorityQueue: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.PriorityQueue: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.io.File,java.lang.String)>	<<immutable-context>>	<water.util.Log: java.io.File determineLogDir()>/java.io.File.<init>/4	<java.util.PriorityQueue: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.PriorityQueue: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.io.File,java.lang.String)>	<<immutable-context>>	<water.network.SSLProperties: java.lang.String expandPath(java.lang.String)>/java.io.File.<init>/1	<java.util.PriorityQueue: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentLinkedQueue: void readObject(java.io.ObjectInputStream)>	<java.io.FileInputStream: void <init>(java.lang.String)>	<<immutable-context>>	<water.network.SSLSocketChannelFactory: javax.net.ssl.TrustManager[] trustManager()>/java.io.FileInputStream.<init>/0	<java.util.concurrent.ConcurrentLinkedQueue: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentLinkedQueue: void readObject(java.io.ObjectInputStream)>	<java.io.FileInputStream: void <init>(java.lang.String)>	<<immutable-context>>	<water.network.SSLSocketChannelFactory: javax.net.ssl.KeyManager[] keyManager()>/java.io.FileInputStream.<init>/0	<java.util.concurrent.ConcurrentLinkedQueue: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentLinkedQueue: void readObject(java.io.ObjectInputStream)>	<java.io.FileInputStream: void <init>(java.io.File)>	<<immutable-context>>	<water.network.SSLSocketChannelFactory: void <init>()>/java.io.FileInputStream.<init>/0	<java.util.concurrent.ConcurrentLinkedQueue: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentLinkedQueue: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.lang.String)>	<<immutable-context>>	<water.util.Log: java.io.File determineLogDir()>/java.io.File.<init>/3	<java.util.concurrent.ConcurrentLinkedQueue: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentLinkedQueue: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.lang.String)>	<<immutable-context>>	<water.network.SSLProperties: java.lang.String expandPath(java.lang.String)>/java.io.File.<init>/0	<java.util.concurrent.ConcurrentLinkedQueue: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentLinkedQueue: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.io.File,java.lang.String)>	<<immutable-context>>	<water.util.Log: java.io.File determineLogDir()>/java.io.File.<init>/4	<java.util.concurrent.ConcurrentLinkedQueue: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentLinkedQueue: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.io.File,java.lang.String)>	<<immutable-context>>	<water.network.SSLProperties: java.lang.String expandPath(java.lang.String)>/java.io.File.<init>/1	<java.util.concurrent.ConcurrentLinkedQueue: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>	<java.io.FileInputStream: void <init>(java.lang.String)>	<<immutable-context>>	<water.network.SSLSocketChannelFactory: javax.net.ssl.TrustManager[] trustManager()>/java.io.FileInputStream.<init>/0	<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>	<java.io.FileInputStream: void <init>(java.lang.String)>	<<immutable-context>>	<water.network.SSLSocketChannelFactory: javax.net.ssl.KeyManager[] keyManager()>/java.io.FileInputStream.<init>/0	<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>	<java.io.FileInputStream: void <init>(java.io.File)>	<<immutable-context>>	<water.network.SSLSocketChannelFactory: void <init>()>/java.io.FileInputStream.<init>/0	<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.lang.String)>	<<immutable-context>>	<water.util.Log: java.io.File determineLogDir()>/java.io.File.<init>/3	<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.lang.String)>	<<immutable-context>>	<water.network.SSLProperties: java.lang.String expandPath(java.lang.String)>/java.io.File.<init>/0	<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.io.File,java.lang.String)>	<<immutable-context>>	<water.util.Log: java.io.File determineLogDir()>/java.io.File.<init>/4	<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.io.File,java.lang.String)>	<<immutable-context>>	<water.network.SSLProperties: java.lang.String expandPath(java.lang.String)>/java.io.File.<init>/1	<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentSkipListMap: void readObject(java.io.ObjectInputStream)>	<java.io.FileInputStream: void <init>(java.lang.String)>	<<immutable-context>>	<water.network.SSLSocketChannelFactory: javax.net.ssl.TrustManager[] trustManager()>/java.io.FileInputStream.<init>/0	<java.util.concurrent.ConcurrentSkipListMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentSkipListMap: void readObject(java.io.ObjectInputStream)>	<java.io.FileInputStream: void <init>(java.lang.String)>	<<immutable-context>>	<water.network.SSLSocketChannelFactory: javax.net.ssl.KeyManager[] keyManager()>/java.io.FileInputStream.<init>/0	<java.util.concurrent.ConcurrentSkipListMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentSkipListMap: void readObject(java.io.ObjectInputStream)>	<java.io.FileInputStream: void <init>(java.io.File)>	<<immutable-context>>	<water.network.SSLSocketChannelFactory: void <init>()>/java.io.FileInputStream.<init>/0	<java.util.concurrent.ConcurrentSkipListMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentSkipListMap: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.lang.String)>	<<immutable-context>>	<water.util.Log: java.io.File determineLogDir()>/java.io.File.<init>/3	<java.util.concurrent.ConcurrentSkipListMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentSkipListMap: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.lang.String)>	<<immutable-context>>	<water.network.SSLProperties: java.lang.String expandPath(java.lang.String)>/java.io.File.<init>/0	<java.util.concurrent.ConcurrentSkipListMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentSkipListMap: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.io.File,java.lang.String)>	<<immutable-context>>	<water.util.Log: java.io.File determineLogDir()>/java.io.File.<init>/4	<java.util.concurrent.ConcurrentSkipListMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentSkipListMap: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.io.File,java.lang.String)>	<<immutable-context>>	<water.network.SSLProperties: java.lang.String expandPath(java.lang.String)>/java.io.File.<init>/1	<java.util.concurrent.ConcurrentSkipListMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.LinkedBlockingQueue: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void print(java.lang.String)>	<<immutable-context>>	<org.gradle.internal.exceptions.DefaultMultiCauseException: void printSingleCauseStackTrace(java.io.PrintWriter)>/java.io.PrintWriter.print/0	<java.util.concurrent.LinkedBlockingQueue: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.LinkedBlockingQueue: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void print(java.lang.String)>	<<immutable-context>>	<org.gradle.internal.impldep.org.apache.commons.lang.exception.NestableDelegate: void printStackTrace(java.io.PrintWriter)>/java.io.PrintWriter.print/0	<java.util.concurrent.LinkedBlockingQueue: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.LinkedBlockingQueue: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void println(java.lang.String)>	<<immutable-context>>	<org.gradle.internal.impldep.org.apache.commons.lang.exception.NestableDelegate: void printStackTrace(java.io.PrintWriter)>/java.io.PrintWriter.println/0	<java.util.concurrent.LinkedBlockingQueue: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.LinkedBlockingQueue: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.lang.String)>	<<immutable-context>>	<org.gradle.internal.classloader.ClasspathUtil: java.io.File getClasspathForResource(java.net.URL,java.lang.String)>/java.io.File.<init>/0	<java.util.concurrent.LinkedBlockingQueue: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.LinkedBlockingQueue: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.lang.String)>	<<immutable-context>>	<org.gradle.internal.classloader.ClasspathUtil: java.io.File getClasspathForResource(java.net.URL,java.lang.String)>/java.io.File.<init>/1	<java.util.concurrent.LinkedBlockingQueue: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.LinkedBlockingQueue: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.lang.String)>	<<immutable-context>>	<org.gradle.initialization.BuildLayoutParameters: java.io.File findGradleUserHomeDir()>/java.io.File.<init>/0	<java.util.concurrent.LinkedBlockingQueue: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.LinkedBlockingQueue: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.lang.String)>	<<immutable-context>>	<org.gradle.initialization.BuildLayoutParameters: void <clinit>()>/java.io.File.<init>/0	<java.util.concurrent.LinkedBlockingQueue: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void print(java.lang.String)>	<<immutable-context>>	<org.gradle.internal.exceptions.DefaultMultiCauseException: void printSingleCauseStackTrace(java.io.PrintWriter)>/java.io.PrintWriter.print/0	<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void print(java.lang.String)>	<<immutable-context>>	<org.gradle.internal.impldep.org.apache.commons.lang.exception.NestableDelegate: void printStackTrace(java.io.PrintWriter)>/java.io.PrintWriter.print/0	<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void println(java.lang.String)>	<<immutable-context>>	<org.gradle.internal.impldep.org.apache.commons.lang.exception.NestableDelegate: void printStackTrace(java.io.PrintWriter)>/java.io.PrintWriter.println/0	<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.lang.String)>	<<immutable-context>>	<org.gradle.internal.classloader.ClasspathUtil: java.io.File getClasspathForResource(java.net.URL,java.lang.String)>/java.io.File.<init>/0	<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.lang.String)>	<<immutable-context>>	<org.gradle.internal.classloader.ClasspathUtil: java.io.File getClasspathForResource(java.net.URL,java.lang.String)>/java.io.File.<init>/1	<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.lang.String)>	<<immutable-context>>	<org.gradle.initialization.BuildLayoutParameters: java.io.File findGradleUserHomeDir()>/java.io.File.<init>/0	<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.lang.String)>	<<immutable-context>>	<org.gradle.initialization.BuildLayoutParameters: void <clinit>()>/java.io.File.<init>/0	<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<org.gradle.internal.impldep.com.google.common.collect.ImmutableRangeSet: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void print(java.lang.String)>	<<immutable-context>>	<org.gradle.internal.exceptions.DefaultMultiCauseException: void printSingleCauseStackTrace(java.io.PrintWriter)>/java.io.PrintWriter.print/0	<org.gradle.internal.impldep.com.google.common.collect.ImmutableRangeSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<org.gradle.internal.impldep.com.google.common.collect.ImmutableRangeSet: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void print(java.lang.String)>	<<immutable-context>>	<org.gradle.internal.impldep.org.apache.commons.lang.exception.NestableDelegate: void printStackTrace(java.io.PrintWriter)>/java.io.PrintWriter.print/0	<org.gradle.internal.impldep.com.google.common.collect.ImmutableRangeSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<org.gradle.internal.impldep.com.google.common.collect.ImmutableRangeSet: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void println(java.lang.String)>	<<immutable-context>>	<org.gradle.internal.impldep.org.apache.commons.lang.exception.NestableDelegate: void printStackTrace(java.io.PrintWriter)>/java.io.PrintWriter.println/0	<org.gradle.internal.impldep.com.google.common.collect.ImmutableRangeSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<org.gradle.internal.impldep.com.google.common.collect.ImmutableRangeSet: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.lang.String)>	<<immutable-context>>	<org.gradle.internal.classloader.ClasspathUtil: java.io.File getClasspathForResource(java.net.URL,java.lang.String)>/java.io.File.<init>/0	<org.gradle.internal.impldep.com.google.common.collect.ImmutableRangeSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<org.gradle.internal.impldep.com.google.common.collect.ImmutableRangeSet: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.lang.String)>	<<immutable-context>>	<org.gradle.internal.classloader.ClasspathUtil: java.io.File getClasspathForResource(java.net.URL,java.lang.String)>/java.io.File.<init>/1	<org.gradle.internal.impldep.com.google.common.collect.ImmutableRangeSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<org.gradle.internal.impldep.com.google.common.collect.ImmutableRangeSet: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.lang.String)>	<<immutable-context>>	<org.gradle.initialization.BuildLayoutParameters: java.io.File findGradleUserHomeDir()>/java.io.File.<init>/0	<org.gradle.internal.impldep.com.google.common.collect.ImmutableRangeSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<org.gradle.internal.impldep.com.google.common.collect.ImmutableRangeSet: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.lang.String)>	<<immutable-context>>	<org.gradle.initialization.BuildLayoutParameters: void <clinit>()>/java.io.File.<init>/0	<org.gradle.internal.impldep.com.google.common.collect.ImmutableRangeSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<org.gradle.internal.impldep.com.google.common.collect.MapMakerInternalMap: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void print(java.lang.String)>	<<immutable-context>>	<org.gradle.internal.exceptions.DefaultMultiCauseException: void printSingleCauseStackTrace(java.io.PrintWriter)>/java.io.PrintWriter.print/0	<org.gradle.internal.impldep.com.google.common.collect.MapMakerInternalMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<org.gradle.internal.impldep.com.google.common.collect.MapMakerInternalMap: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void print(java.lang.String)>	<<immutable-context>>	<org.gradle.internal.impldep.org.apache.commons.lang.exception.NestableDelegate: void printStackTrace(java.io.PrintWriter)>/java.io.PrintWriter.print/0	<org.gradle.internal.impldep.com.google.common.collect.MapMakerInternalMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<org.gradle.internal.impldep.com.google.common.collect.MapMakerInternalMap: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void println(java.lang.String)>	<<immutable-context>>	<org.gradle.internal.impldep.org.apache.commons.lang.exception.NestableDelegate: void printStackTrace(java.io.PrintWriter)>/java.io.PrintWriter.println/0	<org.gradle.internal.impldep.com.google.common.collect.MapMakerInternalMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<org.gradle.internal.impldep.com.google.common.collect.MapMakerInternalMap: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.lang.String)>	<<immutable-context>>	<org.gradle.internal.classloader.ClasspathUtil: java.io.File getClasspathForResource(java.net.URL,java.lang.String)>/java.io.File.<init>/0	<org.gradle.internal.impldep.com.google.common.collect.MapMakerInternalMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<org.gradle.internal.impldep.com.google.common.collect.MapMakerInternalMap: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.lang.String)>	<<immutable-context>>	<org.gradle.internal.classloader.ClasspathUtil: java.io.File getClasspathForResource(java.net.URL,java.lang.String)>/java.io.File.<init>/1	<org.gradle.internal.impldep.com.google.common.collect.MapMakerInternalMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<org.gradle.internal.impldep.com.google.common.collect.MapMakerInternalMap: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.lang.String)>	<<immutable-context>>	<org.gradle.initialization.BuildLayoutParameters: java.io.File findGradleUserHomeDir()>/java.io.File.<init>/0	<org.gradle.internal.impldep.com.google.common.collect.MapMakerInternalMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<org.gradle.internal.impldep.com.google.common.collect.MapMakerInternalMap: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.lang.String)>	<<immutable-context>>	<org.gradle.initialization.BuildLayoutParameters: void <clinit>()>/java.io.File.<init>/0	<org.gradle.internal.impldep.com.google.common.collect.MapMakerInternalMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.HashMap: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void print(java.lang.String)>	<<immutable-context>>	<org.gradle.internal.exceptions.DefaultMultiCauseException: void printSingleCauseStackTrace(java.io.PrintWriter)>/java.io.PrintWriter.print/0	<java.util.HashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.HashMap: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void print(java.lang.String)>	<<immutable-context>>	<org.gradle.internal.impldep.org.apache.commons.lang.exception.NestableDelegate: void printStackTrace(java.io.PrintWriter)>/java.io.PrintWriter.print/0	<java.util.HashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.HashMap: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void println(java.lang.String)>	<<immutable-context>>	<org.gradle.internal.impldep.org.apache.commons.lang.exception.NestableDelegate: void printStackTrace(java.io.PrintWriter)>/java.io.PrintWriter.println/0	<java.util.HashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.HashMap: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.lang.String)>	<<immutable-context>>	<org.gradle.internal.classloader.ClasspathUtil: java.io.File getClasspathForResource(java.net.URL,java.lang.String)>/java.io.File.<init>/0	<java.util.HashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.HashMap: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.lang.String)>	<<immutable-context>>	<org.gradle.internal.classloader.ClasspathUtil: java.io.File getClasspathForResource(java.net.URL,java.lang.String)>/java.io.File.<init>/1	<java.util.HashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.HashMap: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.lang.String)>	<<immutable-context>>	<org.gradle.initialization.BuildLayoutParameters: java.io.File findGradleUserHomeDir()>/java.io.File.<init>/0	<java.util.HashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.HashMap: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.lang.String)>	<<immutable-context>>	<org.gradle.initialization.BuildLayoutParameters: void <clinit>()>/java.io.File.<init>/0	<java.util.HashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void print(java.lang.String)>	<<immutable-context>>	<org.gradle.internal.exceptions.DefaultMultiCauseException: void printSingleCauseStackTrace(java.io.PrintWriter)>/java.io.PrintWriter.print/0	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void print(java.lang.String)>	<<immutable-context>>	<org.gradle.internal.impldep.org.apache.commons.lang.exception.NestableDelegate: void printStackTrace(java.io.PrintWriter)>/java.io.PrintWriter.print/0	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void println(java.lang.String)>	<<immutable-context>>	<org.gradle.internal.impldep.org.apache.commons.lang.exception.NestableDelegate: void printStackTrace(java.io.PrintWriter)>/java.io.PrintWriter.println/0	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.lang.String)>	<<immutable-context>>	<org.gradle.internal.classloader.ClasspathUtil: java.io.File getClasspathForResource(java.net.URL,java.lang.String)>/java.io.File.<init>/0	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.lang.String)>	<<immutable-context>>	<org.gradle.internal.classloader.ClasspathUtil: java.io.File getClasspathForResource(java.net.URL,java.lang.String)>/java.io.File.<init>/1	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.lang.String)>	<<immutable-context>>	<org.gradle.initialization.BuildLayoutParameters: java.io.File findGradleUserHomeDir()>/java.io.File.<init>/0	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.lang.String)>	<<immutable-context>>	<org.gradle.initialization.BuildLayoutParameters: void <clinit>()>/java.io.File.<init>/0	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<water.nbhm.NonBlockingSetInt: void readObject(java.io.ObjectInputStream)>	<java.io.FileInputStream: void <init>(java.lang.String)>	<<immutable-context>>	<water.network.SSLSocketChannelFactory: javax.net.ssl.TrustManager[] trustManager()>/java.io.FileInputStream.<init>/0	<water.nbhm.NonBlockingSetInt: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<water.nbhm.NonBlockingSetInt: void readObject(java.io.ObjectInputStream)>	<java.io.FileInputStream: void <init>(java.lang.String)>	<<immutable-context>>	<water.network.SSLSocketChannelFactory: javax.net.ssl.KeyManager[] keyManager()>/java.io.FileInputStream.<init>/0	<water.nbhm.NonBlockingSetInt: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<water.nbhm.NonBlockingSetInt: void readObject(java.io.ObjectInputStream)>	<java.io.FileInputStream: void <init>(java.io.File)>	<<immutable-context>>	<water.network.SSLSocketChannelFactory: void <init>()>/java.io.FileInputStream.<init>/0	<water.nbhm.NonBlockingSetInt: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<water.nbhm.NonBlockingSetInt: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.lang.String)>	<<immutable-context>>	<water.util.Log: java.io.File determineLogDir()>/java.io.File.<init>/3	<water.nbhm.NonBlockingSetInt: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<water.nbhm.NonBlockingSetInt: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.lang.String)>	<<immutable-context>>	<water.network.SSLProperties: java.lang.String expandPath(java.lang.String)>/java.io.File.<init>/0	<water.nbhm.NonBlockingSetInt: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<water.nbhm.NonBlockingSetInt: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.io.File,java.lang.String)>	<<immutable-context>>	<water.util.Log: java.io.File determineLogDir()>/java.io.File.<init>/4	<water.nbhm.NonBlockingSetInt: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<water.nbhm.NonBlockingSetInt: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.io.File,java.lang.String)>	<<immutable-context>>	<water.network.SSLProperties: java.lang.String expandPath(java.lang.String)>/java.io.File.<init>/1	<water.nbhm.NonBlockingSetInt: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>	<java.io.FileInputStream: void <init>(java.lang.String)>	<<immutable-context>>	<water.network.SSLSocketChannelFactory: javax.net.ssl.TrustManager[] trustManager()>/java.io.FileInputStream.<init>/0	<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>	<java.io.FileInputStream: void <init>(java.lang.String)>	<<immutable-context>>	<water.network.SSLSocketChannelFactory: javax.net.ssl.KeyManager[] keyManager()>/java.io.FileInputStream.<init>/0	<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>	<java.io.FileInputStream: void <init>(java.io.File)>	<<immutable-context>>	<water.network.SSLSocketChannelFactory: void <init>()>/java.io.FileInputStream.<init>/0	<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.lang.String)>	<<immutable-context>>	<water.util.Log: java.io.File determineLogDir()>/java.io.File.<init>/3	<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.lang.String)>	<<immutable-context>>	<water.network.SSLProperties: java.lang.String expandPath(java.lang.String)>/java.io.File.<init>/0	<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.io.File,java.lang.String)>	<<immutable-context>>	<water.util.Log: java.io.File determineLogDir()>/java.io.File.<init>/4	<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.io.File,java.lang.String)>	<<immutable-context>>	<water.network.SSLProperties: java.lang.String expandPath(java.lang.String)>/java.io.File.<init>/1	<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.LinkedBlockingQueue: void readObject(java.io.ObjectInputStream)>	<java.io.FileInputStream: void <init>(java.lang.String)>	<<immutable-context>>	<water.network.SSLSocketChannelFactory: javax.net.ssl.TrustManager[] trustManager()>/java.io.FileInputStream.<init>/0	<java.util.concurrent.LinkedBlockingQueue: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.LinkedBlockingQueue: void readObject(java.io.ObjectInputStream)>	<java.io.FileInputStream: void <init>(java.lang.String)>	<<immutable-context>>	<water.network.SSLSocketChannelFactory: javax.net.ssl.KeyManager[] keyManager()>/java.io.FileInputStream.<init>/0	<java.util.concurrent.LinkedBlockingQueue: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.LinkedBlockingQueue: void readObject(java.io.ObjectInputStream)>	<java.io.FileInputStream: void <init>(java.io.File)>	<<immutable-context>>	<water.network.SSLSocketChannelFactory: void <init>()>/java.io.FileInputStream.<init>/0	<java.util.concurrent.LinkedBlockingQueue: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.LinkedBlockingQueue: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.lang.String)>	<<immutable-context>>	<water.util.Log: java.io.File determineLogDir()>/java.io.File.<init>/3	<java.util.concurrent.LinkedBlockingQueue: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.LinkedBlockingQueue: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.lang.String)>	<<immutable-context>>	<water.network.SSLProperties: java.lang.String expandPath(java.lang.String)>/java.io.File.<init>/0	<java.util.concurrent.LinkedBlockingQueue: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.LinkedBlockingQueue: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.io.File,java.lang.String)>	<<immutable-context>>	<water.util.Log: java.io.File determineLogDir()>/java.io.File.<init>/4	<java.util.concurrent.LinkedBlockingQueue: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.LinkedBlockingQueue: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.io.File,java.lang.String)>	<<immutable-context>>	<water.network.SSLProperties: java.lang.String expandPath(java.lang.String)>/java.io.File.<init>/1	<java.util.concurrent.LinkedBlockingQueue: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>	<java.io.FileInputStream: void <init>(java.lang.String)>	<<immutable-context>>	<water.network.SSLSocketChannelFactory: javax.net.ssl.TrustManager[] trustManager()>/java.io.FileInputStream.<init>/0	<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>	<java.io.FileInputStream: void <init>(java.lang.String)>	<<immutable-context>>	<water.network.SSLSocketChannelFactory: javax.net.ssl.KeyManager[] keyManager()>/java.io.FileInputStream.<init>/0	<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>	<java.io.FileInputStream: void <init>(java.io.File)>	<<immutable-context>>	<water.network.SSLSocketChannelFactory: void <init>()>/java.io.FileInputStream.<init>/0	<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.lang.String)>	<<immutable-context>>	<water.util.Log: java.io.File determineLogDir()>/java.io.File.<init>/3	<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.lang.String)>	<<immutable-context>>	<water.network.SSLProperties: java.lang.String expandPath(java.lang.String)>/java.io.File.<init>/0	<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.io.File,java.lang.String)>	<<immutable-context>>	<water.util.Log: java.io.File determineLogDir()>/java.io.File.<init>/4	<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.io.File,java.lang.String)>	<<immutable-context>>	<water.network.SSLProperties: java.lang.String expandPath(java.lang.String)>/java.io.File.<init>/1	<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<water.nbhm.NonBlockingHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.FileInputStream: void <init>(java.lang.String)>	<<immutable-context>>	<water.network.SSLSocketChannelFactory: javax.net.ssl.TrustManager[] trustManager()>/java.io.FileInputStream.<init>/0	<water.nbhm.NonBlockingHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<water.nbhm.NonBlockingHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.FileInputStream: void <init>(java.lang.String)>	<<immutable-context>>	<water.network.SSLSocketChannelFactory: javax.net.ssl.KeyManager[] keyManager()>/java.io.FileInputStream.<init>/0	<water.nbhm.NonBlockingHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<water.nbhm.NonBlockingHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.FileInputStream: void <init>(java.io.File)>	<<immutable-context>>	<water.network.SSLSocketChannelFactory: void <init>()>/java.io.FileInputStream.<init>/0	<water.nbhm.NonBlockingHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<water.nbhm.NonBlockingHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.lang.String)>	<<immutable-context>>	<water.util.Log: java.io.File determineLogDir()>/java.io.File.<init>/3	<water.nbhm.NonBlockingHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<water.nbhm.NonBlockingHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.lang.String)>	<<immutable-context>>	<water.network.SSLProperties: java.lang.String expandPath(java.lang.String)>/java.io.File.<init>/0	<water.nbhm.NonBlockingHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<water.nbhm.NonBlockingHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.io.File,java.lang.String)>	<<immutable-context>>	<water.util.Log: java.io.File determineLogDir()>/java.io.File.<init>/4	<water.nbhm.NonBlockingHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<water.nbhm.NonBlockingHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.io.File,java.lang.String)>	<<immutable-context>>	<water.network.SSLProperties: java.lang.String expandPath(java.lang.String)>/java.io.File.<init>/1	<water.nbhm.NonBlockingHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.FileInputStream: void <init>(java.lang.String)>	<<immutable-context>>	<water.network.SSLSocketChannelFactory: javax.net.ssl.TrustManager[] trustManager()>/java.io.FileInputStream.<init>/0	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.FileInputStream: void <init>(java.lang.String)>	<<immutable-context>>	<water.network.SSLSocketChannelFactory: javax.net.ssl.KeyManager[] keyManager()>/java.io.FileInputStream.<init>/0	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.FileInputStream: void <init>(java.io.File)>	<<immutable-context>>	<water.network.SSLSocketChannelFactory: void <init>()>/java.io.FileInputStream.<init>/0	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.lang.String)>	<<immutable-context>>	<water.util.Log: java.io.File determineLogDir()>/java.io.File.<init>/3	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.lang.String)>	<<immutable-context>>	<water.network.SSLProperties: java.lang.String expandPath(java.lang.String)>/java.io.File.<init>/0	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.io.File,java.lang.String)>	<<immutable-context>>	<water.util.Log: java.io.File determineLogDir()>/java.io.File.<init>/4	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.io.File,java.lang.String)>	<<immutable-context>>	<water.network.SSLProperties: java.lang.String expandPath(java.lang.String)>/java.io.File.<init>/1	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<com.google.common.collect.AbstractMapBasedMultiset: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<org.apache.dubbo.config.AbstractConfig: java.lang.String toString()>/java.lang.reflect.Method.invoke/0	<com.google.common.collect.AbstractMapBasedMultiset: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<com.google.common.collect.AbstractMapBasedMultiset: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<org.apache.dubbo.config.AbstractConfig: boolean equals(java.lang.Object)>/java.lang.reflect.Method.invoke/0	<com.google.common.collect.AbstractMapBasedMultiset: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<com.google.common.collect.AbstractMapBasedMultiset: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<org.apache.dubbo.config.AbstractConfig: boolean equals(java.lang.Object)>/java.lang.reflect.Method.invoke/1	<com.google.common.collect.AbstractMapBasedMultiset: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<com.google.common.collect.AbstractMapBasedMultiset: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<org.apache.dubbo.config.AbstractConfig: int hashCode()>/java.lang.reflect.Method.invoke/0	<com.google.common.collect.AbstractMapBasedMultiset: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<com.google.common.collect.AbstractMapBasedMultiset: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<org.apache.dubbo.common.extension.ExtensionLoader: java.lang.Object injectExtension(java.lang.Object)>/java.lang.reflect.Method.invoke/0	<com.google.common.collect.AbstractMapBasedMultiset: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<com.google.common.collect.AbstractMapBasedMultiset: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>	<<immutable-context>>	<org.apache.dubbo.common.beans.support.InstantiationStrategy: java.lang.Object instantiate(java.lang.Class)>/java.lang.reflect.Constructor.newInstance/0	<com.google.common.collect.AbstractMapBasedMultiset: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<com.google.common.collect.AbstractMapBasedMultiset: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void print(java.lang.String)>	<<immutable-context>>	<org.apache.dubbo.common.utils.StringUtils: java.lang.String toString(java.lang.Throwable)>/java.io.PrintWriter.print/0	<com.google.common.collect.AbstractMapBasedMultiset: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<com.google.common.collect.AbstractMapBasedMultiset: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void print(java.lang.String)>	<<immutable-context>>	<org.apache.dubbo.common.utils.StringUtils: java.lang.String toString(java.lang.Throwable)>/java.io.PrintWriter.print/1	<com.google.common.collect.AbstractMapBasedMultiset: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<com.google.common.collect.AbstractMapBasedMultiset: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.lang.String)>	<<immutable-context>>	<org.apache.dubbo.common.utils.ConfigUtils: boolean checkFileNameExist(java.lang.String)>/java.io.File.<init>/0	<com.google.common.collect.AbstractMapBasedMultiset: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<com.google.common.collect.AbstractMapBasedMultiset: void readObject(java.io.ObjectInputStream)>	<java.io.FileInputStream: void <init>(java.lang.String)>	<<immutable-context>>	<org.apache.dubbo.common.utils.ConfigUtils: java.lang.String loadMigrationRule(java.util.Set,java.lang.String)>/java.io.FileInputStream.<init>/0	<com.google.common.collect.AbstractMapBasedMultiset: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.LinkedBlockingDeque: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<org.apache.dubbo.config.AbstractConfig: java.lang.String toString()>/java.lang.reflect.Method.invoke/0	<java.util.concurrent.LinkedBlockingDeque: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.LinkedBlockingDeque: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<org.apache.dubbo.config.AbstractConfig: boolean equals(java.lang.Object)>/java.lang.reflect.Method.invoke/0	<java.util.concurrent.LinkedBlockingDeque: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.LinkedBlockingDeque: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<org.apache.dubbo.config.AbstractConfig: boolean equals(java.lang.Object)>/java.lang.reflect.Method.invoke/1	<java.util.concurrent.LinkedBlockingDeque: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.LinkedBlockingDeque: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<org.apache.dubbo.config.AbstractConfig: int hashCode()>/java.lang.reflect.Method.invoke/0	<java.util.concurrent.LinkedBlockingDeque: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.LinkedBlockingDeque: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<org.apache.dubbo.common.extension.ExtensionLoader: java.lang.Object injectExtension(java.lang.Object)>/java.lang.reflect.Method.invoke/0	<java.util.concurrent.LinkedBlockingDeque: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.LinkedBlockingDeque: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>	<<immutable-context>>	<org.apache.dubbo.common.beans.support.InstantiationStrategy: java.lang.Object instantiate(java.lang.Class)>/java.lang.reflect.Constructor.newInstance/0	<java.util.concurrent.LinkedBlockingDeque: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.LinkedBlockingDeque: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void print(java.lang.String)>	<<immutable-context>>	<org.apache.dubbo.common.utils.StringUtils: java.lang.String toString(java.lang.Throwable)>/java.io.PrintWriter.print/0	<java.util.concurrent.LinkedBlockingDeque: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.LinkedBlockingDeque: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void print(java.lang.String)>	<<immutable-context>>	<org.apache.dubbo.common.utils.StringUtils: java.lang.String toString(java.lang.Throwable)>/java.io.PrintWriter.print/1	<java.util.concurrent.LinkedBlockingDeque: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.LinkedBlockingDeque: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.lang.String)>	<<immutable-context>>	<org.apache.dubbo.common.utils.ConfigUtils: boolean checkFileNameExist(java.lang.String)>/java.io.File.<init>/0	<java.util.concurrent.LinkedBlockingDeque: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.LinkedBlockingDeque: void readObject(java.io.ObjectInputStream)>	<java.io.FileInputStream: void <init>(java.lang.String)>	<<immutable-context>>	<org.apache.dubbo.common.utils.ConfigUtils: java.lang.String loadMigrationRule(java.util.Set,java.lang.String)>/java.io.FileInputStream.<init>/0	<java.util.concurrent.LinkedBlockingDeque: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<org.gradle.internal.impldep.com.google.common.collect.LinkedHashMultiset: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void print(java.lang.String)>	<<immutable-context>>	<org.gradle.internal.exceptions.DefaultMultiCauseException: void printSingleCauseStackTrace(java.io.PrintWriter)>/java.io.PrintWriter.print/0	<org.gradle.internal.impldep.com.google.common.collect.LinkedHashMultiset: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<org.gradle.internal.impldep.com.google.common.collect.LinkedHashMultiset: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void print(java.lang.String)>	<<immutable-context>>	<org.gradle.internal.impldep.org.apache.commons.lang.exception.NestableDelegate: void printStackTrace(java.io.PrintWriter)>/java.io.PrintWriter.print/0	<org.gradle.internal.impldep.com.google.common.collect.LinkedHashMultiset: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<org.gradle.internal.impldep.com.google.common.collect.LinkedHashMultiset: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void println(java.lang.String)>	<<immutable-context>>	<org.gradle.internal.impldep.org.apache.commons.lang.exception.NestableDelegate: void printStackTrace(java.io.PrintWriter)>/java.io.PrintWriter.println/0	<org.gradle.internal.impldep.com.google.common.collect.LinkedHashMultiset: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<org.gradle.internal.impldep.com.google.common.collect.LinkedHashMultiset: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.lang.String)>	<<immutable-context>>	<org.gradle.internal.classloader.ClasspathUtil: java.io.File getClasspathForResource(java.net.URL,java.lang.String)>/java.io.File.<init>/0	<org.gradle.internal.impldep.com.google.common.collect.LinkedHashMultiset: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<org.gradle.internal.impldep.com.google.common.collect.LinkedHashMultiset: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.lang.String)>	<<immutable-context>>	<org.gradle.internal.classloader.ClasspathUtil: java.io.File getClasspathForResource(java.net.URL,java.lang.String)>/java.io.File.<init>/1	<org.gradle.internal.impldep.com.google.common.collect.LinkedHashMultiset: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<org.gradle.internal.impldep.com.google.common.collect.LinkedHashMultiset: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.lang.String)>	<<immutable-context>>	<org.gradle.initialization.BuildLayoutParameters: java.io.File findGradleUserHomeDir()>/java.io.File.<init>/0	<org.gradle.internal.impldep.com.google.common.collect.LinkedHashMultiset: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<org.gradle.internal.impldep.com.google.common.collect.LinkedHashMultiset: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.lang.String)>	<<immutable-context>>	<org.gradle.initialization.BuildLayoutParameters: void <clinit>()>/java.io.File.<init>/0	<org.gradle.internal.impldep.com.google.common.collect.LinkedHashMultiset: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<org.gradle.internal.impldep.com.google.common.collect.EmptyContiguousSet: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void print(java.lang.String)>	<<immutable-context>>	<org.gradle.internal.exceptions.DefaultMultiCauseException: void printSingleCauseStackTrace(java.io.PrintWriter)>/java.io.PrintWriter.print/0	<org.gradle.internal.impldep.com.google.common.collect.EmptyContiguousSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<org.gradle.internal.impldep.com.google.common.collect.EmptyContiguousSet: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void print(java.lang.String)>	<<immutable-context>>	<org.gradle.internal.impldep.org.apache.commons.lang.exception.NestableDelegate: void printStackTrace(java.io.PrintWriter)>/java.io.PrintWriter.print/0	<org.gradle.internal.impldep.com.google.common.collect.EmptyContiguousSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<org.gradle.internal.impldep.com.google.common.collect.EmptyContiguousSet: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void println(java.lang.String)>	<<immutable-context>>	<org.gradle.internal.impldep.org.apache.commons.lang.exception.NestableDelegate: void printStackTrace(java.io.PrintWriter)>/java.io.PrintWriter.println/0	<org.gradle.internal.impldep.com.google.common.collect.EmptyContiguousSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<org.gradle.internal.impldep.com.google.common.collect.EmptyContiguousSet: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.lang.String)>	<<immutable-context>>	<org.gradle.internal.classloader.ClasspathUtil: java.io.File getClasspathForResource(java.net.URL,java.lang.String)>/java.io.File.<init>/0	<org.gradle.internal.impldep.com.google.common.collect.EmptyContiguousSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<org.gradle.internal.impldep.com.google.common.collect.EmptyContiguousSet: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.lang.String)>	<<immutable-context>>	<org.gradle.internal.classloader.ClasspathUtil: java.io.File getClasspathForResource(java.net.URL,java.lang.String)>/java.io.File.<init>/1	<org.gradle.internal.impldep.com.google.common.collect.EmptyContiguousSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<org.gradle.internal.impldep.com.google.common.collect.EmptyContiguousSet: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.lang.String)>	<<immutable-context>>	<org.gradle.initialization.BuildLayoutParameters: java.io.File findGradleUserHomeDir()>/java.io.File.<init>/0	<org.gradle.internal.impldep.com.google.common.collect.EmptyContiguousSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<org.gradle.internal.impldep.com.google.common.collect.EmptyContiguousSet: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.lang.String)>	<<immutable-context>>	<org.gradle.initialization.BuildLayoutParameters: void <clinit>()>/java.io.File.<init>/0	<org.gradle.internal.impldep.com.google.common.collect.EmptyContiguousSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<org.gradle.internal.impldep.com.google.common.collect.ImmutableRangeMap: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void print(java.lang.String)>	<<immutable-context>>	<org.gradle.internal.exceptions.DefaultMultiCauseException: void printSingleCauseStackTrace(java.io.PrintWriter)>/java.io.PrintWriter.print/0	<org.gradle.internal.impldep.com.google.common.collect.ImmutableRangeMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<org.gradle.internal.impldep.com.google.common.collect.ImmutableRangeMap: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void print(java.lang.String)>	<<immutable-context>>	<org.gradle.internal.impldep.org.apache.commons.lang.exception.NestableDelegate: void printStackTrace(java.io.PrintWriter)>/java.io.PrintWriter.print/0	<org.gradle.internal.impldep.com.google.common.collect.ImmutableRangeMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<org.gradle.internal.impldep.com.google.common.collect.ImmutableRangeMap: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void println(java.lang.String)>	<<immutable-context>>	<org.gradle.internal.impldep.org.apache.commons.lang.exception.NestableDelegate: void printStackTrace(java.io.PrintWriter)>/java.io.PrintWriter.println/0	<org.gradle.internal.impldep.com.google.common.collect.ImmutableRangeMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<org.gradle.internal.impldep.com.google.common.collect.ImmutableRangeMap: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.lang.String)>	<<immutable-context>>	<org.gradle.internal.classloader.ClasspathUtil: java.io.File getClasspathForResource(java.net.URL,java.lang.String)>/java.io.File.<init>/0	<org.gradle.internal.impldep.com.google.common.collect.ImmutableRangeMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<org.gradle.internal.impldep.com.google.common.collect.ImmutableRangeMap: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.lang.String)>	<<immutable-context>>	<org.gradle.internal.classloader.ClasspathUtil: java.io.File getClasspathForResource(java.net.URL,java.lang.String)>/java.io.File.<init>/1	<org.gradle.internal.impldep.com.google.common.collect.ImmutableRangeMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<org.gradle.internal.impldep.com.google.common.collect.ImmutableRangeMap: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.lang.String)>	<<immutable-context>>	<org.gradle.initialization.BuildLayoutParameters: java.io.File findGradleUserHomeDir()>/java.io.File.<init>/0	<org.gradle.internal.impldep.com.google.common.collect.ImmutableRangeMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<org.gradle.internal.impldep.com.google.common.collect.ImmutableRangeMap: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.lang.String)>	<<immutable-context>>	<org.gradle.initialization.BuildLayoutParameters: void <clinit>()>/java.io.File.<init>/0	<org.gradle.internal.impldep.com.google.common.collect.ImmutableRangeMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.PriorityQueue: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void print(java.lang.String)>	<<immutable-context>>	<org.gradle.internal.exceptions.DefaultMultiCauseException: void printSingleCauseStackTrace(java.io.PrintWriter)>/java.io.PrintWriter.print/0	<java.util.PriorityQueue: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.PriorityQueue: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void print(java.lang.String)>	<<immutable-context>>	<org.gradle.internal.impldep.org.apache.commons.lang.exception.NestableDelegate: void printStackTrace(java.io.PrintWriter)>/java.io.PrintWriter.print/0	<java.util.PriorityQueue: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.PriorityQueue: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void println(java.lang.String)>	<<immutable-context>>	<org.gradle.internal.impldep.org.apache.commons.lang.exception.NestableDelegate: void printStackTrace(java.io.PrintWriter)>/java.io.PrintWriter.println/0	<java.util.PriorityQueue: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.PriorityQueue: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.lang.String)>	<<immutable-context>>	<org.gradle.internal.classloader.ClasspathUtil: java.io.File getClasspathForResource(java.net.URL,java.lang.String)>/java.io.File.<init>/0	<java.util.PriorityQueue: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.PriorityQueue: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.lang.String)>	<<immutable-context>>	<org.gradle.internal.classloader.ClasspathUtil: java.io.File getClasspathForResource(java.net.URL,java.lang.String)>/java.io.File.<init>/1	<java.util.PriorityQueue: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.PriorityQueue: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.lang.String)>	<<immutable-context>>	<org.gradle.initialization.BuildLayoutParameters: java.io.File findGradleUserHomeDir()>/java.io.File.<init>/0	<java.util.PriorityQueue: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.PriorityQueue: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.lang.String)>	<<immutable-context>>	<org.gradle.initialization.BuildLayoutParameters: void <clinit>()>/java.io.File.<init>/0	<java.util.PriorityQueue: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<org.gradle.internal.impldep.com.google.common.collect.ImmutableSortedMap: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void print(java.lang.String)>	<<immutable-context>>	<org.gradle.internal.exceptions.DefaultMultiCauseException: void printSingleCauseStackTrace(java.io.PrintWriter)>/java.io.PrintWriter.print/0	<org.gradle.internal.impldep.com.google.common.collect.ImmutableSortedMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<org.gradle.internal.impldep.com.google.common.collect.ImmutableSortedMap: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void print(java.lang.String)>	<<immutable-context>>	<org.gradle.internal.impldep.org.apache.commons.lang.exception.NestableDelegate: void printStackTrace(java.io.PrintWriter)>/java.io.PrintWriter.print/0	<org.gradle.internal.impldep.com.google.common.collect.ImmutableSortedMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<org.gradle.internal.impldep.com.google.common.collect.ImmutableSortedMap: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void println(java.lang.String)>	<<immutable-context>>	<org.gradle.internal.impldep.org.apache.commons.lang.exception.NestableDelegate: void printStackTrace(java.io.PrintWriter)>/java.io.PrintWriter.println/0	<org.gradle.internal.impldep.com.google.common.collect.ImmutableSortedMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<org.gradle.internal.impldep.com.google.common.collect.ImmutableSortedMap: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.lang.String)>	<<immutable-context>>	<org.gradle.internal.classloader.ClasspathUtil: java.io.File getClasspathForResource(java.net.URL,java.lang.String)>/java.io.File.<init>/0	<org.gradle.internal.impldep.com.google.common.collect.ImmutableSortedMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<org.gradle.internal.impldep.com.google.common.collect.ImmutableSortedMap: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.lang.String)>	<<immutable-context>>	<org.gradle.internal.classloader.ClasspathUtil: java.io.File getClasspathForResource(java.net.URL,java.lang.String)>/java.io.File.<init>/1	<org.gradle.internal.impldep.com.google.common.collect.ImmutableSortedMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<org.gradle.internal.impldep.com.google.common.collect.ImmutableSortedMap: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.lang.String)>	<<immutable-context>>	<org.gradle.initialization.BuildLayoutParameters: java.io.File findGradleUserHomeDir()>/java.io.File.<init>/0	<org.gradle.internal.impldep.com.google.common.collect.ImmutableSortedMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<org.gradle.internal.impldep.com.google.common.collect.ImmutableSortedMap: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.lang.String)>	<<immutable-context>>	<org.gradle.initialization.BuildLayoutParameters: void <clinit>()>/java.io.File.<init>/0	<org.gradle.internal.impldep.com.google.common.collect.ImmutableSortedMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<datahub.shaded.com.google.common.hash.BloomFilter: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<datahub.shaded.org.apache.commons.lang.enums.ValuedEnum: int getValueInOtherClassLoader(java.lang.Object)>/java.lang.reflect.Method.invoke/0	<datahub.shaded.com.google.common.hash.BloomFilter: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<datahub.shaded.com.google.common.hash.BloomFilter: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<datahub.shaded.org.apache.commons.lang.enum.Enum: java.lang.String getNameInOtherClassLoader(java.lang.Object)>/java.lang.reflect.Method.invoke/0	<datahub.shaded.com.google.common.hash.BloomFilter: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<datahub.shaded.com.google.common.hash.BloomFilter: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<datahub.shaded.org.apache.commons.lang.enums.Enum: java.lang.String getNameInOtherClassLoader(java.lang.Object)>/java.lang.reflect.Method.invoke/0	<datahub.shaded.com.google.common.hash.BloomFilter: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<datahub.shaded.javassist.tools.reflect.ClassMetaobject: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<datahub.shaded.org.apache.commons.lang.enum.Enum: java.lang.String getNameInOtherClassLoader(java.lang.Object)>/java.lang.reflect.Method.invoke/0	<datahub.shaded.javassist.tools.reflect.ClassMetaobject: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<datahub.shaded.javassist.tools.reflect.ClassMetaobject: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<datahub.shaded.org.apache.commons.lang.enums.Enum: java.lang.String getNameInOtherClassLoader(java.lang.Object)>/java.lang.reflect.Method.invoke/0	<datahub.shaded.javassist.tools.reflect.ClassMetaobject: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<datahub.shaded.javassist.tools.reflect.ClassMetaobject: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>	<<immutable-context>>	<datahub.shaded.javassist.tools.reflect.ClassMetaobject: java.lang.Object newInstance(java.lang.Object[])>/java.lang.reflect.Constructor.newInstance/0	<datahub.shaded.javassist.tools.reflect.ClassMetaobject: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<datahub.shaded.org.springframework.aop.framework.AdvisedSupport: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<datahub.shaded.org.apache.commons.lang.enums.ValuedEnum: int getValueInOtherClassLoader(java.lang.Object)>/java.lang.reflect.Method.invoke/0	<datahub.shaded.org.springframework.aop.framework.AdvisedSupport: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<datahub.shaded.org.springframework.aop.framework.AdvisedSupport: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<datahub.shaded.org.apache.commons.lang.enum.Enum: java.lang.String getNameInOtherClassLoader(java.lang.Object)>/java.lang.reflect.Method.invoke/0	<datahub.shaded.org.springframework.aop.framework.AdvisedSupport: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<datahub.shaded.org.springframework.aop.framework.AdvisedSupport: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<datahub.shaded.org.apache.commons.lang.enums.Enum: java.lang.String getNameInOtherClassLoader(java.lang.Object)>/java.lang.reflect.Method.invoke/0	<datahub.shaded.org.springframework.aop.framework.AdvisedSupport: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<datahub.shaded.com.google.common.collect.ImmutableSortedMap: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<datahub.shaded.org.apache.commons.lang.enums.ValuedEnum: int getValueInOtherClassLoader(java.lang.Object)>/java.lang.reflect.Method.invoke/0	<datahub.shaded.com.google.common.collect.ImmutableSortedMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<datahub.shaded.com.google.common.collect.ImmutableSortedMap: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<datahub.shaded.org.apache.commons.lang.enum.Enum: java.lang.String getNameInOtherClassLoader(java.lang.Object)>/java.lang.reflect.Method.invoke/0	<datahub.shaded.com.google.common.collect.ImmutableSortedMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<datahub.shaded.com.google.common.collect.ImmutableSortedMap: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<datahub.shaded.org.apache.commons.lang.enums.Enum: java.lang.String getNameInOtherClassLoader(java.lang.Object)>/java.lang.reflect.Method.invoke/0	<datahub.shaded.com.google.common.collect.ImmutableSortedMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<datahub.shaded.com.google.common.collect.TreeMultiset: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<datahub.shaded.org.apache.commons.lang.enums.ValuedEnum: int getValueInOtherClassLoader(java.lang.Object)>/java.lang.reflect.Method.invoke/0	<datahub.shaded.com.google.common.collect.TreeMultiset: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<datahub.shaded.com.google.common.collect.TreeMultiset: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<datahub.shaded.org.apache.commons.lang.enum.Enum: java.lang.String getNameInOtherClassLoader(java.lang.Object)>/java.lang.reflect.Method.invoke/0	<datahub.shaded.com.google.common.collect.TreeMultiset: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<datahub.shaded.com.google.common.collect.TreeMultiset: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<datahub.shaded.org.apache.commons.lang.enums.Enum: java.lang.String getNameInOtherClassLoader(java.lang.Object)>/java.lang.reflect.Method.invoke/0	<datahub.shaded.com.google.common.collect.TreeMultiset: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.PriorityQueue: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<org.dom4j.bean.BeanMetaData: java.lang.Object getData(int,java.lang.Object)>/java.lang.reflect.Method.invoke/0	<java.util.PriorityQueue: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.PriorityQueue: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<org.dom4j.bean.BeanMetaData: void setData(int,java.lang.Object,java.lang.Object)>/java.lang.reflect.Method.invoke/0	<java.util.PriorityQueue: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.PriorityQueue: void readObject(java.io.ObjectInputStream)>	<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>	<<immutable-context>>	<org.dom4j.util.SimpleSingleton: void reset()>/java.lang.ClassLoader.loadClass/0	<java.util.PriorityQueue: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.LinkedBlockingQueue: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<org.dom4j.bean.BeanMetaData: java.lang.Object getData(int,java.lang.Object)>/java.lang.reflect.Method.invoke/0	<java.util.concurrent.LinkedBlockingQueue: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.LinkedBlockingQueue: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<org.dom4j.bean.BeanMetaData: void setData(int,java.lang.Object,java.lang.Object)>/java.lang.reflect.Method.invoke/0	<java.util.concurrent.LinkedBlockingQueue: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.LinkedBlockingQueue: void readObject(java.io.ObjectInputStream)>	<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>	<<immutable-context>>	<org.dom4j.util.SimpleSingleton: void reset()>/java.lang.ClassLoader.loadClass/0	<java.util.concurrent.LinkedBlockingQueue: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.SynchronousQueue: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<org.dom4j.bean.BeanMetaData: java.lang.Object getData(int,java.lang.Object)>/java.lang.reflect.Method.invoke/0	<java.util.concurrent.SynchronousQueue: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.SynchronousQueue: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<org.dom4j.bean.BeanMetaData: void setData(int,java.lang.Object,java.lang.Object)>/java.lang.reflect.Method.invoke/0	<java.util.concurrent.SynchronousQueue: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.SynchronousQueue: void readObject(java.io.ObjectInputStream)>	<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>	<<immutable-context>>	<org.dom4j.util.SimpleSingleton: void reset()>/java.lang.ClassLoader.loadClass/0	<java.util.concurrent.SynchronousQueue: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentLinkedQueue: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<org.dom4j.bean.BeanMetaData: java.lang.Object getData(int,java.lang.Object)>/java.lang.reflect.Method.invoke/0	<java.util.concurrent.ConcurrentLinkedQueue: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentLinkedQueue: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<org.dom4j.bean.BeanMetaData: void setData(int,java.lang.Object,java.lang.Object)>/java.lang.reflect.Method.invoke/0	<java.util.concurrent.ConcurrentLinkedQueue: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentLinkedQueue: void readObject(java.io.ObjectInputStream)>	<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>	<<immutable-context>>	<org.dom4j.util.SimpleSingleton: void reset()>/java.lang.ClassLoader.loadClass/0	<java.util.concurrent.ConcurrentLinkedQueue: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.HashSet: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<org.dom4j.bean.BeanMetaData: java.lang.Object getData(int,java.lang.Object)>/java.lang.reflect.Method.invoke/0	<java.util.HashSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.HashSet: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<org.dom4j.bean.BeanMetaData: void setData(int,java.lang.Object,java.lang.Object)>/java.lang.reflect.Method.invoke/0	<java.util.HashSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.HashSet: void readObject(java.io.ObjectInputStream)>	<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>	<<immutable-context>>	<org.dom4j.util.SimpleSingleton: void reset()>/java.lang.ClassLoader.loadClass/0	<java.util.HashSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.HashMap: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<org.dom4j.bean.BeanMetaData: java.lang.Object getData(int,java.lang.Object)>/java.lang.reflect.Method.invoke/0	<java.util.HashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.HashMap: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<org.dom4j.bean.BeanMetaData: void setData(int,java.lang.Object,java.lang.Object)>/java.lang.reflect.Method.invoke/0	<java.util.HashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.HashMap: void readObject(java.io.ObjectInputStream)>	<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>	<<immutable-context>>	<org.dom4j.util.SimpleSingleton: void reset()>/java.lang.ClassLoader.loadClass/0	<java.util.HashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<com.alibaba.nacos.shaded.com.google.common.collect.CompactHashSet: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<com.alibaba.nacos.shaded.io.grpc.netty.shaded.io.netty.util.internal.PlatformDependent0: void <clinit>()>/java.lang.reflect.Method.invoke/0	<com.alibaba.nacos.shaded.com.google.common.collect.CompactHashSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<com.alibaba.nacos.shaded.com.google.common.collect.CompactHashSet: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<com.alibaba.nacos.shaded.io.grpc.netty.shaded.io.netty.util.internal.CleanerJava9$1: java.lang.Object run()>/java.lang.reflect.Method.invoke/0	<com.alibaba.nacos.shaded.com.google.common.collect.CompactHashSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<com.alibaba.nacos.shaded.com.google.common.collect.CompactHashSet: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>	<<immutable-context>>	<com.alibaba.nacos.shaded.io.grpc.netty.shaded.io.netty.util.internal.PlatformDependent0: void <clinit>()>/java.lang.reflect.Constructor.newInstance/0	<com.alibaba.nacos.shaded.com.google.common.collect.CompactHashSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<com.alibaba.nacos.shaded.com.google.common.collect.CompactHashSet: void readObject(java.io.ObjectInputStream)>	<java.io.FileReader: void <init>(java.io.File)>	<<immutable-context>>	<com.alibaba.nacos.shaded.io.grpc.netty.shaded.io.netty.util.NetUtil$SoMaxConnAction: java.lang.Integer run()>/java.io.FileReader.<init>/0	<com.alibaba.nacos.shaded.com.google.common.collect.CompactHashSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<com.alibaba.nacos.shaded.com.google.common.collect.CompactHashSet: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.lang.String)>	<<immutable-context>>	<com.alibaba.nacos.shaded.io.grpc.netty.shaded.io.netty.util.internal.PlatformDependent: void addFilesystemOsClassifiers(java.util.Set,java.util.Set)>/java.io.File.<init>/0	<com.alibaba.nacos.shaded.com.google.common.collect.CompactHashSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<com.alibaba.nacos.shaded.com.google.common.collect.CompactHashSet: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.lang.String)>	<<immutable-context>>	<com.alibaba.nacos.shaded.io.grpc.netty.shaded.io.netty.util.internal.PlatformDependent: java.io.File toDirectory(java.lang.String)>/java.io.File.<init>/0	<com.alibaba.nacos.shaded.com.google.common.collect.CompactHashSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<com.alibaba.nacos.shaded.com.google.common.collect.CompactHashSet: void readObject(java.io.ObjectInputStream)>	<java.io.FileInputStream: void <init>(java.io.File)>	<<immutable-context>>	<com.alibaba.nacos.shaded.io.grpc.netty.shaded.io.netty.util.internal.PlatformDependent$4: java.lang.Boolean run()>/java.io.FileInputStream.<init>/0	<com.alibaba.nacos.shaded.com.google.common.collect.CompactHashSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.HashMap: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<com.alibaba.nacos.shaded.io.grpc.netty.shaded.io.netty.util.internal.PlatformDependent0: void <clinit>()>/java.lang.reflect.Method.invoke/0	<java.util.HashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.HashMap: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<com.alibaba.nacos.shaded.io.grpc.netty.shaded.io.netty.util.internal.CleanerJava9$1: java.lang.Object run()>/java.lang.reflect.Method.invoke/0	<java.util.HashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.HashMap: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>	<<immutable-context>>	<com.alibaba.nacos.shaded.io.grpc.netty.shaded.io.netty.util.internal.PlatformDependent0: void <clinit>()>/java.lang.reflect.Constructor.newInstance/0	<java.util.HashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.HashMap: void readObject(java.io.ObjectInputStream)>	<java.io.FileReader: void <init>(java.io.File)>	<<immutable-context>>	<com.alibaba.nacos.shaded.io.grpc.netty.shaded.io.netty.util.NetUtil$SoMaxConnAction: java.lang.Integer run()>/java.io.FileReader.<init>/0	<java.util.HashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.HashMap: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.lang.String)>	<<immutable-context>>	<com.alibaba.nacos.shaded.io.grpc.netty.shaded.io.netty.util.internal.PlatformDependent: void addFilesystemOsClassifiers(java.util.Set,java.util.Set)>/java.io.File.<init>/0	<java.util.HashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.HashMap: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.lang.String)>	<<immutable-context>>	<com.alibaba.nacos.shaded.io.grpc.netty.shaded.io.netty.util.internal.PlatformDependent: java.io.File toDirectory(java.lang.String)>/java.io.File.<init>/0	<java.util.HashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.HashMap: void readObject(java.io.ObjectInputStream)>	<java.io.FileInputStream: void <init>(java.io.File)>	<<immutable-context>>	<com.alibaba.nacos.shaded.io.grpc.netty.shaded.io.netty.util.internal.PlatformDependent$4: java.lang.Boolean run()>/java.io.FileInputStream.<init>/0	<java.util.HashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<com.alibaba.nacos.shaded.io.grpc.netty.shaded.io.netty.util.internal.PlatformDependent0: void <clinit>()>/java.lang.reflect.Method.invoke/0	<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<com.alibaba.nacos.shaded.io.grpc.netty.shaded.io.netty.util.internal.CleanerJava9$1: java.lang.Object run()>/java.lang.reflect.Method.invoke/0	<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>	<<immutable-context>>	<com.alibaba.nacos.shaded.io.grpc.netty.shaded.io.netty.util.internal.PlatformDependent0: void <clinit>()>/java.lang.reflect.Constructor.newInstance/0	<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>	<java.io.FileReader: void <init>(java.io.File)>	<<immutable-context>>	<com.alibaba.nacos.shaded.io.grpc.netty.shaded.io.netty.util.NetUtil$SoMaxConnAction: java.lang.Integer run()>/java.io.FileReader.<init>/0	<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.lang.String)>	<<immutable-context>>	<com.alibaba.nacos.shaded.io.grpc.netty.shaded.io.netty.util.internal.PlatformDependent: void addFilesystemOsClassifiers(java.util.Set,java.util.Set)>/java.io.File.<init>/0	<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.lang.String)>	<<immutable-context>>	<com.alibaba.nacos.shaded.io.grpc.netty.shaded.io.netty.util.internal.PlatformDependent: java.io.File toDirectory(java.lang.String)>/java.io.File.<init>/0	<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>	<java.io.FileInputStream: void <init>(java.io.File)>	<<immutable-context>>	<com.alibaba.nacos.shaded.io.grpc.netty.shaded.io.netty.util.internal.PlatformDependent$4: java.lang.Boolean run()>/java.io.FileInputStream.<init>/0	<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<com.alibaba.nacos.shaded.com.google.common.collect.ImmutableSetMultimap: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<com.alibaba.nacos.shaded.io.grpc.netty.shaded.io.netty.util.internal.PlatformDependent0: void <clinit>()>/java.lang.reflect.Method.invoke/0	<com.alibaba.nacos.shaded.com.google.common.collect.ImmutableSetMultimap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<com.alibaba.nacos.shaded.com.google.common.collect.ImmutableSetMultimap: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<com.alibaba.nacos.shaded.io.grpc.netty.shaded.io.netty.util.internal.CleanerJava9$1: java.lang.Object run()>/java.lang.reflect.Method.invoke/0	<com.alibaba.nacos.shaded.com.google.common.collect.ImmutableSetMultimap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<com.alibaba.nacos.shaded.com.google.common.collect.ImmutableSetMultimap: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>	<<immutable-context>>	<com.alibaba.nacos.shaded.io.grpc.netty.shaded.io.netty.util.internal.PlatformDependent0: void <clinit>()>/java.lang.reflect.Constructor.newInstance/0	<com.alibaba.nacos.shaded.com.google.common.collect.ImmutableSetMultimap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<com.alibaba.nacos.shaded.com.google.common.collect.ImmutableSetMultimap: void readObject(java.io.ObjectInputStream)>	<java.io.FileReader: void <init>(java.io.File)>	<<immutable-context>>	<com.alibaba.nacos.shaded.io.grpc.netty.shaded.io.netty.util.NetUtil$SoMaxConnAction: java.lang.Integer run()>/java.io.FileReader.<init>/0	<com.alibaba.nacos.shaded.com.google.common.collect.ImmutableSetMultimap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<com.alibaba.nacos.shaded.com.google.common.collect.ImmutableSetMultimap: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.lang.String)>	<<immutable-context>>	<com.alibaba.nacos.shaded.io.grpc.netty.shaded.io.netty.util.internal.PlatformDependent: void addFilesystemOsClassifiers(java.util.Set,java.util.Set)>/java.io.File.<init>/0	<com.alibaba.nacos.shaded.com.google.common.collect.ImmutableSetMultimap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<com.alibaba.nacos.shaded.com.google.common.collect.ImmutableSetMultimap: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.lang.String)>	<<immutable-context>>	<com.alibaba.nacos.shaded.io.grpc.netty.shaded.io.netty.util.internal.PlatformDependent: java.io.File toDirectory(java.lang.String)>/java.io.File.<init>/0	<com.alibaba.nacos.shaded.com.google.common.collect.ImmutableSetMultimap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<com.alibaba.nacos.shaded.com.google.common.collect.ImmutableSetMultimap: void readObject(java.io.ObjectInputStream)>	<java.io.FileInputStream: void <init>(java.io.File)>	<<immutable-context>>	<com.alibaba.nacos.shaded.io.grpc.netty.shaded.io.netty.util.internal.PlatformDependent$4: java.lang.Boolean run()>/java.io.FileInputStream.<init>/0	<com.alibaba.nacos.shaded.com.google.common.collect.ImmutableSetMultimap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<com.alibaba.nacos.shaded.io.grpc.netty.shaded.io.netty.util.internal.PlatformDependent0: void <clinit>()>/java.lang.reflect.Method.invoke/0	<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<com.alibaba.nacos.shaded.io.grpc.netty.shaded.io.netty.util.internal.CleanerJava9$1: java.lang.Object run()>/java.lang.reflect.Method.invoke/0	<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>	<<immutable-context>>	<com.alibaba.nacos.shaded.io.grpc.netty.shaded.io.netty.util.internal.PlatformDependent0: void <clinit>()>/java.lang.reflect.Constructor.newInstance/0	<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>	<java.io.FileReader: void <init>(java.io.File)>	<<immutable-context>>	<com.alibaba.nacos.shaded.io.grpc.netty.shaded.io.netty.util.NetUtil$SoMaxConnAction: java.lang.Integer run()>/java.io.FileReader.<init>/0	<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.lang.String)>	<<immutable-context>>	<com.alibaba.nacos.shaded.io.grpc.netty.shaded.io.netty.util.internal.PlatformDependent: void addFilesystemOsClassifiers(java.util.Set,java.util.Set)>/java.io.File.<init>/0	<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.lang.String)>	<<immutable-context>>	<com.alibaba.nacos.shaded.io.grpc.netty.shaded.io.netty.util.internal.PlatformDependent: java.io.File toDirectory(java.lang.String)>/java.io.File.<init>/0	<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>	<java.io.FileInputStream: void <init>(java.io.File)>	<<immutable-context>>	<com.alibaba.nacos.shaded.io.grpc.netty.shaded.io.netty.util.internal.PlatformDependent$4: java.lang.Boolean run()>/java.io.FileInputStream.<init>/0	<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<com.alibaba.nacos.shaded.io.grpc.netty.shaded.io.netty.util.internal.PlatformDependent0: void <clinit>()>/java.lang.reflect.Method.invoke/0	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<com.alibaba.nacos.shaded.io.grpc.netty.shaded.io.netty.util.internal.CleanerJava9$1: java.lang.Object run()>/java.lang.reflect.Method.invoke/0	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>	<<immutable-context>>	<com.alibaba.nacos.shaded.io.grpc.netty.shaded.io.netty.util.internal.PlatformDependent0: void <clinit>()>/java.lang.reflect.Constructor.newInstance/0	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.FileReader: void <init>(java.io.File)>	<<immutable-context>>	<com.alibaba.nacos.shaded.io.grpc.netty.shaded.io.netty.util.NetUtil$SoMaxConnAction: java.lang.Integer run()>/java.io.FileReader.<init>/0	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.lang.String)>	<<immutable-context>>	<com.alibaba.nacos.shaded.io.grpc.netty.shaded.io.netty.util.internal.PlatformDependent: void addFilesystemOsClassifiers(java.util.Set,java.util.Set)>/java.io.File.<init>/0	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.lang.String)>	<<immutable-context>>	<com.alibaba.nacos.shaded.io.grpc.netty.shaded.io.netty.util.internal.PlatformDependent: java.io.File toDirectory(java.lang.String)>/java.io.File.<init>/0	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.FileInputStream: void <init>(java.io.File)>	<<immutable-context>>	<com.alibaba.nacos.shaded.io.grpc.netty.shaded.io.netty.util.internal.PlatformDependent$4: java.lang.Boolean run()>/java.io.FileInputStream.<init>/0	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<datahub.shaded.com.google.common.collect.EmptyContiguousSet: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<datahub.shaded.org.apache.commons.lang.enums.ValuedEnum: int getValueInOtherClassLoader(java.lang.Object)>/java.lang.reflect.Method.invoke/0	<datahub.shaded.com.google.common.collect.EmptyContiguousSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<datahub.shaded.com.google.common.collect.EmptyContiguousSet: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<datahub.shaded.org.apache.commons.lang.enum.Enum: java.lang.String getNameInOtherClassLoader(java.lang.Object)>/java.lang.reflect.Method.invoke/0	<datahub.shaded.com.google.common.collect.EmptyContiguousSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<datahub.shaded.com.google.common.collect.EmptyContiguousSet: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<datahub.shaded.org.apache.commons.lang.enums.Enum: java.lang.String getNameInOtherClassLoader(java.lang.Object)>/java.lang.reflect.Method.invoke/0	<datahub.shaded.com.google.common.collect.EmptyContiguousSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<datahub.shaded.com.google.common.collect.EnumMultiset: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<datahub.shaded.org.apache.commons.lang.enums.ValuedEnum: int getValueInOtherClassLoader(java.lang.Object)>/java.lang.reflect.Method.invoke/0	<datahub.shaded.com.google.common.collect.EnumMultiset: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<datahub.shaded.com.google.common.collect.EnumMultiset: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<datahub.shaded.org.apache.commons.lang.enum.Enum: java.lang.String getNameInOtherClassLoader(java.lang.Object)>/java.lang.reflect.Method.invoke/0	<datahub.shaded.com.google.common.collect.EnumMultiset: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<datahub.shaded.com.google.common.collect.EnumMultiset: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<datahub.shaded.org.apache.commons.lang.enums.Enum: java.lang.String getNameInOtherClassLoader(java.lang.Object)>/java.lang.reflect.Method.invoke/0	<datahub.shaded.com.google.common.collect.EnumMultiset: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<datahub.shaded.com.google.common.collect.EnumBiMap: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<datahub.shaded.org.apache.commons.lang.enums.ValuedEnum: int getValueInOtherClassLoader(java.lang.Object)>/java.lang.reflect.Method.invoke/0	<datahub.shaded.com.google.common.collect.EnumBiMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<datahub.shaded.com.google.common.collect.EnumBiMap: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<datahub.shaded.org.apache.commons.lang.enum.Enum: java.lang.String getNameInOtherClassLoader(java.lang.Object)>/java.lang.reflect.Method.invoke/0	<datahub.shaded.com.google.common.collect.EnumBiMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<datahub.shaded.com.google.common.collect.EnumBiMap: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<datahub.shaded.org.apache.commons.lang.enums.Enum: java.lang.String getNameInOtherClassLoader(java.lang.Object)>/java.lang.reflect.Method.invoke/0	<datahub.shaded.com.google.common.collect.EnumBiMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.PriorityQueue: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<datahub.shaded.org.apache.commons.lang.enums.ValuedEnum: int getValueInOtherClassLoader(java.lang.Object)>/java.lang.reflect.Method.invoke/0	<java.util.PriorityQueue: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.PriorityQueue: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<datahub.shaded.org.apache.commons.lang.enum.Enum: java.lang.String getNameInOtherClassLoader(java.lang.Object)>/java.lang.reflect.Method.invoke/0	<java.util.PriorityQueue: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.PriorityQueue: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<datahub.shaded.org.apache.commons.lang.enums.Enum: java.lang.String getNameInOtherClassLoader(java.lang.Object)>/java.lang.reflect.Method.invoke/0	<java.util.PriorityQueue: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<datahub.shaded.org.springframework.aop.support.IntroductionInfoSupport: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<datahub.shaded.org.apache.commons.lang.enums.ValuedEnum: int getValueInOtherClassLoader(java.lang.Object)>/java.lang.reflect.Method.invoke/0	<datahub.shaded.org.springframework.aop.support.IntroductionInfoSupport: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<datahub.shaded.org.springframework.aop.support.IntroductionInfoSupport: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<datahub.shaded.org.apache.commons.lang.enum.Enum: java.lang.String getNameInOtherClassLoader(java.lang.Object)>/java.lang.reflect.Method.invoke/0	<datahub.shaded.org.springframework.aop.support.IntroductionInfoSupport: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<datahub.shaded.org.springframework.aop.support.IntroductionInfoSupport: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<datahub.shaded.org.apache.commons.lang.enums.Enum: java.lang.String getNameInOtherClassLoader(java.lang.Object)>/java.lang.reflect.Method.invoke/0	<datahub.shaded.org.springframework.aop.support.IntroductionInfoSupport: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentLinkedQueue: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.lang.String)>	<<immutable-context>>	<org.parosproxy.paros.Constant: void initializeFilesAndDirectories(org.zaproxy.zap.control.ControlOverrides)>/java.io.File.<init>/7	<java.util.concurrent.ConcurrentLinkedQueue: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentLinkedQueue: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.lang.String)>	<<immutable-context>>	<org.parosproxy.paros.Constant: void upgradeFrom2_0_0(org.apache.commons.configuration.XMLConfiguration)>/java.io.File.<init>/0	<java.util.concurrent.ConcurrentLinkedQueue: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentLinkedQueue: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.lang.String)>	<<immutable-context>>	<org.parosproxy.paros.Constant: void upgradeFrom2_0_0(org.apache.commons.configuration.XMLConfiguration)>/java.io.File.<init>/1	<java.util.concurrent.ConcurrentLinkedQueue: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentLinkedQueue: void readObject(java.io.ObjectInputStream)>	<java.io.FileInputStream: void <init>(java.io.File)>	<<immutable-context>>	<org.parosproxy.paros.model.FileCopier: void copyLegacy(java.io.File,java.io.File)>/java.io.FileInputStream.<init>/0	<java.util.concurrent.ConcurrentLinkedQueue: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentLinkedQueue: void readObject(java.io.ObjectInputStream)>	<java.io.FileInputStream: void <init>(java.io.File)>	<<immutable-context>>	<org.parosproxy.paros.model.FileCopier: void copyNIO(java.io.File,java.io.File)>/java.io.FileInputStream.<init>/0	<java.util.concurrent.ConcurrentLinkedQueue: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentLinkedQueue: void readObject(java.io.ObjectInputStream)>	<java.io.FileOutputStream: void <init>(java.io.File)>	<<immutable-context>>	<org.parosproxy.paros.model.FileCopier: void copyLegacy(java.io.File,java.io.File)>/java.io.FileOutputStream.<init>/0	<java.util.concurrent.ConcurrentLinkedQueue: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentLinkedQueue: void readObject(java.io.ObjectInputStream)>	<java.io.FileOutputStream: void <init>(java.io.File)>	<<immutable-context>>	<org.parosproxy.paros.model.FileCopier: void copyNIO(java.io.File,java.io.File)>/java.io.FileOutputStream.<init>/0	<java.util.concurrent.ConcurrentLinkedQueue: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<org.apache.commons.collections.map.ReferenceMap: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.lang.String)>	<<immutable-context>>	<org.parosproxy.paros.Constant: void initializeFilesAndDirectories(org.zaproxy.zap.control.ControlOverrides)>/java.io.File.<init>/7	<org.apache.commons.collections.map.ReferenceMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<org.apache.commons.collections.map.ReferenceMap: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.lang.String)>	<<immutable-context>>	<org.parosproxy.paros.Constant: void upgradeFrom2_0_0(org.apache.commons.configuration.XMLConfiguration)>/java.io.File.<init>/0	<org.apache.commons.collections.map.ReferenceMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<org.apache.commons.collections.map.ReferenceMap: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.lang.String)>	<<immutable-context>>	<org.parosproxy.paros.Constant: void upgradeFrom2_0_0(org.apache.commons.configuration.XMLConfiguration)>/java.io.File.<init>/1	<org.apache.commons.collections.map.ReferenceMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<org.apache.commons.collections.map.ReferenceMap: void readObject(java.io.ObjectInputStream)>	<java.io.FileInputStream: void <init>(java.io.File)>	<<immutable-context>>	<org.parosproxy.paros.model.FileCopier: void copyLegacy(java.io.File,java.io.File)>/java.io.FileInputStream.<init>/0	<org.apache.commons.collections.map.ReferenceMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<org.apache.commons.collections.map.ReferenceMap: void readObject(java.io.ObjectInputStream)>	<java.io.FileInputStream: void <init>(java.io.File)>	<<immutable-context>>	<org.parosproxy.paros.model.FileCopier: void copyNIO(java.io.File,java.io.File)>/java.io.FileInputStream.<init>/0	<org.apache.commons.collections.map.ReferenceMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<org.apache.commons.collections.map.ReferenceMap: void readObject(java.io.ObjectInputStream)>	<java.io.FileOutputStream: void <init>(java.io.File)>	<<immutable-context>>	<org.parosproxy.paros.model.FileCopier: void copyLegacy(java.io.File,java.io.File)>/java.io.FileOutputStream.<init>/0	<org.apache.commons.collections.map.ReferenceMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<org.apache.commons.collections.map.ReferenceMap: void readObject(java.io.ObjectInputStream)>	<java.io.FileOutputStream: void <init>(java.io.File)>	<<immutable-context>>	<org.parosproxy.paros.model.FileCopier: void copyNIO(java.io.File,java.io.File)>/java.io.FileOutputStream.<init>/0	<org.apache.commons.collections.map.ReferenceMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.LinkedBlockingDeque: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.lang.String)>	<<immutable-context>>	<org.parosproxy.paros.Constant: void initializeFilesAndDirectories(org.zaproxy.zap.control.ControlOverrides)>/java.io.File.<init>/7	<java.util.concurrent.LinkedBlockingDeque: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.LinkedBlockingDeque: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.lang.String)>	<<immutable-context>>	<org.parosproxy.paros.Constant: void upgradeFrom2_0_0(org.apache.commons.configuration.XMLConfiguration)>/java.io.File.<init>/0	<java.util.concurrent.LinkedBlockingDeque: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.LinkedBlockingDeque: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.lang.String)>	<<immutable-context>>	<org.parosproxy.paros.Constant: void upgradeFrom2_0_0(org.apache.commons.configuration.XMLConfiguration)>/java.io.File.<init>/1	<java.util.concurrent.LinkedBlockingDeque: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.LinkedBlockingDeque: void readObject(java.io.ObjectInputStream)>	<java.io.FileInputStream: void <init>(java.io.File)>	<<immutable-context>>	<org.parosproxy.paros.model.FileCopier: void copyLegacy(java.io.File,java.io.File)>/java.io.FileInputStream.<init>/0	<java.util.concurrent.LinkedBlockingDeque: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.LinkedBlockingDeque: void readObject(java.io.ObjectInputStream)>	<java.io.FileInputStream: void <init>(java.io.File)>	<<immutable-context>>	<org.parosproxy.paros.model.FileCopier: void copyNIO(java.io.File,java.io.File)>/java.io.FileInputStream.<init>/0	<java.util.concurrent.LinkedBlockingDeque: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.LinkedBlockingDeque: void readObject(java.io.ObjectInputStream)>	<java.io.FileOutputStream: void <init>(java.io.File)>	<<immutable-context>>	<org.parosproxy.paros.model.FileCopier: void copyLegacy(java.io.File,java.io.File)>/java.io.FileOutputStream.<init>/0	<java.util.concurrent.LinkedBlockingDeque: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.LinkedBlockingDeque: void readObject(java.io.ObjectInputStream)>	<java.io.FileOutputStream: void <init>(java.io.File)>	<<immutable-context>>	<org.parosproxy.paros.model.FileCopier: void copyNIO(java.io.File,java.io.File)>/java.io.FileOutputStream.<init>/0	<java.util.concurrent.LinkedBlockingDeque: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeMap: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.lang.String)>	<<immutable-context>>	<org.parosproxy.paros.Constant: void initializeFilesAndDirectories(org.zaproxy.zap.control.ControlOverrides)>/java.io.File.<init>/7	<java.util.TreeMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeMap: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.lang.String)>	<<immutable-context>>	<org.parosproxy.paros.Constant: void upgradeFrom2_0_0(org.apache.commons.configuration.XMLConfiguration)>/java.io.File.<init>/0	<java.util.TreeMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeMap: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.lang.String)>	<<immutable-context>>	<org.parosproxy.paros.Constant: void upgradeFrom2_0_0(org.apache.commons.configuration.XMLConfiguration)>/java.io.File.<init>/1	<java.util.TreeMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeMap: void readObject(java.io.ObjectInputStream)>	<java.io.FileInputStream: void <init>(java.io.File)>	<<immutable-context>>	<org.parosproxy.paros.model.FileCopier: void copyLegacy(java.io.File,java.io.File)>/java.io.FileInputStream.<init>/0	<java.util.TreeMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeMap: void readObject(java.io.ObjectInputStream)>	<java.io.FileInputStream: void <init>(java.io.File)>	<<immutable-context>>	<org.parosproxy.paros.model.FileCopier: void copyNIO(java.io.File,java.io.File)>/java.io.FileInputStream.<init>/0	<java.util.TreeMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeMap: void readObject(java.io.ObjectInputStream)>	<java.io.FileOutputStream: void <init>(java.io.File)>	<<immutable-context>>	<org.parosproxy.paros.model.FileCopier: void copyLegacy(java.io.File,java.io.File)>/java.io.FileOutputStream.<init>/0	<java.util.TreeMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeMap: void readObject(java.io.ObjectInputStream)>	<java.io.FileOutputStream: void <init>(java.io.File)>	<<immutable-context>>	<org.parosproxy.paros.model.FileCopier: void copyNIO(java.io.File,java.io.File)>/java.io.FileOutputStream.<init>/0	<java.util.TreeMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.HashMap: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.lang.String)>	<<immutable-context>>	<org.parosproxy.paros.Constant: void initializeFilesAndDirectories(org.zaproxy.zap.control.ControlOverrides)>/java.io.File.<init>/7	<java.util.HashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.HashMap: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.lang.String)>	<<immutable-context>>	<org.parosproxy.paros.Constant: void upgradeFrom2_0_0(org.apache.commons.configuration.XMLConfiguration)>/java.io.File.<init>/0	<java.util.HashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.HashMap: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.lang.String)>	<<immutable-context>>	<org.parosproxy.paros.Constant: void upgradeFrom2_0_0(org.apache.commons.configuration.XMLConfiguration)>/java.io.File.<init>/1	<java.util.HashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.HashMap: void readObject(java.io.ObjectInputStream)>	<java.io.FileInputStream: void <init>(java.io.File)>	<<immutable-context>>	<org.parosproxy.paros.model.FileCopier: void copyLegacy(java.io.File,java.io.File)>/java.io.FileInputStream.<init>/0	<java.util.HashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.HashMap: void readObject(java.io.ObjectInputStream)>	<java.io.FileInputStream: void <init>(java.io.File)>	<<immutable-context>>	<org.parosproxy.paros.model.FileCopier: void copyNIO(java.io.File,java.io.File)>/java.io.FileInputStream.<init>/0	<java.util.HashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.HashMap: void readObject(java.io.ObjectInputStream)>	<java.io.FileOutputStream: void <init>(java.io.File)>	<<immutable-context>>	<org.parosproxy.paros.model.FileCopier: void copyLegacy(java.io.File,java.io.File)>/java.io.FileOutputStream.<init>/0	<java.util.HashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.HashMap: void readObject(java.io.ObjectInputStream)>	<java.io.FileOutputStream: void <init>(java.io.File)>	<<immutable-context>>	<org.parosproxy.paros.model.FileCopier: void copyNIO(java.io.File,java.io.File)>/java.io.FileOutputStream.<init>/0	<java.util.HashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.CopyOnWriteArrayList: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.lang.String)>	<<immutable-context>>	<org.parosproxy.paros.Constant: void initializeFilesAndDirectories(org.zaproxy.zap.control.ControlOverrides)>/java.io.File.<init>/7	<java.util.concurrent.CopyOnWriteArrayList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.CopyOnWriteArrayList: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.lang.String)>	<<immutable-context>>	<org.parosproxy.paros.Constant: void upgradeFrom2_0_0(org.apache.commons.configuration.XMLConfiguration)>/java.io.File.<init>/0	<java.util.concurrent.CopyOnWriteArrayList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.CopyOnWriteArrayList: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.lang.String)>	<<immutable-context>>	<org.parosproxy.paros.Constant: void upgradeFrom2_0_0(org.apache.commons.configuration.XMLConfiguration)>/java.io.File.<init>/1	<java.util.concurrent.CopyOnWriteArrayList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.CopyOnWriteArrayList: void readObject(java.io.ObjectInputStream)>	<java.io.FileInputStream: void <init>(java.io.File)>	<<immutable-context>>	<org.parosproxy.paros.model.FileCopier: void copyLegacy(java.io.File,java.io.File)>/java.io.FileInputStream.<init>/0	<java.util.concurrent.CopyOnWriteArrayList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.CopyOnWriteArrayList: void readObject(java.io.ObjectInputStream)>	<java.io.FileInputStream: void <init>(java.io.File)>	<<immutable-context>>	<org.parosproxy.paros.model.FileCopier: void copyNIO(java.io.File,java.io.File)>/java.io.FileInputStream.<init>/0	<java.util.concurrent.CopyOnWriteArrayList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.CopyOnWriteArrayList: void readObject(java.io.ObjectInputStream)>	<java.io.FileOutputStream: void <init>(java.io.File)>	<<immutable-context>>	<org.parosproxy.paros.model.FileCopier: void copyLegacy(java.io.File,java.io.File)>/java.io.FileOutputStream.<init>/0	<java.util.concurrent.CopyOnWriteArrayList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.CopyOnWriteArrayList: void readObject(java.io.ObjectInputStream)>	<java.io.FileOutputStream: void <init>(java.io.File)>	<<immutable-context>>	<org.parosproxy.paros.model.FileCopier: void copyNIO(java.io.File,java.io.File)>/java.io.FileOutputStream.<init>/0	<java.util.concurrent.CopyOnWriteArrayList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.lang.String)>	<<immutable-context>>	<org.parosproxy.paros.Constant: void initializeFilesAndDirectories(org.zaproxy.zap.control.ControlOverrides)>/java.io.File.<init>/7	<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.lang.String)>	<<immutable-context>>	<org.parosproxy.paros.Constant: void upgradeFrom2_0_0(org.apache.commons.configuration.XMLConfiguration)>/java.io.File.<init>/0	<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.lang.String)>	<<immutable-context>>	<org.parosproxy.paros.Constant: void upgradeFrom2_0_0(org.apache.commons.configuration.XMLConfiguration)>/java.io.File.<init>/1	<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>	<java.io.FileInputStream: void <init>(java.io.File)>	<<immutable-context>>	<org.parosproxy.paros.model.FileCopier: void copyLegacy(java.io.File,java.io.File)>/java.io.FileInputStream.<init>/0	<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>	<java.io.FileInputStream: void <init>(java.io.File)>	<<immutable-context>>	<org.parosproxy.paros.model.FileCopier: void copyNIO(java.io.File,java.io.File)>/java.io.FileInputStream.<init>/0	<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>	<java.io.FileOutputStream: void <init>(java.io.File)>	<<immutable-context>>	<org.parosproxy.paros.model.FileCopier: void copyLegacy(java.io.File,java.io.File)>/java.io.FileOutputStream.<init>/0	<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>	<java.io.FileOutputStream: void <init>(java.io.File)>	<<immutable-context>>	<org.parosproxy.paros.model.FileCopier: void copyNIO(java.io.File,java.io.File)>/java.io.FileOutputStream.<init>/0	<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<com.facebook.presto.hadoop.$internal.org.apache.commons.collections.map.CaseInsensitiveMap: void readObject(java.io.ObjectInputStream)>	<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>	<<immutable-context>>	<org.apache.beam.sdk.util.SerializableUtils$ContextualObjectInputStream: java.lang.Class resolveProxyClass(java.lang.String[])>/java.lang.ClassLoader.loadClass/0	<com.facebook.presto.hadoop.$internal.org.apache.commons.collections.map.CaseInsensitiveMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<org.apache.beam.repackaged.core.org.apache.commons.lang3.event.EventListenerSupport: void readObject(java.io.ObjectInputStream)>	<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>	<<immutable-context>>	<org.apache.beam.sdk.util.SerializableUtils$ContextualObjectInputStream: java.lang.Class resolveProxyClass(java.lang.String[])>/java.lang.ClassLoader.loadClass/0	<org.apache.beam.repackaged.core.org.apache.commons.lang3.event.EventListenerSupport: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<org.apache.beam.sdk.util.SerializableThrowable: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<org.apache.beam.sdk.util.ByteBuddyUtils: net.bytebuddy.dynamic.loading.ClassLoadingStrategy getClassLoadingStrategy(java.lang.Class)>/java.lang.reflect.Method.invoke/0	<org.apache.beam.sdk.util.SerializableThrowable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<org.apache.beam.sdk.util.SerializableThrowable: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<org.apache.beam.sdk.util.ByteBuddyUtils: net.bytebuddy.dynamic.loading.ClassLoadingStrategy getClassLoadingStrategy(java.lang.Class)>/java.lang.reflect.Method.invoke/1	<org.apache.beam.sdk.util.SerializableThrowable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<org.apache.beam.sdk.util.SerializableThrowable: void readObject(java.io.ObjectInputStream)>	<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>	<<immutable-context>>	<org.apache.beam.sdk.util.SerializableUtils$ContextualObjectInputStream: java.lang.Class resolveProxyClass(java.lang.String[])>/java.lang.ClassLoader.loadClass/0	<org.apache.beam.sdk.util.SerializableThrowable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<datahub.shaded.com.google.common.collect.ImmutableEnumSet: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<datahub.shaded.org.apache.commons.lang.enum.Enum: java.lang.String getNameInOtherClassLoader(java.lang.Object)>/java.lang.reflect.Method.invoke/0	<datahub.shaded.com.google.common.collect.ImmutableEnumSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<datahub.shaded.com.google.common.collect.ImmutableEnumSet: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<datahub.shaded.org.apache.commons.lang.enums.Enum: java.lang.String getNameInOtherClassLoader(java.lang.Object)>/java.lang.reflect.Method.invoke/0	<datahub.shaded.com.google.common.collect.ImmutableEnumSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<datahub.shaded.org.springframework.cache.interceptor.SimpleKey: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<datahub.shaded.org.apache.commons.lang.enums.ValuedEnum: int getValueInOtherClassLoader(java.lang.Object)>/java.lang.reflect.Method.invoke/0	<datahub.shaded.org.springframework.cache.interceptor.SimpleKey: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<datahub.shaded.org.springframework.cache.interceptor.SimpleKey: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<datahub.shaded.org.apache.commons.lang.enum.Enum: java.lang.String getNameInOtherClassLoader(java.lang.Object)>/java.lang.reflect.Method.invoke/0	<datahub.shaded.org.springframework.cache.interceptor.SimpleKey: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<datahub.shaded.org.springframework.cache.interceptor.SimpleKey: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<datahub.shaded.org.apache.commons.lang.enums.Enum: java.lang.String getNameInOtherClassLoader(java.lang.Object)>/java.lang.reflect.Method.invoke/0	<datahub.shaded.org.springframework.cache.interceptor.SimpleKey: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<datahub.shaded.com.google.common.collect.HashMultimap: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<datahub.shaded.org.apache.commons.lang.enums.ValuedEnum: int getValueInOtherClassLoader(java.lang.Object)>/java.lang.reflect.Method.invoke/0	<datahub.shaded.com.google.common.collect.HashMultimap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<datahub.shaded.com.google.common.collect.HashMultimap: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<datahub.shaded.org.apache.commons.lang.enum.Enum: java.lang.String getNameInOtherClassLoader(java.lang.Object)>/java.lang.reflect.Method.invoke/0	<datahub.shaded.com.google.common.collect.HashMultimap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<datahub.shaded.com.google.common.collect.HashMultimap: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<datahub.shaded.org.apache.commons.lang.enums.Enum: java.lang.String getNameInOtherClassLoader(java.lang.Object)>/java.lang.reflect.Method.invoke/0	<datahub.shaded.com.google.common.collect.HashMultimap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<datahub.shaded.com.google.common.collect.HashBiMap: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<datahub.shaded.org.apache.commons.lang.enums.ValuedEnum: int getValueInOtherClassLoader(java.lang.Object)>/java.lang.reflect.Method.invoke/0	<datahub.shaded.com.google.common.collect.HashBiMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<datahub.shaded.com.google.common.collect.HashBiMap: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<datahub.shaded.org.apache.commons.lang.enum.Enum: java.lang.String getNameInOtherClassLoader(java.lang.Object)>/java.lang.reflect.Method.invoke/0	<datahub.shaded.com.google.common.collect.HashBiMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<datahub.shaded.com.google.common.collect.HashBiMap: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<datahub.shaded.org.apache.commons.lang.enums.Enum: java.lang.String getNameInOtherClassLoader(java.lang.Object)>/java.lang.reflect.Method.invoke/0	<datahub.shaded.com.google.common.collect.HashBiMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>	<java.lang.ProcessBuilder: java.lang.Process start()>	<<immutable-context>>	<org.apache.hadoop.util.Shell: void runCommand()>/java.lang.ProcessBuilder.start/0	<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>	<java.lang.ProcessBuilder: java.lang.Process start()>	<<immutable-context>>	<org.apache.hadoop.util.Shell: void runCommand()>/java.lang.ProcessBuilder.start/1	<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.lang.String)>	<<immutable-context>>	<org.apache.hadoop.util.Shell: java.io.File checkHadoopHomeInner(java.lang.String)>/java.io.File.<init>/0	<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.io.File,java.lang.String)>	<<immutable-context>>	<org.apache.hadoop.util.Shell: java.io.File getQualifiedBinInner(java.io.File,java.lang.String)>/java.io.File.<init>/0	<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.io.File,java.lang.String)>	<<immutable-context>>	<org.apache.hadoop.util.Shell: java.io.File getQualifiedBinInner(java.io.File,java.lang.String)>/java.io.File.<init>/1	<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<org.apache.hadoop.thirdparty.com.google.common.collect.HashBiMap: void readObject(java.io.ObjectInputStream)>	<java.lang.ProcessBuilder: java.lang.Process start()>	<<immutable-context>>	<org.apache.hadoop.util.Shell: void runCommand()>/java.lang.ProcessBuilder.start/0	<org.apache.hadoop.thirdparty.com.google.common.collect.HashBiMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<org.apache.hadoop.thirdparty.com.google.common.collect.HashBiMap: void readObject(java.io.ObjectInputStream)>	<java.lang.ProcessBuilder: java.lang.Process start()>	<<immutable-context>>	<org.apache.hadoop.util.Shell: void runCommand()>/java.lang.ProcessBuilder.start/1	<org.apache.hadoop.thirdparty.com.google.common.collect.HashBiMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<org.apache.hadoop.thirdparty.com.google.common.collect.HashBiMap: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.lang.String)>	<<immutable-context>>	<org.apache.hadoop.util.Shell: java.io.File checkHadoopHomeInner(java.lang.String)>/java.io.File.<init>/0	<org.apache.hadoop.thirdparty.com.google.common.collect.HashBiMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<org.apache.hadoop.thirdparty.com.google.common.collect.HashBiMap: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.io.File,java.lang.String)>	<<immutable-context>>	<org.apache.hadoop.util.Shell: java.io.File getQualifiedBinInner(java.io.File,java.lang.String)>/java.io.File.<init>/0	<org.apache.hadoop.thirdparty.com.google.common.collect.HashBiMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<org.apache.hadoop.thirdparty.com.google.common.collect.HashBiMap: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.io.File,java.lang.String)>	<<immutable-context>>	<org.apache.hadoop.util.Shell: java.io.File getQualifiedBinInner(java.io.File,java.lang.String)>/java.io.File.<init>/1	<org.apache.hadoop.thirdparty.com.google.common.collect.HashBiMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<org.apache.hadoop.fs.statistics.IOStatisticsSnapshot: void readObject(java.io.ObjectInputStream)>	<java.lang.ProcessBuilder: java.lang.Process start()>	<<immutable-context>>	<org.apache.hadoop.util.Shell: void runCommand()>/java.lang.ProcessBuilder.start/0	<org.apache.hadoop.fs.statistics.IOStatisticsSnapshot: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<org.apache.hadoop.fs.statistics.IOStatisticsSnapshot: void readObject(java.io.ObjectInputStream)>	<java.lang.ProcessBuilder: java.lang.Process start()>	<<immutable-context>>	<org.apache.hadoop.util.Shell: void runCommand()>/java.lang.ProcessBuilder.start/1	<org.apache.hadoop.fs.statistics.IOStatisticsSnapshot: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<org.apache.hadoop.fs.statistics.IOStatisticsSnapshot: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.lang.String)>	<<immutable-context>>	<org.apache.hadoop.util.Shell: java.io.File checkHadoopHomeInner(java.lang.String)>/java.io.File.<init>/0	<org.apache.hadoop.fs.statistics.IOStatisticsSnapshot: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<org.apache.hadoop.fs.statistics.IOStatisticsSnapshot: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.io.File,java.lang.String)>	<<immutable-context>>	<org.apache.hadoop.util.Shell: java.io.File getQualifiedBinInner(java.io.File,java.lang.String)>/java.io.File.<init>/0	<org.apache.hadoop.fs.statistics.IOStatisticsSnapshot: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<org.apache.hadoop.fs.statistics.IOStatisticsSnapshot: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.io.File,java.lang.String)>	<<immutable-context>>	<org.apache.hadoop.util.Shell: java.io.File getQualifiedBinInner(java.io.File,java.lang.String)>/java.io.File.<init>/1	<org.apache.hadoop.fs.statistics.IOStatisticsSnapshot: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>	<java.lang.ProcessBuilder: java.lang.Process start()>	<<immutable-context>>	<org.apache.hadoop.util.Shell: void runCommand()>/java.lang.ProcessBuilder.start/0	<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>	<java.lang.ProcessBuilder: java.lang.Process start()>	<<immutable-context>>	<org.apache.hadoop.util.Shell: void runCommand()>/java.lang.ProcessBuilder.start/1	<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.lang.String)>	<<immutable-context>>	<org.apache.hadoop.util.Shell: java.io.File checkHadoopHomeInner(java.lang.String)>/java.io.File.<init>/0	<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.io.File,java.lang.String)>	<<immutable-context>>	<org.apache.hadoop.util.Shell: java.io.File getQualifiedBinInner(java.io.File,java.lang.String)>/java.io.File.<init>/0	<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.io.File,java.lang.String)>	<<immutable-context>>	<org.apache.hadoop.util.Shell: java.io.File getQualifiedBinInner(java.io.File,java.lang.String)>/java.io.File.<init>/1	<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeMap: void readObject(java.io.ObjectInputStream)>	<java.lang.ProcessBuilder: java.lang.Process start()>	<<immutable-context>>	<org.apache.hadoop.util.Shell: void runCommand()>/java.lang.ProcessBuilder.start/0	<java.util.TreeMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeMap: void readObject(java.io.ObjectInputStream)>	<java.lang.ProcessBuilder: java.lang.Process start()>	<<immutable-context>>	<org.apache.hadoop.util.Shell: void runCommand()>/java.lang.ProcessBuilder.start/1	<java.util.TreeMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeMap: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.lang.String)>	<<immutable-context>>	<org.apache.hadoop.util.Shell: java.io.File checkHadoopHomeInner(java.lang.String)>/java.io.File.<init>/0	<java.util.TreeMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeMap: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.io.File,java.lang.String)>	<<immutable-context>>	<org.apache.hadoop.util.Shell: java.io.File getQualifiedBinInner(java.io.File,java.lang.String)>/java.io.File.<init>/0	<java.util.TreeMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeMap: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.io.File,java.lang.String)>	<<immutable-context>>	<org.apache.hadoop.util.Shell: java.io.File getQualifiedBinInner(java.io.File,java.lang.String)>/java.io.File.<init>/1	<java.util.TreeMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<datahub.shaded.org.apache.commons.lang.enums.ValuedEnum: int getValueInOtherClassLoader(java.lang.Object)>/java.lang.reflect.Method.invoke/0	<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<datahub.shaded.org.apache.commons.lang.enum.Enum: java.lang.String getNameInOtherClassLoader(java.lang.Object)>/java.lang.reflect.Method.invoke/0	<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<datahub.shaded.org.apache.commons.lang.enums.Enum: java.lang.String getNameInOtherClassLoader(java.lang.Object)>/java.lang.reflect.Method.invoke/0	<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<datahub.shaded.org.apache.commons.lang.enums.ValuedEnum: int getValueInOtherClassLoader(java.lang.Object)>/java.lang.reflect.Method.invoke/0	<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<datahub.shaded.org.apache.commons.lang.enum.Enum: java.lang.String getNameInOtherClassLoader(java.lang.Object)>/java.lang.reflect.Method.invoke/0	<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<datahub.shaded.org.apache.commons.lang.enums.Enum: java.lang.String getNameInOtherClassLoader(java.lang.Object)>/java.lang.reflect.Method.invoke/0	<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<datahub.shaded.org.apache.commons.lang.enums.ValuedEnum: int getValueInOtherClassLoader(java.lang.Object)>/java.lang.reflect.Method.invoke/0	<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<datahub.shaded.org.apache.commons.lang.enum.Enum: java.lang.String getNameInOtherClassLoader(java.lang.Object)>/java.lang.reflect.Method.invoke/0	<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<datahub.shaded.org.apache.commons.lang.enums.Enum: java.lang.String getNameInOtherClassLoader(java.lang.Object)>/java.lang.reflect.Method.invoke/0	<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.HashMap: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<datahub.shaded.org.apache.commons.lang.enums.ValuedEnum: int getValueInOtherClassLoader(java.lang.Object)>/java.lang.reflect.Method.invoke/0	<java.util.HashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.HashMap: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<datahub.shaded.org.apache.commons.lang.enum.Enum: java.lang.String getNameInOtherClassLoader(java.lang.Object)>/java.lang.reflect.Method.invoke/0	<java.util.HashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.HashMap: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<datahub.shaded.org.apache.commons.lang.enums.Enum: java.lang.String getNameInOtherClassLoader(java.lang.Object)>/java.lang.reflect.Method.invoke/0	<java.util.HashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<datahub.shaded.com.google.common.collect.ConcurrentHashMultiset: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<datahub.shaded.org.apache.commons.lang.enums.ValuedEnum: int getValueInOtherClassLoader(java.lang.Object)>/java.lang.reflect.Method.invoke/0	<datahub.shaded.com.google.common.collect.ConcurrentHashMultiset: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<datahub.shaded.com.google.common.collect.ConcurrentHashMultiset: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<datahub.shaded.org.apache.commons.lang.enum.Enum: java.lang.String getNameInOtherClassLoader(java.lang.Object)>/java.lang.reflect.Method.invoke/0	<datahub.shaded.com.google.common.collect.ConcurrentHashMultiset: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<datahub.shaded.com.google.common.collect.ConcurrentHashMultiset: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<datahub.shaded.org.apache.commons.lang.enums.Enum: java.lang.String getNameInOtherClassLoader(java.lang.Object)>/java.lang.reflect.Method.invoke/0	<datahub.shaded.com.google.common.collect.ConcurrentHashMultiset: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<datahub.shaded.org.apache.commons.lang.enums.ValuedEnum: int getValueInOtherClassLoader(java.lang.Object)>/java.lang.reflect.Method.invoke/0	<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<datahub.shaded.org.apache.commons.lang.enum.Enum: java.lang.String getNameInOtherClassLoader(java.lang.Object)>/java.lang.reflect.Method.invoke/0	<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<datahub.shaded.org.apache.commons.lang.enums.Enum: java.lang.String getNameInOtherClassLoader(java.lang.Object)>/java.lang.reflect.Method.invoke/0	<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<com.facebook.presto.hadoop.$internal.org.apache.commons.collections.set.AbstractSerializableSetDecorator: void readObject(java.io.ObjectInputStream)>	<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>	<<immutable-context>>	<org.apache.beam.sdk.util.SerializableUtils$ContextualObjectInputStream: java.lang.Class resolveProxyClass(java.lang.String[])>/java.lang.ClassLoader.loadClass/0	<com.facebook.presto.hadoop.$internal.org.apache.commons.collections.set.AbstractSerializableSetDecorator: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<com.facebook.presto.hadoop.$internal.org.apache.commons.collections.set.AbstractSerializableSetDecorator: void readObject(java.io.ObjectInputStream)>	<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>	<<immutable-context>>	<org.apache.beam.sdk.util.SerializableUtils: java.io.Serializable clone(java.io.Serializable)>/java.lang.ClassLoader.loadClass/0	<com.facebook.presto.hadoop.$internal.org.apache.commons.collections.set.AbstractSerializableSetDecorator: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<org.gradle.internal.exceptions.DefaultMultiCauseException: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void print(java.lang.String)>	<<immutable-context>>	<org.gradle.internal.exceptions.DefaultMultiCauseException: void printSingleCauseStackTrace(java.io.PrintWriter)>/java.io.PrintWriter.print/0	<org.gradle.internal.exceptions.DefaultMultiCauseException: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<org.gradle.internal.exceptions.DefaultMultiCauseException: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void print(java.lang.String)>	<<immutable-context>>	<org.gradle.internal.impldep.org.apache.commons.lang.exception.NestableDelegate: void printStackTrace(java.io.PrintWriter)>/java.io.PrintWriter.print/0	<org.gradle.internal.exceptions.DefaultMultiCauseException: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<org.gradle.internal.exceptions.DefaultMultiCauseException: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void println(java.lang.String)>	<<immutable-context>>	<org.gradle.internal.impldep.org.apache.commons.lang.exception.NestableDelegate: void printStackTrace(java.io.PrintWriter)>/java.io.PrintWriter.println/0	<org.gradle.internal.exceptions.DefaultMultiCauseException: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<org.gradle.internal.exceptions.DefaultMultiCauseException: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.lang.String)>	<<immutable-context>>	<org.gradle.internal.classloader.ClasspathUtil: java.io.File getClasspathForResource(java.net.URL,java.lang.String)>/java.io.File.<init>/0	<org.gradle.internal.exceptions.DefaultMultiCauseException: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<org.gradle.internal.exceptions.DefaultMultiCauseException: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.lang.String)>	<<immutable-context>>	<org.gradle.internal.classloader.ClasspathUtil: java.io.File getClasspathForResource(java.net.URL,java.lang.String)>/java.io.File.<init>/1	<org.gradle.internal.exceptions.DefaultMultiCauseException: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<org.gradle.internal.exceptions.DefaultMultiCauseException: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.lang.String)>	<<immutable-context>>	<org.gradle.initialization.BuildLayoutParameters: java.io.File findGradleUserHomeDir()>/java.io.File.<init>/0	<org.gradle.internal.exceptions.DefaultMultiCauseException: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<org.gradle.internal.exceptions.DefaultMultiCauseException: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.lang.String)>	<<immutable-context>>	<org.gradle.initialization.BuildLayoutParameters: void <clinit>()>/java.io.File.<init>/0	<org.gradle.internal.exceptions.DefaultMultiCauseException: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void print(java.lang.String)>	<<immutable-context>>	<org.gradle.internal.exceptions.DefaultMultiCauseException: void printSingleCauseStackTrace(java.io.PrintWriter)>/java.io.PrintWriter.print/0	<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void print(java.lang.String)>	<<immutable-context>>	<org.gradle.internal.impldep.org.apache.commons.lang.exception.NestableDelegate: void printStackTrace(java.io.PrintWriter)>/java.io.PrintWriter.print/0	<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void println(java.lang.String)>	<<immutable-context>>	<org.gradle.internal.impldep.org.apache.commons.lang.exception.NestableDelegate: void printStackTrace(java.io.PrintWriter)>/java.io.PrintWriter.println/0	<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.lang.String)>	<<immutable-context>>	<org.gradle.internal.classloader.ClasspathUtil: java.io.File getClasspathForResource(java.net.URL,java.lang.String)>/java.io.File.<init>/0	<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.lang.String)>	<<immutable-context>>	<org.gradle.internal.classloader.ClasspathUtil: java.io.File getClasspathForResource(java.net.URL,java.lang.String)>/java.io.File.<init>/1	<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.lang.String)>	<<immutable-context>>	<org.gradle.initialization.BuildLayoutParameters: java.io.File findGradleUserHomeDir()>/java.io.File.<init>/0	<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.lang.String)>	<<immutable-context>>	<org.gradle.initialization.BuildLayoutParameters: void <clinit>()>/java.io.File.<init>/0	<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<org.gradle.internal.impldep.com.google.common.collect.ImmutableEnumSet: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void print(java.lang.String)>	<<immutable-context>>	<org.gradle.internal.exceptions.DefaultMultiCauseException: void printSingleCauseStackTrace(java.io.PrintWriter)>/java.io.PrintWriter.print/0	<org.gradle.internal.impldep.com.google.common.collect.ImmutableEnumSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<org.gradle.internal.impldep.com.google.common.collect.ImmutableEnumSet: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void print(java.lang.String)>	<<immutable-context>>	<org.gradle.internal.impldep.org.apache.commons.lang.exception.NestableDelegate: void printStackTrace(java.io.PrintWriter)>/java.io.PrintWriter.print/0	<org.gradle.internal.impldep.com.google.common.collect.ImmutableEnumSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<org.gradle.internal.impldep.com.google.common.collect.ImmutableEnumSet: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void println(java.lang.String)>	<<immutable-context>>	<org.gradle.internal.impldep.org.apache.commons.lang.exception.NestableDelegate: void printStackTrace(java.io.PrintWriter)>/java.io.PrintWriter.println/0	<org.gradle.internal.impldep.com.google.common.collect.ImmutableEnumSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<org.gradle.internal.impldep.com.google.common.collect.ImmutableEnumSet: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.lang.String)>	<<immutable-context>>	<org.gradle.internal.classloader.ClasspathUtil: java.io.File getClasspathForResource(java.net.URL,java.lang.String)>/java.io.File.<init>/0	<org.gradle.internal.impldep.com.google.common.collect.ImmutableEnumSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<org.gradle.internal.impldep.com.google.common.collect.ImmutableEnumSet: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.lang.String)>	<<immutable-context>>	<org.gradle.internal.classloader.ClasspathUtil: java.io.File getClasspathForResource(java.net.URL,java.lang.String)>/java.io.File.<init>/1	<org.gradle.internal.impldep.com.google.common.collect.ImmutableEnumSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<org.gradle.internal.impldep.com.google.common.collect.ImmutableEnumSet: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.lang.String)>	<<immutable-context>>	<org.gradle.initialization.BuildLayoutParameters: java.io.File findGradleUserHomeDir()>/java.io.File.<init>/0	<org.gradle.internal.impldep.com.google.common.collect.ImmutableEnumSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<org.gradle.internal.impldep.com.google.common.collect.ImmutableEnumSet: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.lang.String)>	<<immutable-context>>	<org.gradle.initialization.BuildLayoutParameters: void <clinit>()>/java.io.File.<init>/0	<org.gradle.internal.impldep.com.google.common.collect.ImmutableEnumSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.HashSet: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void print(java.lang.String)>	<<immutable-context>>	<org.gradle.internal.exceptions.DefaultMultiCauseException: void printSingleCauseStackTrace(java.io.PrintWriter)>/java.io.PrintWriter.print/0	<java.util.HashSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.HashSet: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void print(java.lang.String)>	<<immutable-context>>	<org.gradle.internal.impldep.org.apache.commons.lang.exception.NestableDelegate: void printStackTrace(java.io.PrintWriter)>/java.io.PrintWriter.print/0	<java.util.HashSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.HashSet: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void println(java.lang.String)>	<<immutable-context>>	<org.gradle.internal.impldep.org.apache.commons.lang.exception.NestableDelegate: void printStackTrace(java.io.PrintWriter)>/java.io.PrintWriter.println/0	<java.util.HashSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.HashSet: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.lang.String)>	<<immutable-context>>	<org.gradle.internal.classloader.ClasspathUtil: java.io.File getClasspathForResource(java.net.URL,java.lang.String)>/java.io.File.<init>/0	<java.util.HashSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.HashSet: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.lang.String)>	<<immutable-context>>	<org.gradle.internal.classloader.ClasspathUtil: java.io.File getClasspathForResource(java.net.URL,java.lang.String)>/java.io.File.<init>/1	<java.util.HashSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.HashSet: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.lang.String)>	<<immutable-context>>	<org.gradle.initialization.BuildLayoutParameters: java.io.File findGradleUserHomeDir()>/java.io.File.<init>/0	<java.util.HashSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.HashSet: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.lang.String)>	<<immutable-context>>	<org.gradle.initialization.BuildLayoutParameters: void <clinit>()>/java.io.File.<init>/0	<java.util.HashSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void print(java.lang.String)>	<<immutable-context>>	<org.gradle.internal.exceptions.DefaultMultiCauseException: void printSingleCauseStackTrace(java.io.PrintWriter)>/java.io.PrintWriter.print/0	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void print(java.lang.String)>	<<immutable-context>>	<org.gradle.internal.impldep.org.apache.commons.lang.exception.NestableDelegate: void printStackTrace(java.io.PrintWriter)>/java.io.PrintWriter.print/0	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void println(java.lang.String)>	<<immutable-context>>	<org.gradle.internal.impldep.org.apache.commons.lang.exception.NestableDelegate: void printStackTrace(java.io.PrintWriter)>/java.io.PrintWriter.println/0	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.lang.String)>	<<immutable-context>>	<org.gradle.internal.classloader.ClasspathUtil: java.io.File getClasspathForResource(java.net.URL,java.lang.String)>/java.io.File.<init>/0	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.lang.String)>	<<immutable-context>>	<org.gradle.internal.classloader.ClasspathUtil: java.io.File getClasspathForResource(java.net.URL,java.lang.String)>/java.io.File.<init>/1	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.lang.String)>	<<immutable-context>>	<org.gradle.initialization.BuildLayoutParameters: java.io.File findGradleUserHomeDir()>/java.io.File.<init>/0	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.lang.String)>	<<immutable-context>>	<org.gradle.initialization.BuildLayoutParameters: void <clinit>()>/java.io.File.<init>/0	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.LinkedBlockingQueue: void readObject(java.io.ObjectInputStream)>	<java.io.FileOutputStream: void <init>(java.io.File)>	<<immutable-context>>	<org.mockito.internal.creation.bytebuddy.InlineDelegateByteBuddyMockMaker: void <clinit>()>/java.io.FileOutputStream.<init>/0	<java.util.concurrent.LinkedBlockingQueue: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>	<java.io.FileOutputStream: void <init>(java.io.File)>	<<immutable-context>>	<org.mockito.internal.creation.bytebuddy.InlineDelegateByteBuddyMockMaker: void <clinit>()>/java.io.FileOutputStream.<init>/0	<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>	<java.io.FileOutputStream: void <init>(java.io.File)>	<<immutable-context>>	<org.mockito.internal.creation.bytebuddy.InlineDelegateByteBuddyMockMaker: void <clinit>()>/java.io.FileOutputStream.<init>/0	<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>	<java.io.FileOutputStream: void <init>(java.io.File)>	<<immutable-context>>	<org.mockito.internal.creation.bytebuddy.InlineDelegateByteBuddyMockMaker: void <clinit>()>/java.io.FileOutputStream.<init>/0	<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.IdentityHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void print(java.lang.String)>	<<immutable-context>>	<org.gradle.internal.exceptions.DefaultMultiCauseException: void printSingleCauseStackTrace(java.io.PrintWriter)>/java.io.PrintWriter.print/0	<java.util.IdentityHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.IdentityHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void print(java.lang.String)>	<<immutable-context>>	<org.gradle.internal.impldep.org.apache.commons.lang.exception.NestableDelegate: void printStackTrace(java.io.PrintWriter)>/java.io.PrintWriter.print/0	<java.util.IdentityHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.IdentityHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void println(java.lang.String)>	<<immutable-context>>	<org.gradle.internal.impldep.org.apache.commons.lang.exception.NestableDelegate: void printStackTrace(java.io.PrintWriter)>/java.io.PrintWriter.println/0	<java.util.IdentityHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.IdentityHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.lang.String)>	<<immutable-context>>	<org.gradle.initialization.BuildLayoutParameters: java.io.File findGradleUserHomeDir()>/java.io.File.<init>/0	<java.util.IdentityHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.IdentityHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.lang.String)>	<<immutable-context>>	<org.gradle.initialization.BuildLayoutParameters: void <clinit>()>/java.io.File.<init>/0	<java.util.IdentityHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.PriorityBlockingQueue: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void print(java.lang.String)>	<<immutable-context>>	<org.gradle.internal.exceptions.DefaultMultiCauseException: void printSingleCauseStackTrace(java.io.PrintWriter)>/java.io.PrintWriter.print/0	<java.util.concurrent.PriorityBlockingQueue: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.PriorityBlockingQueue: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void print(java.lang.String)>	<<immutable-context>>	<org.gradle.internal.impldep.org.apache.commons.lang.exception.NestableDelegate: void printStackTrace(java.io.PrintWriter)>/java.io.PrintWriter.print/0	<java.util.concurrent.PriorityBlockingQueue: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.PriorityBlockingQueue: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void println(java.lang.String)>	<<immutable-context>>	<org.gradle.internal.impldep.org.apache.commons.lang.exception.NestableDelegate: void printStackTrace(java.io.PrintWriter)>/java.io.PrintWriter.println/0	<java.util.concurrent.PriorityBlockingQueue: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.PriorityBlockingQueue: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.lang.String)>	<<immutable-context>>	<org.gradle.internal.classloader.ClasspathUtil: java.io.File getClasspathForResource(java.net.URL,java.lang.String)>/java.io.File.<init>/1	<java.util.concurrent.PriorityBlockingQueue: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.PriorityBlockingQueue: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.lang.String)>	<<immutable-context>>	<org.gradle.initialization.BuildLayoutParameters: java.io.File findGradleUserHomeDir()>/java.io.File.<init>/0	<java.util.concurrent.PriorityBlockingQueue: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.PriorityBlockingQueue: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.lang.String)>	<<immutable-context>>	<org.gradle.initialization.BuildLayoutParameters: void <clinit>()>/java.io.File.<init>/0	<java.util.concurrent.PriorityBlockingQueue: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.PriorityBlockingQueue: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.io.File,java.lang.String)>	<<immutable-context>>	<org.gradle.internal.installation.CurrentGradleInstallationLocator: java.io.File determineDistRootDir(java.io.File)>/java.io.File.<init>/0	<java.util.concurrent.PriorityBlockingQueue: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.PriorityBlockingQueue: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.io.File,java.lang.String)>	<<immutable-context>>	<org.gradle.internal.installation.GradleInstallation: java.util.List findLibDirs(java.io.File)>/java.io.File.<init>/0	<java.util.concurrent.PriorityBlockingQueue: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void print(java.lang.String)>	<<immutable-context>>	<org.gradle.internal.exceptions.DefaultMultiCauseException: void printSingleCauseStackTrace(java.io.PrintWriter)>/java.io.PrintWriter.print/0	<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void print(java.lang.String)>	<<immutable-context>>	<org.gradle.internal.impldep.org.apache.commons.lang.exception.NestableDelegate: void printStackTrace(java.io.PrintWriter)>/java.io.PrintWriter.print/0	<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void println(java.lang.String)>	<<immutable-context>>	<org.gradle.internal.impldep.org.apache.commons.lang.exception.NestableDelegate: void printStackTrace(java.io.PrintWriter)>/java.io.PrintWriter.println/0	<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.lang.String)>	<<immutable-context>>	<org.gradle.initialization.BuildLayoutParameters: java.io.File findGradleUserHomeDir()>/java.io.File.<init>/0	<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.lang.String)>	<<immutable-context>>	<org.gradle.initialization.BuildLayoutParameters: void <clinit>()>/java.io.File.<init>/0	<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void print(java.lang.String)>	<<immutable-context>>	<org.gradle.internal.exceptions.DefaultMultiCauseException: void printSingleCauseStackTrace(java.io.PrintWriter)>/java.io.PrintWriter.print/0	<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void print(java.lang.String)>	<<immutable-context>>	<org.gradle.internal.impldep.org.apache.commons.lang.exception.NestableDelegate: void printStackTrace(java.io.PrintWriter)>/java.io.PrintWriter.print/0	<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void println(java.lang.String)>	<<immutable-context>>	<org.gradle.internal.impldep.org.apache.commons.lang.exception.NestableDelegate: void printStackTrace(java.io.PrintWriter)>/java.io.PrintWriter.println/0	<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.lang.String)>	<<immutable-context>>	<org.gradle.initialization.BuildLayoutParameters: java.io.File findGradleUserHomeDir()>/java.io.File.<init>/0	<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.lang.String)>	<<immutable-context>>	<org.gradle.initialization.BuildLayoutParameters: void <clinit>()>/java.io.File.<init>/0	<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<org.gradle.internal.impldep.com.google.common.collect.ImmutableEnumMap: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void print(java.lang.String)>	<<immutable-context>>	<org.gradle.internal.exceptions.DefaultMultiCauseException: void printSingleCauseStackTrace(java.io.PrintWriter)>/java.io.PrintWriter.print/0	<org.gradle.internal.impldep.com.google.common.collect.ImmutableEnumMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<org.gradle.internal.impldep.com.google.common.collect.ImmutableEnumMap: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void print(java.lang.String)>	<<immutable-context>>	<org.gradle.internal.impldep.org.apache.commons.lang.exception.NestableDelegate: void printStackTrace(java.io.PrintWriter)>/java.io.PrintWriter.print/0	<org.gradle.internal.impldep.com.google.common.collect.ImmutableEnumMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<org.gradle.internal.impldep.com.google.common.collect.ImmutableEnumMap: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void println(java.lang.String)>	<<immutable-context>>	<org.gradle.internal.impldep.org.apache.commons.lang.exception.NestableDelegate: void printStackTrace(java.io.PrintWriter)>/java.io.PrintWriter.println/0	<org.gradle.internal.impldep.com.google.common.collect.ImmutableEnumMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<org.gradle.internal.impldep.com.google.common.collect.ImmutableEnumMap: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.lang.String)>	<<immutable-context>>	<org.gradle.initialization.BuildLayoutParameters: java.io.File findGradleUserHomeDir()>/java.io.File.<init>/0	<org.gradle.internal.impldep.com.google.common.collect.ImmutableEnumMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<org.gradle.internal.impldep.com.google.common.collect.ImmutableEnumMap: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.lang.String)>	<<immutable-context>>	<org.gradle.initialization.BuildLayoutParameters: void <clinit>()>/java.io.File.<init>/0	<org.gradle.internal.impldep.com.google.common.collect.ImmutableEnumMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<org.gradle.internal.impldep.com.google.common.collect.ImmutableListMultimap: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void print(java.lang.String)>	<<immutable-context>>	<org.gradle.internal.exceptions.DefaultMultiCauseException: void printSingleCauseStackTrace(java.io.PrintWriter)>/java.io.PrintWriter.print/0	<org.gradle.internal.impldep.com.google.common.collect.ImmutableListMultimap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<org.gradle.internal.impldep.com.google.common.collect.ImmutableListMultimap: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void print(java.lang.String)>	<<immutable-context>>	<org.gradle.internal.impldep.org.apache.commons.lang.exception.NestableDelegate: void printStackTrace(java.io.PrintWriter)>/java.io.PrintWriter.print/0	<org.gradle.internal.impldep.com.google.common.collect.ImmutableListMultimap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<org.gradle.internal.impldep.com.google.common.collect.ImmutableListMultimap: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void println(java.lang.String)>	<<immutable-context>>	<org.gradle.internal.impldep.org.apache.commons.lang.exception.NestableDelegate: void printStackTrace(java.io.PrintWriter)>/java.io.PrintWriter.println/0	<org.gradle.internal.impldep.com.google.common.collect.ImmutableListMultimap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<org.gradle.internal.impldep.com.google.common.collect.ImmutableListMultimap: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.lang.String)>	<<immutable-context>>	<org.gradle.initialization.BuildLayoutParameters: java.io.File findGradleUserHomeDir()>/java.io.File.<init>/0	<org.gradle.internal.impldep.com.google.common.collect.ImmutableListMultimap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<org.gradle.internal.impldep.com.google.common.collect.ImmutableListMultimap: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.lang.String)>	<<immutable-context>>	<org.gradle.initialization.BuildLayoutParameters: void <clinit>()>/java.io.File.<init>/0	<org.gradle.internal.impldep.com.google.common.collect.ImmutableListMultimap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<org.gradle.internal.impldep.com.google.common.collect.RegularContiguousSet: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void print(java.lang.String)>	<<immutable-context>>	<org.gradle.internal.exceptions.DefaultMultiCauseException: void printSingleCauseStackTrace(java.io.PrintWriter)>/java.io.PrintWriter.print/0	<org.gradle.internal.impldep.com.google.common.collect.RegularContiguousSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<org.gradle.internal.impldep.com.google.common.collect.RegularContiguousSet: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void print(java.lang.String)>	<<immutable-context>>	<org.gradle.internal.impldep.org.apache.commons.lang.exception.NestableDelegate: void printStackTrace(java.io.PrintWriter)>/java.io.PrintWriter.print/0	<org.gradle.internal.impldep.com.google.common.collect.RegularContiguousSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<org.gradle.internal.impldep.com.google.common.collect.RegularContiguousSet: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void println(java.lang.String)>	<<immutable-context>>	<org.gradle.internal.impldep.org.apache.commons.lang.exception.NestableDelegate: void printStackTrace(java.io.PrintWriter)>/java.io.PrintWriter.println/0	<org.gradle.internal.impldep.com.google.common.collect.RegularContiguousSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<org.gradle.internal.impldep.com.google.common.collect.RegularContiguousSet: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.lang.String)>	<<immutable-context>>	<org.gradle.initialization.BuildLayoutParameters: java.io.File findGradleUserHomeDir()>/java.io.File.<init>/0	<org.gradle.internal.impldep.com.google.common.collect.RegularContiguousSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<org.gradle.internal.impldep.com.google.common.collect.RegularContiguousSet: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.lang.String)>	<<immutable-context>>	<org.gradle.initialization.BuildLayoutParameters: void <clinit>()>/java.io.File.<init>/0	<org.gradle.internal.impldep.com.google.common.collect.RegularContiguousSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<datahub.shaded.com.google.common.collect.ImmutableRangeSet: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<datahub.shaded.org.apache.commons.lang.enums.ValuedEnum: int getValueInOtherClassLoader(java.lang.Object)>/java.lang.reflect.Method.invoke/0	<datahub.shaded.com.google.common.collect.ImmutableRangeSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<datahub.shaded.com.google.common.collect.ImmutableRangeSet: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<datahub.shaded.org.apache.commons.lang.enum.Enum: java.lang.String getNameInOtherClassLoader(java.lang.Object)>/java.lang.reflect.Method.invoke/0	<datahub.shaded.com.google.common.collect.ImmutableRangeSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<datahub.shaded.com.google.common.collect.ImmutableRangeSet: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<datahub.shaded.org.apache.commons.lang.enums.Enum: java.lang.String getNameInOtherClassLoader(java.lang.Object)>/java.lang.reflect.Method.invoke/0	<datahub.shaded.com.google.common.collect.ImmutableRangeSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<datahub.shaded.com.google.common.collect.CompactHashMap: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<datahub.shaded.org.apache.commons.lang.enums.ValuedEnum: int getValueInOtherClassLoader(java.lang.Object)>/java.lang.reflect.Method.invoke/0	<datahub.shaded.com.google.common.collect.CompactHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<datahub.shaded.com.google.common.collect.CompactHashMap: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<datahub.shaded.org.apache.commons.lang.enum.Enum: java.lang.String getNameInOtherClassLoader(java.lang.Object)>/java.lang.reflect.Method.invoke/0	<datahub.shaded.com.google.common.collect.CompactHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<datahub.shaded.com.google.common.collect.CompactHashMap: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<datahub.shaded.org.apache.commons.lang.enums.Enum: java.lang.String getNameInOtherClassLoader(java.lang.Object)>/java.lang.reflect.Method.invoke/0	<datahub.shaded.com.google.common.collect.CompactHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.PriorityBlockingQueue: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<datahub.shaded.org.apache.commons.lang.enums.ValuedEnum: int getValueInOtherClassLoader(java.lang.Object)>/java.lang.reflect.Method.invoke/0	<java.util.concurrent.PriorityBlockingQueue: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.PriorityBlockingQueue: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<datahub.shaded.org.apache.commons.lang.enum.Enum: java.lang.String getNameInOtherClassLoader(java.lang.Object)>/java.lang.reflect.Method.invoke/0	<java.util.concurrent.PriorityBlockingQueue: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.PriorityBlockingQueue: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<datahub.shaded.org.apache.commons.lang.enums.Enum: java.lang.String getNameInOtherClassLoader(java.lang.Object)>/java.lang.reflect.Method.invoke/0	<java.util.concurrent.PriorityBlockingQueue: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<datahub.shaded.org.springframework.beans.factory.config.DependencyDescriptor: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<datahub.shaded.org.apache.commons.lang.enums.ValuedEnum: int getValueInOtherClassLoader(java.lang.Object)>/java.lang.reflect.Method.invoke/0	<datahub.shaded.org.springframework.beans.factory.config.DependencyDescriptor: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<datahub.shaded.org.springframework.beans.factory.config.DependencyDescriptor: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<datahub.shaded.org.apache.commons.lang.enum.Enum: java.lang.String getNameInOtherClassLoader(java.lang.Object)>/java.lang.reflect.Method.invoke/0	<datahub.shaded.org.springframework.beans.factory.config.DependencyDescriptor: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<datahub.shaded.org.springframework.beans.factory.config.DependencyDescriptor: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<datahub.shaded.org.apache.commons.lang.enums.Enum: java.lang.String getNameInOtherClassLoader(java.lang.Object)>/java.lang.reflect.Method.invoke/0	<datahub.shaded.org.springframework.beans.factory.config.DependencyDescriptor: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<datahub.shaded.org.springframework.aop.aspectj.AspectJExpressionPointcut: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<datahub.shaded.org.apache.commons.lang.enums.ValuedEnum: int getValueInOtherClassLoader(java.lang.Object)>/java.lang.reflect.Method.invoke/0	<datahub.shaded.org.springframework.aop.aspectj.AspectJExpressionPointcut: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<datahub.shaded.org.springframework.aop.aspectj.AspectJExpressionPointcut: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<datahub.shaded.org.apache.commons.lang.enum.Enum: java.lang.String getNameInOtherClassLoader(java.lang.Object)>/java.lang.reflect.Method.invoke/0	<datahub.shaded.org.springframework.aop.aspectj.AspectJExpressionPointcut: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<datahub.shaded.org.springframework.aop.aspectj.AspectJExpressionPointcut: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<datahub.shaded.org.apache.commons.lang.enums.Enum: java.lang.String getNameInOtherClassLoader(java.lang.Object)>/java.lang.reflect.Method.invoke/0	<datahub.shaded.org.springframework.aop.aspectj.AspectJExpressionPointcut: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<datahub.shaded.org.springframework.aop.aspectj.annotation.AspectMetadata: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<datahub.shaded.org.apache.commons.lang.enums.ValuedEnum: int getValueInOtherClassLoader(java.lang.Object)>/java.lang.reflect.Method.invoke/0	<datahub.shaded.org.springframework.aop.aspectj.annotation.AspectMetadata: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<datahub.shaded.org.springframework.aop.aspectj.annotation.AspectMetadata: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<datahub.shaded.org.apache.commons.lang.enum.Enum: java.lang.String getNameInOtherClassLoader(java.lang.Object)>/java.lang.reflect.Method.invoke/0	<datahub.shaded.org.springframework.aop.aspectj.annotation.AspectMetadata: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<datahub.shaded.org.springframework.aop.aspectj.annotation.AspectMetadata: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<datahub.shaded.org.apache.commons.lang.enums.Enum: java.lang.String getNameInOtherClassLoader(java.lang.Object)>/java.lang.reflect.Method.invoke/0	<datahub.shaded.org.springframework.aop.aspectj.annotation.AspectMetadata: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<com.alibaba.nacos.shaded.com.google.common.cache.LongAdder: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<com.alibaba.nacos.shaded.io.grpc.netty.shaded.io.netty.util.internal.PlatformDependent0: void <clinit>()>/java.lang.reflect.Method.invoke/0	<com.alibaba.nacos.shaded.com.google.common.cache.LongAdder: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<com.alibaba.nacos.shaded.com.google.common.cache.LongAdder: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<com.alibaba.nacos.shaded.com.google.protobuf.GeneratedMessageV3: java.lang.Object invokeOrDie(java.lang.reflect.Method,java.lang.Object,java.lang.Object[])>/java.lang.reflect.Method.invoke/0	<com.alibaba.nacos.shaded.com.google.common.cache.LongAdder: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<com.alibaba.nacos.shaded.com.google.common.cache.LongAdder: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<com.alibaba.nacos.shaded.io.grpc.netty.shaded.io.netty.util.internal.CleanerJava9$1: java.lang.Object run()>/java.lang.reflect.Method.invoke/0	<com.alibaba.nacos.shaded.com.google.common.cache.LongAdder: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<com.alibaba.nacos.shaded.com.google.common.cache.LongAdder: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>	<<immutable-context>>	<com.alibaba.nacos.shaded.io.grpc.netty.shaded.io.netty.util.internal.PlatformDependent0: void <clinit>()>/java.lang.reflect.Constructor.newInstance/0	<com.alibaba.nacos.shaded.com.google.common.cache.LongAdder: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<com.alibaba.nacos.shaded.com.google.common.cache.LongAdder: void readObject(java.io.ObjectInputStream)>	<java.io.FileReader: void <init>(java.io.File)>	<<immutable-context>>	<com.alibaba.nacos.shaded.io.grpc.netty.shaded.io.netty.util.NetUtil$SoMaxConnAction: java.lang.Integer run()>/java.io.FileReader.<init>/0	<com.alibaba.nacos.shaded.com.google.common.cache.LongAdder: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<com.alibaba.nacos.shaded.com.google.common.cache.LongAdder: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.lang.String)>	<<immutable-context>>	<com.alibaba.nacos.shaded.io.grpc.netty.shaded.io.netty.util.internal.PlatformDependent: void addFilesystemOsClassifiers(java.util.Set,java.util.Set)>/java.io.File.<init>/0	<com.alibaba.nacos.shaded.com.google.common.cache.LongAdder: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<com.alibaba.nacos.shaded.com.google.common.cache.LongAdder: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.lang.String)>	<<immutable-context>>	<com.alibaba.nacos.shaded.io.grpc.netty.shaded.io.netty.util.internal.PlatformDependent: java.io.File toDirectory(java.lang.String)>/java.io.File.<init>/0	<com.alibaba.nacos.shaded.com.google.common.cache.LongAdder: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<com.alibaba.nacos.shaded.com.google.common.cache.LongAdder: void readObject(java.io.ObjectInputStream)>	<java.io.FileInputStream: void <init>(java.io.File)>	<<immutable-context>>	<com.alibaba.nacos.shaded.io.grpc.netty.shaded.io.netty.util.internal.PlatformDependent$4: java.lang.Boolean run()>/java.io.FileInputStream.<init>/0	<com.alibaba.nacos.shaded.com.google.common.cache.LongAdder: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<com.alibaba.nacos.shaded.com.google.common.collect.ImmutableListMultimap: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<com.alibaba.nacos.shaded.io.grpc.netty.shaded.io.netty.util.internal.PlatformDependent0: void <clinit>()>/java.lang.reflect.Method.invoke/0	<com.alibaba.nacos.shaded.com.google.common.collect.ImmutableListMultimap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<com.alibaba.nacos.shaded.com.google.common.collect.ImmutableListMultimap: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<com.alibaba.nacos.shaded.com.google.protobuf.GeneratedMessageV3: java.lang.Object invokeOrDie(java.lang.reflect.Method,java.lang.Object,java.lang.Object[])>/java.lang.reflect.Method.invoke/0	<com.alibaba.nacos.shaded.com.google.common.collect.ImmutableListMultimap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<com.alibaba.nacos.shaded.com.google.common.collect.ImmutableListMultimap: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<com.alibaba.nacos.shaded.io.grpc.netty.shaded.io.netty.util.internal.CleanerJava9$1: java.lang.Object run()>/java.lang.reflect.Method.invoke/0	<com.alibaba.nacos.shaded.com.google.common.collect.ImmutableListMultimap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<com.alibaba.nacos.shaded.com.google.common.collect.ImmutableListMultimap: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>	<<immutable-context>>	<com.alibaba.nacos.shaded.io.grpc.netty.shaded.io.netty.util.internal.PlatformDependent0: void <clinit>()>/java.lang.reflect.Constructor.newInstance/0	<com.alibaba.nacos.shaded.com.google.common.collect.ImmutableListMultimap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<com.alibaba.nacos.shaded.com.google.common.collect.ImmutableListMultimap: void readObject(java.io.ObjectInputStream)>	<java.io.FileReader: void <init>(java.io.File)>	<<immutable-context>>	<com.alibaba.nacos.shaded.io.grpc.netty.shaded.io.netty.util.NetUtil$SoMaxConnAction: java.lang.Integer run()>/java.io.FileReader.<init>/0	<com.alibaba.nacos.shaded.com.google.common.collect.ImmutableListMultimap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<com.alibaba.nacos.shaded.com.google.common.collect.ImmutableListMultimap: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.lang.String)>	<<immutable-context>>	<com.alibaba.nacos.shaded.io.grpc.netty.shaded.io.netty.util.internal.PlatformDependent: void addFilesystemOsClassifiers(java.util.Set,java.util.Set)>/java.io.File.<init>/0	<com.alibaba.nacos.shaded.com.google.common.collect.ImmutableListMultimap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<com.alibaba.nacos.shaded.com.google.common.collect.ImmutableListMultimap: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.lang.String)>	<<immutable-context>>	<com.alibaba.nacos.shaded.io.grpc.netty.shaded.io.netty.util.internal.PlatformDependent: java.io.File toDirectory(java.lang.String)>/java.io.File.<init>/0	<com.alibaba.nacos.shaded.com.google.common.collect.ImmutableListMultimap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<com.alibaba.nacos.shaded.com.google.common.collect.ImmutableListMultimap: void readObject(java.io.ObjectInputStream)>	<java.io.FileInputStream: void <init>(java.io.File)>	<<immutable-context>>	<com.alibaba.nacos.shaded.io.grpc.netty.shaded.io.netty.util.internal.PlatformDependent$4: java.lang.Boolean run()>/java.io.FileInputStream.<init>/0	<com.alibaba.nacos.shaded.com.google.common.collect.ImmutableListMultimap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.PriorityBlockingQueue: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<com.alibaba.nacos.shaded.io.grpc.netty.shaded.io.netty.util.internal.PlatformDependent0: void <clinit>()>/java.lang.reflect.Method.invoke/0	<java.util.concurrent.PriorityBlockingQueue: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.PriorityBlockingQueue: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<com.alibaba.nacos.shaded.io.grpc.netty.shaded.io.netty.channel.DefaultChannelId: int processHandlePid(java.lang.ClassLoader)>/java.lang.reflect.Method.invoke/0	<java.util.concurrent.PriorityBlockingQueue: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.PriorityBlockingQueue: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<com.alibaba.nacos.shaded.io.grpc.netty.shaded.io.netty.channel.DefaultChannelId: int jmxPid(java.lang.ClassLoader)>/java.lang.reflect.Method.invoke/0	<java.util.concurrent.PriorityBlockingQueue: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.PriorityBlockingQueue: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<com.alibaba.nacos.shaded.io.grpc.netty.shaded.io.netty.channel.DefaultChannelId: int jmxPid(java.lang.ClassLoader)>/java.lang.reflect.Method.invoke/2	<java.util.concurrent.PriorityBlockingQueue: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.PriorityBlockingQueue: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<com.alibaba.nacos.shaded.io.grpc.netty.shaded.io.netty.util.internal.PlatformDependent: long estimateMaxDirectMemory()>/java.lang.reflect.Method.invoke/0	<java.util.concurrent.PriorityBlockingQueue: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.PriorityBlockingQueue: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<com.alibaba.nacos.shaded.io.grpc.netty.shaded.io.netty.util.internal.PlatformDependent: long estimateMaxDirectMemory()>/java.lang.reflect.Method.invoke/1	<java.util.concurrent.PriorityBlockingQueue: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.PriorityBlockingQueue: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<com.alibaba.nacos.shaded.io.grpc.netty.shaded.io.netty.util.internal.PlatformDependent0$7: java.lang.Object run()>/java.lang.reflect.Method.invoke/0	<java.util.concurrent.PriorityBlockingQueue: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.PriorityBlockingQueue: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<com.alibaba.nacos.shaded.io.grpc.netty.shaded.io.netty.util.internal.PlatformDependent0$6: java.lang.Object run()>/java.lang.reflect.Method.invoke/0	<java.util.concurrent.PriorityBlockingQueue: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.PriorityBlockingQueue: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<com.alibaba.nacos.shaded.com.google.protobuf.ExtensionRegistryFactory: com.alibaba.nacos.shaded.com.google.protobuf.ExtensionRegistryLite invokeSubclassFactory(java.lang.String)>/java.lang.reflect.Method.invoke/0	<java.util.concurrent.PriorityBlockingQueue: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.PriorityBlockingQueue: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<com.alibaba.nacos.shaded.com.google.protobuf.GeneratedMessageV3: java.lang.Object invokeOrDie(java.lang.reflect.Method,java.lang.Object,java.lang.Object[])>/java.lang.reflect.Method.invoke/0	<java.util.concurrent.PriorityBlockingQueue: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.PriorityBlockingQueue: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<com.alibaba.nacos.shaded.io.grpc.netty.shaded.io.netty.util.internal.CleanerJava9$1: java.lang.Object run()>/java.lang.reflect.Method.invoke/0	<java.util.concurrent.PriorityBlockingQueue: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.PriorityBlockingQueue: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>	<<immutable-context>>	<com.alibaba.nacos.shaded.io.grpc.netty.shaded.io.netty.util.internal.PlatformDependent0: void <clinit>()>/java.lang.reflect.Constructor.newInstance/0	<java.util.concurrent.PriorityBlockingQueue: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.PriorityBlockingQueue: void readObject(java.io.ObjectInputStream)>	<java.io.FileReader: void <init>(java.io.File)>	<<immutable-context>>	<com.alibaba.nacos.shaded.io.grpc.netty.shaded.io.netty.util.NetUtil$SoMaxConnAction: java.lang.Integer run()>/java.io.FileReader.<init>/0	<java.util.concurrent.PriorityBlockingQueue: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.PriorityBlockingQueue: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.lang.String)>	<<immutable-context>>	<com.alibaba.nacos.shaded.io.grpc.netty.shaded.io.netty.util.internal.PlatformDependent: void addFilesystemOsClassifiers(java.util.Set,java.util.Set)>/java.io.File.<init>/0	<java.util.concurrent.PriorityBlockingQueue: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.PriorityBlockingQueue: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.lang.String)>	<<immutable-context>>	<com.alibaba.nacos.shaded.io.grpc.netty.shaded.io.netty.util.internal.PlatformDependent: java.io.File toDirectory(java.lang.String)>/java.io.File.<init>/0	<java.util.concurrent.PriorityBlockingQueue: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.PriorityBlockingQueue: void readObject(java.io.ObjectInputStream)>	<java.io.FileInputStream: void <init>(java.io.File)>	<<immutable-context>>	<com.alibaba.nacos.shaded.io.grpc.netty.shaded.io.netty.util.internal.PlatformDependent$4: java.lang.Boolean run()>/java.io.FileInputStream.<init>/0	<java.util.concurrent.PriorityBlockingQueue: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentLinkedDeque: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<com.alibaba.nacos.shaded.io.grpc.netty.shaded.io.netty.util.internal.PlatformDependent0: void <clinit>()>/java.lang.reflect.Method.invoke/0	<java.util.concurrent.ConcurrentLinkedDeque: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentLinkedDeque: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<com.alibaba.nacos.shaded.com.google.protobuf.GeneratedMessageV3: java.lang.Object invokeOrDie(java.lang.reflect.Method,java.lang.Object,java.lang.Object[])>/java.lang.reflect.Method.invoke/0	<java.util.concurrent.ConcurrentLinkedDeque: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentLinkedDeque: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<com.alibaba.nacos.shaded.io.grpc.netty.shaded.io.netty.util.internal.CleanerJava9$1: java.lang.Object run()>/java.lang.reflect.Method.invoke/0	<java.util.concurrent.ConcurrentLinkedDeque: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentLinkedDeque: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>	<<immutable-context>>	<com.alibaba.nacos.shaded.io.grpc.netty.shaded.io.netty.util.internal.PlatformDependent0: void <clinit>()>/java.lang.reflect.Constructor.newInstance/0	<java.util.concurrent.ConcurrentLinkedDeque: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentLinkedDeque: void readObject(java.io.ObjectInputStream)>	<java.io.FileReader: void <init>(java.io.File)>	<<immutable-context>>	<com.alibaba.nacos.shaded.io.grpc.netty.shaded.io.netty.util.NetUtil$SoMaxConnAction: java.lang.Integer run()>/java.io.FileReader.<init>/0	<java.util.concurrent.ConcurrentLinkedDeque: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentLinkedDeque: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.lang.String)>	<<immutable-context>>	<com.alibaba.nacos.shaded.io.grpc.netty.shaded.io.netty.util.internal.PlatformDependent: void addFilesystemOsClassifiers(java.util.Set,java.util.Set)>/java.io.File.<init>/0	<java.util.concurrent.ConcurrentLinkedDeque: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentLinkedDeque: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.lang.String)>	<<immutable-context>>	<com.alibaba.nacos.shaded.io.grpc.netty.shaded.io.netty.util.internal.PlatformDependent: java.io.File toDirectory(java.lang.String)>/java.io.File.<init>/0	<java.util.concurrent.ConcurrentLinkedDeque: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentLinkedDeque: void readObject(java.io.ObjectInputStream)>	<java.io.FileInputStream: void <init>(java.io.File)>	<<immutable-context>>	<com.alibaba.nacos.shaded.io.grpc.netty.shaded.io.netty.util.internal.PlatformDependent$4: java.lang.Boolean run()>/java.io.FileInputStream.<init>/0	<java.util.concurrent.ConcurrentLinkedDeque: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<datahub.shaded.org.springframework.aop.aspectj.annotation.InstantiationModelAwarePointcutAdvisorImpl: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<datahub.shaded.org.apache.commons.lang.enums.ValuedEnum: int getValueInOtherClassLoader(java.lang.Object)>/java.lang.reflect.Method.invoke/0	<datahub.shaded.org.springframework.aop.aspectj.annotation.InstantiationModelAwarePointcutAdvisorImpl: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<datahub.shaded.org.springframework.aop.aspectj.annotation.InstantiationModelAwarePointcutAdvisorImpl: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<datahub.shaded.org.apache.commons.lang.enum.Enum: java.lang.String getNameInOtherClassLoader(java.lang.Object)>/java.lang.reflect.Method.invoke/0	<datahub.shaded.org.springframework.aop.aspectj.annotation.InstantiationModelAwarePointcutAdvisorImpl: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<datahub.shaded.org.springframework.aop.aspectj.annotation.InstantiationModelAwarePointcutAdvisorImpl: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<datahub.shaded.org.apache.commons.lang.enums.Enum: java.lang.String getNameInOtherClassLoader(java.lang.Object)>/java.lang.reflect.Method.invoke/0	<datahub.shaded.org.springframework.aop.aspectj.annotation.InstantiationModelAwarePointcutAdvisorImpl: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<datahub.shaded.com.google.common.collect.LinkedHashMultimap: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<datahub.shaded.org.apache.commons.lang.enums.ValuedEnum: int getValueInOtherClassLoader(java.lang.Object)>/java.lang.reflect.Method.invoke/0	<datahub.shaded.com.google.common.collect.LinkedHashMultimap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<datahub.shaded.com.google.common.collect.LinkedHashMultimap: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<datahub.shaded.org.apache.commons.lang.enum.Enum: java.lang.String getNameInOtherClassLoader(java.lang.Object)>/java.lang.reflect.Method.invoke/0	<datahub.shaded.com.google.common.collect.LinkedHashMultimap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<datahub.shaded.com.google.common.collect.LinkedHashMultimap: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<datahub.shaded.org.apache.commons.lang.enums.Enum: java.lang.String getNameInOtherClassLoader(java.lang.Object)>/java.lang.reflect.Method.invoke/0	<datahub.shaded.com.google.common.collect.LinkedHashMultimap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<datahub.shaded.org.apache.commons.lang.time.FastDateFormat: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<datahub.shaded.org.apache.commons.lang.enums.ValuedEnum: int getValueInOtherClassLoader(java.lang.Object)>/java.lang.reflect.Method.invoke/0	<datahub.shaded.org.apache.commons.lang.time.FastDateFormat: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<datahub.shaded.org.apache.commons.lang.time.FastDateFormat: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<datahub.shaded.org.apache.commons.lang.enum.Enum: java.lang.String getNameInOtherClassLoader(java.lang.Object)>/java.lang.reflect.Method.invoke/0	<datahub.shaded.org.apache.commons.lang.time.FastDateFormat: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<datahub.shaded.org.apache.commons.lang.time.FastDateFormat: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<datahub.shaded.org.apache.commons.lang.enums.Enum: java.lang.String getNameInOtherClassLoader(java.lang.Object)>/java.lang.reflect.Method.invoke/0	<datahub.shaded.org.apache.commons.lang.time.FastDateFormat: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<com.fasterxml.jackson.databind.util.internal.PrivateMaxEntriesMap: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<org.apache.dubbo.config.AbstractConfig: java.lang.String toString()>/java.lang.reflect.Method.invoke/0	<com.fasterxml.jackson.databind.util.internal.PrivateMaxEntriesMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<com.fasterxml.jackson.databind.util.internal.PrivateMaxEntriesMap: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<org.apache.dubbo.config.AbstractConfig: boolean equals(java.lang.Object)>/java.lang.reflect.Method.invoke/0	<com.fasterxml.jackson.databind.util.internal.PrivateMaxEntriesMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<com.fasterxml.jackson.databind.util.internal.PrivateMaxEntriesMap: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<org.apache.dubbo.config.AbstractConfig: boolean equals(java.lang.Object)>/java.lang.reflect.Method.invoke/1	<com.fasterxml.jackson.databind.util.internal.PrivateMaxEntriesMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<com.fasterxml.jackson.databind.util.internal.PrivateMaxEntriesMap: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<org.apache.dubbo.config.AbstractConfig: int hashCode()>/java.lang.reflect.Method.invoke/0	<com.fasterxml.jackson.databind.util.internal.PrivateMaxEntriesMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<com.google.common.collect.MapMakerInternalMap: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<org.apache.dubbo.config.AbstractConfig: java.lang.String toString()>/java.lang.reflect.Method.invoke/0	<com.google.common.collect.MapMakerInternalMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<com.google.common.collect.MapMakerInternalMap: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<org.apache.dubbo.config.AbstractConfig: boolean equals(java.lang.Object)>/java.lang.reflect.Method.invoke/0	<com.google.common.collect.MapMakerInternalMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<com.google.common.collect.MapMakerInternalMap: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<org.apache.dubbo.config.AbstractConfig: boolean equals(java.lang.Object)>/java.lang.reflect.Method.invoke/1	<com.google.common.collect.MapMakerInternalMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<com.google.common.collect.MapMakerInternalMap: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<org.apache.dubbo.config.AbstractConfig: int hashCode()>/java.lang.reflect.Method.invoke/0	<com.google.common.collect.MapMakerInternalMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<com.google.gson.internal.LinkedTreeMap: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<org.apache.dubbo.config.AbstractConfig: java.lang.String toString()>/java.lang.reflect.Method.invoke/0	<com.google.gson.internal.LinkedTreeMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<com.google.gson.internal.LinkedTreeMap: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<org.apache.dubbo.config.AbstractConfig: boolean equals(java.lang.Object)>/java.lang.reflect.Method.invoke/0	<com.google.gson.internal.LinkedTreeMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<com.google.gson.internal.LinkedTreeMap: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<org.apache.dubbo.config.AbstractConfig: boolean equals(java.lang.Object)>/java.lang.reflect.Method.invoke/1	<com.google.gson.internal.LinkedTreeMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<com.google.gson.internal.LinkedTreeMap: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<org.apache.dubbo.config.AbstractConfig: int hashCode()>/java.lang.reflect.Method.invoke/0	<com.google.gson.internal.LinkedTreeMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentLinkedDeque: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<org.apache.dubbo.config.AbstractConfig: java.lang.String toString()>/java.lang.reflect.Method.invoke/0	<java.util.concurrent.ConcurrentLinkedDeque: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentLinkedDeque: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<org.apache.dubbo.config.AbstractConfig: boolean equals(java.lang.Object)>/java.lang.reflect.Method.invoke/0	<java.util.concurrent.ConcurrentLinkedDeque: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentLinkedDeque: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<org.apache.dubbo.config.AbstractConfig: boolean equals(java.lang.Object)>/java.lang.reflect.Method.invoke/1	<java.util.concurrent.ConcurrentLinkedDeque: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentLinkedDeque: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<org.apache.dubbo.config.AbstractConfig: int hashCode()>/java.lang.reflect.Method.invoke/0	<java.util.concurrent.ConcurrentLinkedDeque: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.PriorityQueue: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<org.apache.dubbo.config.AbstractConfig: java.lang.String toString()>/java.lang.reflect.Method.invoke/0	<java.util.PriorityQueue: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.PriorityQueue: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<org.apache.dubbo.config.AbstractConfig: boolean equals(java.lang.Object)>/java.lang.reflect.Method.invoke/0	<java.util.PriorityQueue: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.PriorityQueue: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<org.apache.dubbo.config.AbstractConfig: boolean equals(java.lang.Object)>/java.lang.reflect.Method.invoke/1	<java.util.PriorityQueue: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.PriorityQueue: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<org.apache.dubbo.config.AbstractConfig: int hashCode()>/java.lang.reflect.Method.invoke/0	<java.util.PriorityQueue: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<org.apache.dubbo.config.AbstractConfig: java.lang.String toString()>/java.lang.reflect.Method.invoke/0	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<org.apache.dubbo.config.AbstractConfig: boolean equals(java.lang.Object)>/java.lang.reflect.Method.invoke/0	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<org.apache.dubbo.config.AbstractConfig: boolean equals(java.lang.Object)>/java.lang.reflect.Method.invoke/1	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<org.apache.dubbo.config.AbstractConfig: int hashCode()>/java.lang.reflect.Method.invoke/0	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<datahub.shaded.com.google.common.collect.EnumHashBiMap: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<datahub.shaded.org.apache.commons.lang.enums.ValuedEnum: int getValueInOtherClassLoader(java.lang.Object)>/java.lang.reflect.Method.invoke/0	<datahub.shaded.com.google.common.collect.EnumHashBiMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<datahub.shaded.com.google.common.collect.EnumHashBiMap: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<datahub.shaded.org.apache.commons.lang.enum.Enum: java.lang.String getNameInOtherClassLoader(java.lang.Object)>/java.lang.reflect.Method.invoke/0	<datahub.shaded.com.google.common.collect.EnumHashBiMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<datahub.shaded.com.google.common.collect.EnumHashBiMap: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<datahub.shaded.org.apache.commons.lang.enums.Enum: java.lang.String getNameInOtherClassLoader(java.lang.Object)>/java.lang.reflect.Method.invoke/0	<datahub.shaded.com.google.common.collect.EnumHashBiMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeMap: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<datahub.shaded.org.apache.commons.lang.enums.ValuedEnum: int getValueInOtherClassLoader(java.lang.Object)>/java.lang.reflect.Method.invoke/0	<java.util.TreeMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeMap: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<datahub.shaded.org.apache.commons.lang.enum.Enum: java.lang.String getNameInOtherClassLoader(java.lang.Object)>/java.lang.reflect.Method.invoke/0	<java.util.TreeMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeMap: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<datahub.shaded.org.apache.commons.lang.enums.Enum: java.lang.String getNameInOtherClassLoader(java.lang.Object)>/java.lang.reflect.Method.invoke/0	<java.util.TreeMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.CopyOnWriteArrayList: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<datahub.shaded.org.apache.commons.lang.enums.ValuedEnum: int getValueInOtherClassLoader(java.lang.Object)>/java.lang.reflect.Method.invoke/0	<java.util.concurrent.CopyOnWriteArrayList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.CopyOnWriteArrayList: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<datahub.shaded.org.apache.commons.lang.enum.Enum: java.lang.String getNameInOtherClassLoader(java.lang.Object)>/java.lang.reflect.Method.invoke/0	<java.util.concurrent.CopyOnWriteArrayList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.CopyOnWriteArrayList: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<datahub.shaded.org.apache.commons.lang.enums.Enum: java.lang.String getNameInOtherClassLoader(java.lang.Object)>/java.lang.reflect.Method.invoke/0	<java.util.concurrent.CopyOnWriteArrayList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<datahub.shaded.org.springframework.aop.framework.ProxyFactoryBean: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<datahub.shaded.org.apache.commons.lang.enums.ValuedEnum: int getValueInOtherClassLoader(java.lang.Object)>/java.lang.reflect.Method.invoke/0	<datahub.shaded.org.springframework.aop.framework.ProxyFactoryBean: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<datahub.shaded.org.springframework.aop.framework.ProxyFactoryBean: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<datahub.shaded.org.apache.commons.lang.enum.Enum: java.lang.String getNameInOtherClassLoader(java.lang.Object)>/java.lang.reflect.Method.invoke/0	<datahub.shaded.org.springframework.aop.framework.ProxyFactoryBean: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<datahub.shaded.org.springframework.aop.framework.ProxyFactoryBean: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<datahub.shaded.org.apache.commons.lang.enums.Enum: java.lang.String getNameInOtherClassLoader(java.lang.Object)>/java.lang.reflect.Method.invoke/0	<datahub.shaded.org.springframework.aop.framework.ProxyFactoryBean: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<datahub.shaded.org.apache.commons.lang.enums.ValuedEnum: int getValueInOtherClassLoader(java.lang.Object)>/java.lang.reflect.Method.invoke/0	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<datahub.shaded.org.apache.commons.lang.enum.Enum: java.lang.String getNameInOtherClassLoader(java.lang.Object)>/java.lang.reflect.Method.invoke/0	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<datahub.shaded.org.apache.commons.lang.enums.Enum: java.lang.String getNameInOtherClassLoader(java.lang.Object)>/java.lang.reflect.Method.invoke/0	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<datahub.shaded.com.google.common.collect.ImmutableEnumMap: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<datahub.shaded.org.apache.commons.lang.enums.ValuedEnum: int getValueInOtherClassLoader(java.lang.Object)>/java.lang.reflect.Method.invoke/0	<datahub.shaded.com.google.common.collect.ImmutableEnumMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<datahub.shaded.com.google.common.collect.ImmutableEnumMap: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<datahub.shaded.org.apache.commons.lang.enum.Enum: java.lang.String getNameInOtherClassLoader(java.lang.Object)>/java.lang.reflect.Method.invoke/0	<datahub.shaded.com.google.common.collect.ImmutableEnumMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<datahub.shaded.com.google.common.collect.ImmutableEnumMap: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<datahub.shaded.org.apache.commons.lang.enums.Enum: java.lang.String getNameInOtherClassLoader(java.lang.Object)>/java.lang.reflect.Method.invoke/0	<datahub.shaded.com.google.common.collect.ImmutableEnumMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<datahub.shaded.com.google.common.collect.MutableClassToInstanceMap: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<datahub.shaded.org.apache.commons.lang.enums.ValuedEnum: int getValueInOtherClassLoader(java.lang.Object)>/java.lang.reflect.Method.invoke/0	<datahub.shaded.com.google.common.collect.MutableClassToInstanceMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<datahub.shaded.com.google.common.collect.MutableClassToInstanceMap: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<datahub.shaded.org.apache.commons.lang.enum.Enum: java.lang.String getNameInOtherClassLoader(java.lang.Object)>/java.lang.reflect.Method.invoke/0	<datahub.shaded.com.google.common.collect.MutableClassToInstanceMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<datahub.shaded.com.google.common.collect.MutableClassToInstanceMap: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<datahub.shaded.org.apache.commons.lang.enums.Enum: java.lang.String getNameInOtherClassLoader(java.lang.Object)>/java.lang.reflect.Method.invoke/0	<datahub.shaded.com.google.common.collect.MutableClassToInstanceMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<datahub.shaded.com.google.common.collect.TreeMultimap: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<datahub.shaded.org.apache.commons.lang.enums.ValuedEnum: int getValueInOtherClassLoader(java.lang.Object)>/java.lang.reflect.Method.invoke/0	<datahub.shaded.com.google.common.collect.TreeMultimap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<datahub.shaded.com.google.common.collect.TreeMultimap: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<datahub.shaded.org.apache.commons.lang.enum.Enum: java.lang.String getNameInOtherClassLoader(java.lang.Object)>/java.lang.reflect.Method.invoke/0	<datahub.shaded.com.google.common.collect.TreeMultimap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<datahub.shaded.com.google.common.collect.TreeMultimap: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<datahub.shaded.org.apache.commons.lang.enums.Enum: java.lang.String getNameInOtherClassLoader(java.lang.Object)>/java.lang.reflect.Method.invoke/0	<datahub.shaded.com.google.common.collect.TreeMultimap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.LinkedBlockingQueue: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<datahub.shaded.org.apache.commons.lang.enum.Enum: java.lang.String getNameInOtherClassLoader(java.lang.Object)>/java.lang.reflect.Method.invoke/0	<java.util.concurrent.LinkedBlockingQueue: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.LinkedBlockingQueue: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<datahub.shaded.org.apache.commons.lang.enums.Enum: java.lang.String getNameInOtherClassLoader(java.lang.Object)>/java.lang.reflect.Method.invoke/0	<java.util.concurrent.LinkedBlockingQueue: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<datahub.shaded.com.google.common.collect.RegularContiguousSet: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<datahub.shaded.org.apache.commons.lang.enums.ValuedEnum: int getValueInOtherClassLoader(java.lang.Object)>/java.lang.reflect.Method.invoke/0	<datahub.shaded.com.google.common.collect.RegularContiguousSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<datahub.shaded.com.google.common.collect.RegularContiguousSet: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<datahub.shaded.org.apache.commons.lang.enum.Enum: java.lang.String getNameInOtherClassLoader(java.lang.Object)>/java.lang.reflect.Method.invoke/0	<datahub.shaded.com.google.common.collect.RegularContiguousSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<datahub.shaded.com.google.common.collect.RegularContiguousSet: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<datahub.shaded.org.apache.commons.lang.enums.Enum: java.lang.String getNameInOtherClassLoader(java.lang.Object)>/java.lang.reflect.Method.invoke/0	<datahub.shaded.com.google.common.collect.RegularContiguousSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<datahub.shaded.jackson.core.io.SerializedString: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<datahub.shaded.org.apache.commons.lang.enums.ValuedEnum: int getValueInOtherClassLoader(java.lang.Object)>/java.lang.reflect.Method.invoke/0	<datahub.shaded.jackson.core.io.SerializedString: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<datahub.shaded.jackson.core.io.SerializedString: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<datahub.shaded.org.apache.commons.lang.enum.Enum: java.lang.String getNameInOtherClassLoader(java.lang.Object)>/java.lang.reflect.Method.invoke/0	<datahub.shaded.jackson.core.io.SerializedString: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<datahub.shaded.jackson.core.io.SerializedString: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<datahub.shaded.org.apache.commons.lang.enums.Enum: java.lang.String getNameInOtherClassLoader(java.lang.Object)>/java.lang.reflect.Method.invoke/0	<datahub.shaded.jackson.core.io.SerializedString: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentLinkedQueue: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<com.alibaba.nacos.shaded.io.grpc.netty.shaded.io.netty.util.internal.PlatformDependent0: void <clinit>()>/java.lang.reflect.Method.invoke/0	<java.util.concurrent.ConcurrentLinkedQueue: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentLinkedQueue: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<com.alibaba.nacos.shaded.io.grpc.netty.shaded.io.netty.util.internal.CleanerJava9$1: java.lang.Object run()>/java.lang.reflect.Method.invoke/0	<java.util.concurrent.ConcurrentLinkedQueue: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentLinkedQueue: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>	<<immutable-context>>	<com.alibaba.nacos.shaded.io.grpc.netty.shaded.io.netty.util.internal.PlatformDependent0: void <clinit>()>/java.lang.reflect.Constructor.newInstance/0	<java.util.concurrent.ConcurrentLinkedQueue: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentLinkedQueue: void readObject(java.io.ObjectInputStream)>	<java.io.FileReader: void <init>(java.io.File)>	<<immutable-context>>	<com.alibaba.nacos.shaded.io.grpc.netty.shaded.io.netty.util.NetUtil$SoMaxConnAction: java.lang.Integer run()>/java.io.FileReader.<init>/0	<java.util.concurrent.ConcurrentLinkedQueue: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentLinkedQueue: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.lang.String)>	<<immutable-context>>	<com.alibaba.nacos.shaded.io.grpc.netty.shaded.io.netty.util.internal.PlatformDependent: void addFilesystemOsClassifiers(java.util.Set,java.util.Set)>/java.io.File.<init>/0	<java.util.concurrent.ConcurrentLinkedQueue: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentLinkedQueue: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.lang.String)>	<<immutable-context>>	<com.alibaba.nacos.shaded.io.grpc.netty.shaded.io.netty.util.internal.PlatformDependent: java.io.File toDirectory(java.lang.String)>/java.io.File.<init>/0	<java.util.concurrent.ConcurrentLinkedQueue: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentLinkedQueue: void readObject(java.io.ObjectInputStream)>	<java.io.FileInputStream: void <init>(java.io.File)>	<<immutable-context>>	<com.alibaba.nacos.shaded.io.grpc.netty.shaded.io.netty.util.internal.PlatformDependent$4: java.lang.Boolean run()>/java.io.FileInputStream.<init>/0	<java.util.concurrent.ConcurrentLinkedQueue: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.SynchronousQueue: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<com.alibaba.nacos.shaded.io.grpc.netty.shaded.io.netty.util.internal.PlatformDependent0: void <clinit>()>/java.lang.reflect.Method.invoke/0	<java.util.concurrent.SynchronousQueue: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.SynchronousQueue: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<com.alibaba.nacos.shaded.io.grpc.netty.shaded.io.netty.util.internal.CleanerJava9$1: java.lang.Object run()>/java.lang.reflect.Method.invoke/0	<java.util.concurrent.SynchronousQueue: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.SynchronousQueue: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>	<<immutable-context>>	<com.alibaba.nacos.shaded.io.grpc.netty.shaded.io.netty.util.internal.PlatformDependent0: void <clinit>()>/java.lang.reflect.Constructor.newInstance/0	<java.util.concurrent.SynchronousQueue: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.SynchronousQueue: void readObject(java.io.ObjectInputStream)>	<java.io.FileReader: void <init>(java.io.File)>	<<immutable-context>>	<com.alibaba.nacos.shaded.io.grpc.netty.shaded.io.netty.util.NetUtil$SoMaxConnAction: java.lang.Integer run()>/java.io.FileReader.<init>/0	<java.util.concurrent.SynchronousQueue: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.SynchronousQueue: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.lang.String)>	<<immutable-context>>	<com.alibaba.nacos.shaded.io.grpc.netty.shaded.io.netty.util.internal.PlatformDependent: void addFilesystemOsClassifiers(java.util.Set,java.util.Set)>/java.io.File.<init>/0	<java.util.concurrent.SynchronousQueue: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.SynchronousQueue: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.lang.String)>	<<immutable-context>>	<com.alibaba.nacos.shaded.io.grpc.netty.shaded.io.netty.util.internal.PlatformDependent: java.io.File toDirectory(java.lang.String)>/java.io.File.<init>/0	<java.util.concurrent.SynchronousQueue: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.SynchronousQueue: void readObject(java.io.ObjectInputStream)>	<java.io.FileInputStream: void <init>(java.io.File)>	<<immutable-context>>	<com.alibaba.nacos.shaded.io.grpc.netty.shaded.io.netty.util.internal.PlatformDependent$4: java.lang.Boolean run()>/java.io.FileInputStream.<init>/0	<java.util.concurrent.SynchronousQueue: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.IdentityHashMap: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<com.alibaba.nacos.shaded.io.grpc.netty.shaded.io.netty.util.internal.PlatformDependent0: void <clinit>()>/java.lang.reflect.Method.invoke/0	<java.util.IdentityHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.IdentityHashMap: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<com.alibaba.nacos.shaded.io.grpc.netty.shaded.io.netty.util.internal.CleanerJava9$1: java.lang.Object run()>/java.lang.reflect.Method.invoke/0	<java.util.IdentityHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.IdentityHashMap: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>	<<immutable-context>>	<com.alibaba.nacos.shaded.io.grpc.netty.shaded.io.netty.util.internal.PlatformDependent0: void <clinit>()>/java.lang.reflect.Constructor.newInstance/0	<java.util.IdentityHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.IdentityHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.FileReader: void <init>(java.io.File)>	<<immutable-context>>	<com.alibaba.nacos.shaded.io.grpc.netty.shaded.io.netty.util.NetUtil$SoMaxConnAction: java.lang.Integer run()>/java.io.FileReader.<init>/0	<java.util.IdentityHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.IdentityHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.lang.String)>	<<immutable-context>>	<com.alibaba.nacos.shaded.io.grpc.netty.shaded.io.netty.util.internal.PlatformDependent: void addFilesystemOsClassifiers(java.util.Set,java.util.Set)>/java.io.File.<init>/0	<java.util.IdentityHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.IdentityHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.lang.String)>	<<immutable-context>>	<com.alibaba.nacos.shaded.io.grpc.netty.shaded.io.netty.util.internal.PlatformDependent: java.io.File toDirectory(java.lang.String)>/java.io.File.<init>/0	<java.util.IdentityHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.IdentityHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.FileInputStream: void <init>(java.io.File)>	<<immutable-context>>	<com.alibaba.nacos.shaded.io.grpc.netty.shaded.io.netty.util.internal.PlatformDependent$4: java.lang.Boolean run()>/java.io.FileInputStream.<init>/0	<java.util.IdentityHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.CopyOnWriteArrayList: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<com.alibaba.nacos.shaded.io.grpc.netty.shaded.io.netty.util.internal.PlatformDependent0: void <clinit>()>/java.lang.reflect.Method.invoke/0	<java.util.concurrent.CopyOnWriteArrayList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.CopyOnWriteArrayList: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<com.alibaba.nacos.shaded.io.grpc.netty.shaded.io.netty.util.internal.CleanerJava9$1: java.lang.Object run()>/java.lang.reflect.Method.invoke/0	<java.util.concurrent.CopyOnWriteArrayList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.CopyOnWriteArrayList: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>	<<immutable-context>>	<com.alibaba.nacos.shaded.io.grpc.netty.shaded.io.netty.util.internal.PlatformDependent0: void <clinit>()>/java.lang.reflect.Constructor.newInstance/0	<java.util.concurrent.CopyOnWriteArrayList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.CopyOnWriteArrayList: void readObject(java.io.ObjectInputStream)>	<java.io.FileReader: void <init>(java.io.File)>	<<immutable-context>>	<com.alibaba.nacos.shaded.io.grpc.netty.shaded.io.netty.util.NetUtil$SoMaxConnAction: java.lang.Integer run()>/java.io.FileReader.<init>/0	<java.util.concurrent.CopyOnWriteArrayList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.CopyOnWriteArrayList: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.lang.String)>	<<immutable-context>>	<com.alibaba.nacos.shaded.io.grpc.netty.shaded.io.netty.util.internal.PlatformDependent: void addFilesystemOsClassifiers(java.util.Set,java.util.Set)>/java.io.File.<init>/0	<java.util.concurrent.CopyOnWriteArrayList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.CopyOnWriteArrayList: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.lang.String)>	<<immutable-context>>	<com.alibaba.nacos.shaded.io.grpc.netty.shaded.io.netty.util.internal.PlatformDependent: java.io.File toDirectory(java.lang.String)>/java.io.File.<init>/0	<java.util.concurrent.CopyOnWriteArrayList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.CopyOnWriteArrayList: void readObject(java.io.ObjectInputStream)>	<java.io.FileInputStream: void <init>(java.io.File)>	<<immutable-context>>	<com.alibaba.nacos.shaded.io.grpc.netty.shaded.io.netty.util.internal.PlatformDependent$4: java.lang.Boolean run()>/java.io.FileInputStream.<init>/0	<java.util.concurrent.CopyOnWriteArrayList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<com.alibaba.nacos.shaded.com.google.gson.internal.LinkedTreeMap: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<com.alibaba.nacos.shaded.io.grpc.netty.shaded.io.netty.util.internal.PlatformDependent0: void <clinit>()>/java.lang.reflect.Method.invoke/0	<com.alibaba.nacos.shaded.com.google.gson.internal.LinkedTreeMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<com.alibaba.nacos.shaded.com.google.gson.internal.LinkedTreeMap: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<com.alibaba.nacos.shaded.io.grpc.netty.shaded.io.netty.util.internal.CleanerJava9$1: java.lang.Object run()>/java.lang.reflect.Method.invoke/0	<com.alibaba.nacos.shaded.com.google.gson.internal.LinkedTreeMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<com.alibaba.nacos.shaded.com.google.gson.internal.LinkedTreeMap: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>	<<immutable-context>>	<com.alibaba.nacos.shaded.io.grpc.netty.shaded.io.netty.util.internal.PlatformDependent0: void <clinit>()>/java.lang.reflect.Constructor.newInstance/0	<com.alibaba.nacos.shaded.com.google.gson.internal.LinkedTreeMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<com.alibaba.nacos.shaded.com.google.gson.internal.LinkedTreeMap: void readObject(java.io.ObjectInputStream)>	<java.io.FileReader: void <init>(java.io.File)>	<<immutable-context>>	<com.alibaba.nacos.shaded.io.grpc.netty.shaded.io.netty.util.NetUtil$SoMaxConnAction: java.lang.Integer run()>/java.io.FileReader.<init>/0	<com.alibaba.nacos.shaded.com.google.gson.internal.LinkedTreeMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<com.alibaba.nacos.shaded.com.google.gson.internal.LinkedTreeMap: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.lang.String)>	<<immutable-context>>	<com.alibaba.nacos.shaded.io.grpc.netty.shaded.io.netty.util.internal.PlatformDependent: void addFilesystemOsClassifiers(java.util.Set,java.util.Set)>/java.io.File.<init>/0	<com.alibaba.nacos.shaded.com.google.gson.internal.LinkedTreeMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<com.alibaba.nacos.shaded.com.google.gson.internal.LinkedTreeMap: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.lang.String)>	<<immutable-context>>	<com.alibaba.nacos.shaded.io.grpc.netty.shaded.io.netty.util.internal.PlatformDependent: java.io.File toDirectory(java.lang.String)>/java.io.File.<init>/0	<com.alibaba.nacos.shaded.com.google.gson.internal.LinkedTreeMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<com.alibaba.nacos.shaded.com.google.gson.internal.LinkedTreeMap: void readObject(java.io.ObjectInputStream)>	<java.io.FileInputStream: void <init>(java.io.File)>	<<immutable-context>>	<com.alibaba.nacos.shaded.io.grpc.netty.shaded.io.netty.util.internal.PlatformDependent$4: java.lang.Boolean run()>/java.io.FileInputStream.<init>/0	<com.alibaba.nacos.shaded.com.google.gson.internal.LinkedTreeMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<com.alibaba.nacos.shaded.com.google.common.collect.AbstractMapBasedMultiset: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<com.alibaba.nacos.shaded.io.grpc.netty.shaded.io.netty.util.internal.PlatformDependent0: void <clinit>()>/java.lang.reflect.Method.invoke/0	<com.alibaba.nacos.shaded.com.google.common.collect.AbstractMapBasedMultiset: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<com.alibaba.nacos.shaded.com.google.common.collect.AbstractMapBasedMultiset: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<com.alibaba.nacos.shaded.io.grpc.netty.shaded.io.netty.util.internal.CleanerJava9$1: java.lang.Object run()>/java.lang.reflect.Method.invoke/0	<com.alibaba.nacos.shaded.com.google.common.collect.AbstractMapBasedMultiset: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<com.alibaba.nacos.shaded.com.google.common.collect.AbstractMapBasedMultiset: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>	<<immutable-context>>	<com.alibaba.nacos.shaded.io.grpc.netty.shaded.io.netty.util.internal.PlatformDependent0: void <clinit>()>/java.lang.reflect.Constructor.newInstance/0	<com.alibaba.nacos.shaded.com.google.common.collect.AbstractMapBasedMultiset: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<com.alibaba.nacos.shaded.com.google.common.collect.AbstractMapBasedMultiset: void readObject(java.io.ObjectInputStream)>	<java.io.FileReader: void <init>(java.io.File)>	<<immutable-context>>	<com.alibaba.nacos.shaded.io.grpc.netty.shaded.io.netty.util.NetUtil$SoMaxConnAction: java.lang.Integer run()>/java.io.FileReader.<init>/0	<com.alibaba.nacos.shaded.com.google.common.collect.AbstractMapBasedMultiset: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<com.alibaba.nacos.shaded.com.google.common.collect.AbstractMapBasedMultiset: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.lang.String)>	<<immutable-context>>	<com.alibaba.nacos.shaded.io.grpc.netty.shaded.io.netty.util.internal.PlatformDependent: void addFilesystemOsClassifiers(java.util.Set,java.util.Set)>/java.io.File.<init>/0	<com.alibaba.nacos.shaded.com.google.common.collect.AbstractMapBasedMultiset: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<com.alibaba.nacos.shaded.com.google.common.collect.AbstractMapBasedMultiset: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.lang.String)>	<<immutable-context>>	<com.alibaba.nacos.shaded.io.grpc.netty.shaded.io.netty.util.internal.PlatformDependent: java.io.File toDirectory(java.lang.String)>/java.io.File.<init>/0	<com.alibaba.nacos.shaded.com.google.common.collect.AbstractMapBasedMultiset: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<com.alibaba.nacos.shaded.com.google.common.collect.AbstractMapBasedMultiset: void readObject(java.io.ObjectInputStream)>	<java.io.FileInputStream: void <init>(java.io.File)>	<<immutable-context>>	<com.alibaba.nacos.shaded.io.grpc.netty.shaded.io.netty.util.internal.PlatformDependent$4: java.lang.Boolean run()>/java.io.FileInputStream.<init>/0	<com.alibaba.nacos.shaded.com.google.common.collect.AbstractMapBasedMultiset: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<com.alibaba.nacos.shaded.com.google.protobuf.NioByteString: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<com.alibaba.nacos.shaded.io.grpc.netty.shaded.io.netty.util.internal.PlatformDependent0: void <clinit>()>/java.lang.reflect.Method.invoke/0	<com.alibaba.nacos.shaded.com.google.protobuf.NioByteString: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<com.alibaba.nacos.shaded.com.google.protobuf.NioByteString: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<com.alibaba.nacos.shaded.io.grpc.netty.shaded.io.netty.util.internal.CleanerJava9$1: java.lang.Object run()>/java.lang.reflect.Method.invoke/0	<com.alibaba.nacos.shaded.com.google.protobuf.NioByteString: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<com.alibaba.nacos.shaded.com.google.protobuf.NioByteString: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>	<<immutable-context>>	<com.alibaba.nacos.shaded.io.grpc.netty.shaded.io.netty.util.internal.PlatformDependent0: void <clinit>()>/java.lang.reflect.Constructor.newInstance/0	<com.alibaba.nacos.shaded.com.google.protobuf.NioByteString: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<com.alibaba.nacos.shaded.com.google.protobuf.NioByteString: void readObject(java.io.ObjectInputStream)>	<java.io.FileReader: void <init>(java.io.File)>	<<immutable-context>>	<com.alibaba.nacos.shaded.io.grpc.netty.shaded.io.netty.util.NetUtil$SoMaxConnAction: java.lang.Integer run()>/java.io.FileReader.<init>/0	<com.alibaba.nacos.shaded.com.google.protobuf.NioByteString: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<com.alibaba.nacos.shaded.com.google.protobuf.NioByteString: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.lang.String)>	<<immutable-context>>	<com.alibaba.nacos.shaded.io.grpc.netty.shaded.io.netty.util.internal.PlatformDependent: void addFilesystemOsClassifiers(java.util.Set,java.util.Set)>/java.io.File.<init>/0	<com.alibaba.nacos.shaded.com.google.protobuf.NioByteString: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<com.alibaba.nacos.shaded.com.google.protobuf.NioByteString: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.lang.String)>	<<immutable-context>>	<com.alibaba.nacos.shaded.io.grpc.netty.shaded.io.netty.util.internal.PlatformDependent: java.io.File toDirectory(java.lang.String)>/java.io.File.<init>/0	<com.alibaba.nacos.shaded.com.google.protobuf.NioByteString: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<com.alibaba.nacos.shaded.com.google.protobuf.NioByteString: void readObject(java.io.ObjectInputStream)>	<java.io.FileInputStream: void <init>(java.io.File)>	<<immutable-context>>	<com.alibaba.nacos.shaded.io.grpc.netty.shaded.io.netty.util.internal.PlatformDependent$4: java.lang.Boolean run()>/java.io.FileInputStream.<init>/0	<com.alibaba.nacos.shaded.com.google.protobuf.NioByteString: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<cn.hutool.core.date.format.FastDateParser: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void println(java.lang.String)>	<<immutable-context>>	<cn.hutool.core.lang.tree.Tree: void printTree(cn.hutool.core.lang.tree.Tree,java.io.PrintWriter,int)>/java.io.PrintWriter.println/0	<cn.hutool.core.date.format.FastDateParser: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<cn.hutool.core.date.format.FastDateParser: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(int)>	<<immutable-context>>	<cn.hutool.json.serialize.JSONWriter: cn.hutool.json.serialize.JSONWriter writeRaw(char)>/java.io.Writer.write/0	<cn.hutool.core.date.format.FastDateParser: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<cn.hutool.core.date.format.FastDateParser: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(char[])>	<<immutable-context>>	<cn.hutool.core.text.csv.CsvWriter: cn.hutool.core.text.csv.CsvWriter writeLine()>/java.io.Writer.write/0	<cn.hutool.core.date.format.FastDateParser: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void println(java.lang.String)>	<<immutable-context>>	<cn.hutool.core.lang.tree.Tree: void printTree(cn.hutool.core.lang.tree.Tree,java.io.PrintWriter,int)>/java.io.PrintWriter.println/0	<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(int)>	<<immutable-context>>	<cn.hutool.json.serialize.JSONWriter: cn.hutool.json.serialize.JSONWriter writeRaw(char)>/java.io.Writer.write/0	<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.IdentityHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void println(java.lang.String)>	<<immutable-context>>	<cn.hutool.core.lang.tree.Tree: void printTree(cn.hutool.core.lang.tree.Tree,java.io.PrintWriter,int)>/java.io.PrintWriter.println/0	<java.util.IdentityHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.IdentityHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(int)>	<<immutable-context>>	<cn.hutool.json.serialize.JSONWriter: cn.hutool.json.serialize.JSONWriter writeRaw(char)>/java.io.Writer.write/0	<java.util.IdentityHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.LinkedBlockingQueue: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void println(java.lang.String)>	<<immutable-context>>	<cn.hutool.core.lang.tree.Tree: void printTree(cn.hutool.core.lang.tree.Tree,java.io.PrintWriter,int)>/java.io.PrintWriter.println/0	<java.util.concurrent.LinkedBlockingQueue: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.LinkedBlockingQueue: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(int)>	<<immutable-context>>	<cn.hutool.json.serialize.JSONWriter: cn.hutool.json.serialize.JSONWriter writeRaw(char)>/java.io.Writer.write/0	<java.util.concurrent.LinkedBlockingQueue: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void println(java.lang.String)>	<<immutable-context>>	<cn.hutool.core.lang.tree.Tree: void printTree(cn.hutool.core.lang.tree.Tree,java.io.PrintWriter,int)>/java.io.PrintWriter.println/0	<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(int)>	<<immutable-context>>	<cn.hutool.json.serialize.JSONWriter: cn.hutool.json.serialize.JSONWriter writeRaw(char)>/java.io.Writer.write/0	<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.HashMap: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void println(java.lang.String)>	<<immutable-context>>	<cn.hutool.core.lang.tree.Tree: void printTree(cn.hutool.core.lang.tree.Tree,java.io.PrintWriter,int)>/java.io.PrintWriter.println/0	<java.util.HashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.HashMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(int)>	<<immutable-context>>	<cn.hutool.json.serialize.JSONWriter: cn.hutool.json.serialize.JSONWriter writeRaw(char)>/java.io.Writer.write/0	<java.util.HashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.HashMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(char[])>	<<immutable-context>>	<cn.hutool.core.text.csv.CsvWriter: cn.hutool.core.text.csv.CsvWriter writeLine()>/java.io.Writer.write/0	<java.util.HashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void println(java.lang.String)>	<<immutable-context>>	<cn.hutool.core.lang.tree.Tree: void printTree(cn.hutool.core.lang.tree.Tree,java.io.PrintWriter,int)>/java.io.PrintWriter.println/0	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(int)>	<<immutable-context>>	<cn.hutool.json.serialize.JSONWriter: cn.hutool.json.serialize.JSONWriter writeRaw(char)>/java.io.Writer.write/0	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(char[])>	<<immutable-context>>	<cn.hutool.core.text.csv.CsvWriter: cn.hutool.core.text.csv.CsvWriter writeLine()>/java.io.Writer.write/0	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.io.File,java.lang.String)>	<<immutable-context>>	<org.apache.commons.io.filefilter.WildcardFilter: boolean accept(java.io.File,java.lang.String)>/java.io.File.<init>/0	<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.io.File,java.lang.String)>	<<immutable-context>>	<org.apache.commons.io.filefilter.AbstractFileFilter: boolean accept(java.io.File,java.lang.String)>/java.io.File.<init>/0	<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.io.File,java.lang.String)>	<<immutable-context>>	<org.apache.commons.io.filefilter.WildcardFilter: boolean accept(java.io.File,java.lang.String)>/java.io.File.<init>/0	<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.io.File,java.lang.String)>	<<immutable-context>>	<org.apache.commons.io.filefilter.AbstractFileFilter: boolean accept(java.io.File,java.lang.String)>/java.io.File.<init>/0	<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.SynchronousQueue: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.io.File,java.lang.String)>	<<immutable-context>>	<org.apache.commons.io.filefilter.WildcardFilter: boolean accept(java.io.File,java.lang.String)>/java.io.File.<init>/0	<java.util.concurrent.SynchronousQueue: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.SynchronousQueue: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.io.File,java.lang.String)>	<<immutable-context>>	<org.apache.commons.io.filefilter.AbstractFileFilter: boolean accept(java.io.File,java.lang.String)>/java.io.File.<init>/0	<java.util.concurrent.SynchronousQueue: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.io.File,java.lang.String)>	<<immutable-context>>	<org.apache.commons.io.filefilter.WildcardFilter: boolean accept(java.io.File,java.lang.String)>/java.io.File.<init>/0	<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.io.File,java.lang.String)>	<<immutable-context>>	<org.apache.commons.io.filefilter.AbstractFileFilter: boolean accept(java.io.File,java.lang.String)>/java.io.File.<init>/0	<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.LinkedBlockingDeque: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.io.File,java.lang.String)>	<<immutable-context>>	<org.apache.commons.io.filefilter.WildcardFilter: boolean accept(java.io.File,java.lang.String)>/java.io.File.<init>/0	<java.util.concurrent.LinkedBlockingDeque: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.LinkedBlockingDeque: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.io.File,java.lang.String)>	<<immutable-context>>	<org.apache.commons.io.filefilter.AbstractFileFilter: boolean accept(java.io.File,java.lang.String)>/java.io.File.<init>/0	<java.util.concurrent.LinkedBlockingDeque: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.io.File,java.lang.String)>	<<immutable-context>>	<org.apache.commons.io.filefilter.WildcardFilter: boolean accept(java.io.File,java.lang.String)>/java.io.File.<init>/0	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.io.File,java.lang.String)>	<<immutable-context>>	<org.apache.commons.io.filefilter.AbstractFileFilter: boolean accept(java.io.File,java.lang.String)>/java.io.File.<init>/0	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<jsr166y.LinkedTransferQueue: void readObject(java.io.ObjectInputStream)>	<java.io.FileInputStream: void <init>(java.lang.String)>	<<immutable-context>>	<water.network.SSLSocketChannelFactory: javax.net.ssl.TrustManager[] trustManager()>/java.io.FileInputStream.<init>/0	<jsr166y.LinkedTransferQueue: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<jsr166y.LinkedTransferQueue: void readObject(java.io.ObjectInputStream)>	<java.io.FileInputStream: void <init>(java.lang.String)>	<<immutable-context>>	<water.network.SSLSocketChannelFactory: javax.net.ssl.KeyManager[] keyManager()>/java.io.FileInputStream.<init>/0	<jsr166y.LinkedTransferQueue: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<jsr166y.LinkedTransferQueue: void readObject(java.io.ObjectInputStream)>	<java.io.FileInputStream: void <init>(java.io.File)>	<<immutable-context>>	<water.network.SSLSocketChannelFactory: void <init>()>/java.io.FileInputStream.<init>/0	<jsr166y.LinkedTransferQueue: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<jsr166y.LinkedTransferQueue: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.lang.String)>	<<immutable-context>>	<water.util.Log: java.io.File determineLogDir()>/java.io.File.<init>/3	<jsr166y.LinkedTransferQueue: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<jsr166y.LinkedTransferQueue: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.lang.String)>	<<immutable-context>>	<water.network.SSLProperties: java.lang.String expandPath(java.lang.String)>/java.io.File.<init>/0	<jsr166y.LinkedTransferQueue: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<jsr166y.LinkedTransferQueue: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.io.File,java.lang.String)>	<<immutable-context>>	<water.util.Log: java.io.File determineLogDir()>/java.io.File.<init>/4	<jsr166y.LinkedTransferQueue: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<jsr166y.LinkedTransferQueue: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.io.File,java.lang.String)>	<<immutable-context>>	<water.network.SSLProperties: java.lang.String expandPath(java.lang.String)>/java.io.File.<init>/1	<jsr166y.LinkedTransferQueue: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>	<java.io.FileInputStream: void <init>(java.lang.String)>	<<immutable-context>>	<water.network.SSLSocketChannelFactory: javax.net.ssl.TrustManager[] trustManager()>/java.io.FileInputStream.<init>/0	<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>	<java.io.FileInputStream: void <init>(java.lang.String)>	<<immutable-context>>	<water.network.SSLSocketChannelFactory: javax.net.ssl.KeyManager[] keyManager()>/java.io.FileInputStream.<init>/0	<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>	<java.io.FileInputStream: void <init>(java.io.File)>	<<immutable-context>>	<water.network.SSLSocketChannelFactory: void <init>()>/java.io.FileInputStream.<init>/0	<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.lang.String)>	<<immutable-context>>	<water.util.Log: java.io.File determineLogDir()>/java.io.File.<init>/3	<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.lang.String)>	<<immutable-context>>	<water.network.SSLProperties: java.lang.String expandPath(java.lang.String)>/java.io.File.<init>/0	<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.io.File,java.lang.String)>	<<immutable-context>>	<water.util.Log: java.io.File determineLogDir()>/java.io.File.<init>/4	<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.io.File,java.lang.String)>	<<immutable-context>>	<water.network.SSLProperties: java.lang.String expandPath(java.lang.String)>/java.io.File.<init>/1	<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<water.nbhm.NonBlockingHashMapLong: void readObject(java.io.ObjectInputStream)>	<java.io.FileInputStream: void <init>(java.lang.String)>	<<immutable-context>>	<water.network.SSLSocketChannelFactory: javax.net.ssl.TrustManager[] trustManager()>/java.io.FileInputStream.<init>/0	<water.nbhm.NonBlockingHashMapLong: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<water.nbhm.NonBlockingHashMapLong: void readObject(java.io.ObjectInputStream)>	<java.io.FileInputStream: void <init>(java.lang.String)>	<<immutable-context>>	<water.network.SSLSocketChannelFactory: javax.net.ssl.KeyManager[] keyManager()>/java.io.FileInputStream.<init>/0	<water.nbhm.NonBlockingHashMapLong: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<water.nbhm.NonBlockingHashMapLong: void readObject(java.io.ObjectInputStream)>	<java.io.FileInputStream: void <init>(java.io.File)>	<<immutable-context>>	<water.network.SSLSocketChannelFactory: void <init>()>/java.io.FileInputStream.<init>/0	<water.nbhm.NonBlockingHashMapLong: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<water.nbhm.NonBlockingHashMapLong: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.lang.String)>	<<immutable-context>>	<water.util.Log: java.io.File determineLogDir()>/java.io.File.<init>/3	<water.nbhm.NonBlockingHashMapLong: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<water.nbhm.NonBlockingHashMapLong: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.lang.String)>	<<immutable-context>>	<water.network.SSLProperties: java.lang.String expandPath(java.lang.String)>/java.io.File.<init>/0	<water.nbhm.NonBlockingHashMapLong: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<water.nbhm.NonBlockingHashMapLong: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.io.File,java.lang.String)>	<<immutable-context>>	<water.util.Log: java.io.File determineLogDir()>/java.io.File.<init>/4	<water.nbhm.NonBlockingHashMapLong: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<water.nbhm.NonBlockingHashMapLong: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.io.File,java.lang.String)>	<<immutable-context>>	<water.network.SSLProperties: java.lang.String expandPath(java.lang.String)>/java.io.File.<init>/1	<water.nbhm.NonBlockingHashMapLong: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<water.nbhm.NonBlockingIdentityHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.FileInputStream: void <init>(java.lang.String)>	<<immutable-context>>	<water.network.SSLSocketChannelFactory: javax.net.ssl.TrustManager[] trustManager()>/java.io.FileInputStream.<init>/0	<water.nbhm.NonBlockingIdentityHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<water.nbhm.NonBlockingIdentityHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.FileInputStream: void <init>(java.lang.String)>	<<immutable-context>>	<water.network.SSLSocketChannelFactory: javax.net.ssl.KeyManager[] keyManager()>/java.io.FileInputStream.<init>/0	<water.nbhm.NonBlockingIdentityHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<water.nbhm.NonBlockingIdentityHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.FileInputStream: void <init>(java.io.File)>	<<immutable-context>>	<water.network.SSLSocketChannelFactory: void <init>()>/java.io.FileInputStream.<init>/0	<water.nbhm.NonBlockingIdentityHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<water.nbhm.NonBlockingIdentityHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.lang.String)>	<<immutable-context>>	<water.util.Log: java.io.File determineLogDir()>/java.io.File.<init>/3	<water.nbhm.NonBlockingIdentityHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<water.nbhm.NonBlockingIdentityHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.lang.String)>	<<immutable-context>>	<water.network.SSLProperties: java.lang.String expandPath(java.lang.String)>/java.io.File.<init>/0	<water.nbhm.NonBlockingIdentityHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<water.nbhm.NonBlockingIdentityHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.io.File,java.lang.String)>	<<immutable-context>>	<water.util.Log: java.io.File determineLogDir()>/java.io.File.<init>/4	<water.nbhm.NonBlockingIdentityHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<water.nbhm.NonBlockingIdentityHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.io.File,java.lang.String)>	<<immutable-context>>	<water.network.SSLProperties: java.lang.String expandPath(java.lang.String)>/java.io.File.<init>/1	<water.nbhm.NonBlockingIdentityHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.SynchronousQueue: void readObject(java.io.ObjectInputStream)>	<java.io.FileInputStream: void <init>(java.lang.String)>	<<immutable-context>>	<water.network.SSLSocketChannelFactory: javax.net.ssl.TrustManager[] trustManager()>/java.io.FileInputStream.<init>/0	<java.util.concurrent.SynchronousQueue: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.SynchronousQueue: void readObject(java.io.ObjectInputStream)>	<java.io.FileInputStream: void <init>(java.lang.String)>	<<immutable-context>>	<water.network.SSLSocketChannelFactory: javax.net.ssl.KeyManager[] keyManager()>/java.io.FileInputStream.<init>/0	<java.util.concurrent.SynchronousQueue: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.SynchronousQueue: void readObject(java.io.ObjectInputStream)>	<java.io.FileInputStream: void <init>(java.io.File)>	<<immutable-context>>	<water.network.SSLSocketChannelFactory: void <init>()>/java.io.FileInputStream.<init>/0	<java.util.concurrent.SynchronousQueue: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.SynchronousQueue: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.lang.String)>	<<immutable-context>>	<water.util.Log: java.io.File determineLogDir()>/java.io.File.<init>/3	<java.util.concurrent.SynchronousQueue: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.SynchronousQueue: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.lang.String)>	<<immutable-context>>	<water.network.SSLProperties: java.lang.String expandPath(java.lang.String)>/java.io.File.<init>/0	<java.util.concurrent.SynchronousQueue: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.SynchronousQueue: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.io.File,java.lang.String)>	<<immutable-context>>	<water.util.Log: java.io.File determineLogDir()>/java.io.File.<init>/4	<java.util.concurrent.SynchronousQueue: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.SynchronousQueue: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.io.File,java.lang.String)>	<<immutable-context>>	<water.network.SSLProperties: java.lang.String expandPath(java.lang.String)>/java.io.File.<init>/1	<java.util.concurrent.SynchronousQueue: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.FileInputStream: void <init>(java.lang.String)>	<<immutable-context>>	<water.network.SSLSocketChannelFactory: javax.net.ssl.TrustManager[] trustManager()>/java.io.FileInputStream.<init>/0	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.FileInputStream: void <init>(java.lang.String)>	<<immutable-context>>	<water.network.SSLSocketChannelFactory: javax.net.ssl.KeyManager[] keyManager()>/java.io.FileInputStream.<init>/0	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.FileInputStream: void <init>(java.io.File)>	<<immutable-context>>	<water.network.SSLSocketChannelFactory: void <init>()>/java.io.FileInputStream.<init>/0	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.lang.String)>	<<immutable-context>>	<water.util.Log: java.io.File determineLogDir()>/java.io.File.<init>/3	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.lang.String)>	<<immutable-context>>	<water.network.SSLProperties: java.lang.String expandPath(java.lang.String)>/java.io.File.<init>/0	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.io.File,java.lang.String)>	<<immutable-context>>	<water.util.Log: java.io.File determineLogDir()>/java.io.File.<init>/4	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.io.File,java.lang.String)>	<<immutable-context>>	<water.network.SSLProperties: java.lang.String expandPath(java.lang.String)>/java.io.File.<init>/1	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.HashMap: void readObject(java.io.ObjectInputStream)>	<java.io.FileInputStream: void <init>(java.lang.String)>	<<immutable-context>>	<water.network.SSLSocketChannelFactory: javax.net.ssl.TrustManager[] trustManager()>/java.io.FileInputStream.<init>/0	<java.util.HashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.HashMap: void readObject(java.io.ObjectInputStream)>	<java.io.FileInputStream: void <init>(java.lang.String)>	<<immutable-context>>	<water.network.SSLSocketChannelFactory: javax.net.ssl.KeyManager[] keyManager()>/java.io.FileInputStream.<init>/0	<java.util.HashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.HashMap: void readObject(java.io.ObjectInputStream)>	<java.io.FileInputStream: void <init>(java.io.File)>	<<immutable-context>>	<water.network.SSLSocketChannelFactory: void <init>()>/java.io.FileInputStream.<init>/0	<java.util.HashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.HashMap: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.lang.String)>	<<immutable-context>>	<water.util.Log: java.io.File determineLogDir()>/java.io.File.<init>/3	<java.util.HashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.HashMap: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.lang.String)>	<<immutable-context>>	<water.network.SSLProperties: java.lang.String expandPath(java.lang.String)>/java.io.File.<init>/0	<java.util.HashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.HashMap: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.io.File,java.lang.String)>	<<immutable-context>>	<water.util.Log: java.io.File determineLogDir()>/java.io.File.<init>/4	<java.util.HashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.HashMap: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.io.File,java.lang.String)>	<<immutable-context>>	<water.network.SSLProperties: java.lang.String expandPath(java.lang.String)>/java.io.File.<init>/1	<java.util.HashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.CopyOnWriteArrayList: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void print(java.lang.String)>	<<immutable-context>>	<org.gradle.internal.exceptions.DefaultMultiCauseException: void printSingleCauseStackTrace(java.io.PrintWriter)>/java.io.PrintWriter.print/0	<java.util.concurrent.CopyOnWriteArrayList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.CopyOnWriteArrayList: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void print(java.lang.String)>	<<immutable-context>>	<org.gradle.internal.impldep.org.apache.commons.lang.exception.NestableDelegate: void printStackTrace(java.io.PrintWriter)>/java.io.PrintWriter.print/0	<java.util.concurrent.CopyOnWriteArrayList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.CopyOnWriteArrayList: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void println(java.lang.String)>	<<immutable-context>>	<org.gradle.internal.impldep.org.apache.commons.lang.exception.NestableDelegate: void printStackTrace(java.io.PrintWriter)>/java.io.PrintWriter.println/0	<java.util.concurrent.CopyOnWriteArrayList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.CopyOnWriteArrayList: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.lang.String)>	<<immutable-context>>	<org.gradle.internal.classloader.ClasspathUtil: java.io.File getClasspathForResource(java.net.URL,java.lang.String)>/java.io.File.<init>/0	<java.util.concurrent.CopyOnWriteArrayList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.CopyOnWriteArrayList: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.lang.String)>	<<immutable-context>>	<org.gradle.internal.classloader.ClasspathUtil: java.io.File getClasspathForResource(java.net.URL,java.lang.String)>/java.io.File.<init>/1	<java.util.concurrent.CopyOnWriteArrayList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.CopyOnWriteArrayList: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.lang.String)>	<<immutable-context>>	<org.gradle.initialization.BuildLayoutParameters: java.io.File findGradleUserHomeDir()>/java.io.File.<init>/0	<java.util.concurrent.CopyOnWriteArrayList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.CopyOnWriteArrayList: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.lang.String)>	<<immutable-context>>	<org.gradle.initialization.BuildLayoutParameters: void <clinit>()>/java.io.File.<init>/0	<java.util.concurrent.CopyOnWriteArrayList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<org.gradle.internal.impldep.com.google.common.collect.HashMultiset: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void print(java.lang.String)>	<<immutable-context>>	<org.gradle.internal.exceptions.DefaultMultiCauseException: void printSingleCauseStackTrace(java.io.PrintWriter)>/java.io.PrintWriter.print/0	<org.gradle.internal.impldep.com.google.common.collect.HashMultiset: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<org.gradle.internal.impldep.com.google.common.collect.HashMultiset: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void print(java.lang.String)>	<<immutable-context>>	<org.gradle.internal.impldep.org.apache.commons.lang.exception.NestableDelegate: void printStackTrace(java.io.PrintWriter)>/java.io.PrintWriter.print/0	<org.gradle.internal.impldep.com.google.common.collect.HashMultiset: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<org.gradle.internal.impldep.com.google.common.collect.HashMultiset: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void println(java.lang.String)>	<<immutable-context>>	<org.gradle.internal.impldep.org.apache.commons.lang.exception.NestableDelegate: void printStackTrace(java.io.PrintWriter)>/java.io.PrintWriter.println/0	<org.gradle.internal.impldep.com.google.common.collect.HashMultiset: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<org.gradle.internal.impldep.com.google.common.collect.HashMultiset: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.lang.String)>	<<immutable-context>>	<org.gradle.internal.classloader.ClasspathUtil: java.io.File getClasspathForResource(java.net.URL,java.lang.String)>/java.io.File.<init>/0	<org.gradle.internal.impldep.com.google.common.collect.HashMultiset: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<org.gradle.internal.impldep.com.google.common.collect.HashMultiset: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.lang.String)>	<<immutable-context>>	<org.gradle.internal.classloader.ClasspathUtil: java.io.File getClasspathForResource(java.net.URL,java.lang.String)>/java.io.File.<init>/1	<org.gradle.internal.impldep.com.google.common.collect.HashMultiset: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<org.gradle.internal.impldep.com.google.common.collect.HashMultiset: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.lang.String)>	<<immutable-context>>	<org.gradle.initialization.BuildLayoutParameters: java.io.File findGradleUserHomeDir()>/java.io.File.<init>/0	<org.gradle.internal.impldep.com.google.common.collect.HashMultiset: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<org.gradle.internal.impldep.com.google.common.collect.HashMultiset: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.lang.String)>	<<immutable-context>>	<org.gradle.initialization.BuildLayoutParameters: void <clinit>()>/java.io.File.<init>/0	<org.gradle.internal.impldep.com.google.common.collect.HashMultiset: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<org.gradle.internal.impldep.com.google.common.collect.ImmutableSetMultimap: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void print(java.lang.String)>	<<immutable-context>>	<org.gradle.internal.exceptions.DefaultMultiCauseException: void printSingleCauseStackTrace(java.io.PrintWriter)>/java.io.PrintWriter.print/0	<org.gradle.internal.impldep.com.google.common.collect.ImmutableSetMultimap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<org.gradle.internal.impldep.com.google.common.collect.ImmutableSetMultimap: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void print(java.lang.String)>	<<immutable-context>>	<org.gradle.internal.impldep.org.apache.commons.lang.exception.NestableDelegate: void printStackTrace(java.io.PrintWriter)>/java.io.PrintWriter.print/0	<org.gradle.internal.impldep.com.google.common.collect.ImmutableSetMultimap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<org.gradle.internal.impldep.com.google.common.collect.ImmutableSetMultimap: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void println(java.lang.String)>	<<immutable-context>>	<org.gradle.internal.impldep.org.apache.commons.lang.exception.NestableDelegate: void printStackTrace(java.io.PrintWriter)>/java.io.PrintWriter.println/0	<org.gradle.internal.impldep.com.google.common.collect.ImmutableSetMultimap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<org.gradle.internal.impldep.com.google.common.collect.ImmutableSetMultimap: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.lang.String)>	<<immutable-context>>	<org.gradle.internal.classloader.ClasspathUtil: java.io.File getClasspathForResource(java.net.URL,java.lang.String)>/java.io.File.<init>/0	<org.gradle.internal.impldep.com.google.common.collect.ImmutableSetMultimap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<org.gradle.internal.impldep.com.google.common.collect.ImmutableSetMultimap: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.lang.String)>	<<immutable-context>>	<org.gradle.internal.classloader.ClasspathUtil: java.io.File getClasspathForResource(java.net.URL,java.lang.String)>/java.io.File.<init>/1	<org.gradle.internal.impldep.com.google.common.collect.ImmutableSetMultimap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<org.gradle.internal.impldep.com.google.common.collect.ImmutableSetMultimap: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.lang.String)>	<<immutable-context>>	<org.gradle.initialization.BuildLayoutParameters: java.io.File findGradleUserHomeDir()>/java.io.File.<init>/0	<org.gradle.internal.impldep.com.google.common.collect.ImmutableSetMultimap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<org.gradle.internal.impldep.com.google.common.collect.ImmutableSetMultimap: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.lang.String)>	<<immutable-context>>	<org.gradle.initialization.BuildLayoutParameters: void <clinit>()>/java.io.File.<init>/0	<org.gradle.internal.impldep.com.google.common.collect.ImmutableSetMultimap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<com.google.common.collect.CompactHashMap: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<org.apache.dubbo.config.AbstractConfig: java.lang.String toString()>/java.lang.reflect.Method.invoke/0	<com.google.common.collect.CompactHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<com.google.common.collect.CompactHashMap: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<org.apache.dubbo.config.AbstractConfig: boolean equals(java.lang.Object)>/java.lang.reflect.Method.invoke/0	<com.google.common.collect.CompactHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<com.google.common.collect.CompactHashMap: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<org.apache.dubbo.config.AbstractConfig: boolean equals(java.lang.Object)>/java.lang.reflect.Method.invoke/1	<com.google.common.collect.CompactHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<com.google.common.collect.CompactHashMap: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<org.apache.dubbo.config.AbstractConfig: int hashCode()>/java.lang.reflect.Method.invoke/0	<com.google.common.collect.CompactHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<org.apache.dubbo.config.AbstractConfig: java.lang.String toString()>/java.lang.reflect.Method.invoke/0	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<org.apache.dubbo.config.AbstractConfig: boolean equals(java.lang.Object)>/java.lang.reflect.Method.invoke/0	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<org.apache.dubbo.config.AbstractConfig: boolean equals(java.lang.Object)>/java.lang.reflect.Method.invoke/1	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<org.apache.dubbo.config.AbstractConfig: int hashCode()>/java.lang.reflect.Method.invoke/0	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentSkipListMap: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<org.apache.dubbo.config.AbstractConfig: java.lang.String toString()>/java.lang.reflect.Method.invoke/0	<java.util.concurrent.ConcurrentSkipListMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentSkipListMap: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<org.apache.dubbo.config.AbstractConfig: boolean equals(java.lang.Object)>/java.lang.reflect.Method.invoke/0	<java.util.concurrent.ConcurrentSkipListMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentSkipListMap: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<org.apache.dubbo.config.AbstractConfig: boolean equals(java.lang.Object)>/java.lang.reflect.Method.invoke/1	<java.util.concurrent.ConcurrentSkipListMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentSkipListMap: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<org.apache.dubbo.config.AbstractConfig: int hashCode()>/java.lang.reflect.Method.invoke/0	<java.util.concurrent.ConcurrentSkipListMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<org.apache.dubbo.config.AbstractConfig: java.lang.String toString()>/java.lang.reflect.Method.invoke/0	<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<org.apache.dubbo.config.AbstractConfig: boolean equals(java.lang.Object)>/java.lang.reflect.Method.invoke/0	<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<org.apache.dubbo.config.AbstractConfig: boolean equals(java.lang.Object)>/java.lang.reflect.Method.invoke/1	<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<org.apache.dubbo.config.AbstractConfig: int hashCode()>/java.lang.reflect.Method.invoke/0	<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<org.apache.dubbo.config.AbstractConfig: java.lang.String toString()>/java.lang.reflect.Method.invoke/0	<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<org.apache.dubbo.config.AbstractConfig: boolean equals(java.lang.Object)>/java.lang.reflect.Method.invoke/0	<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<org.apache.dubbo.config.AbstractConfig: boolean equals(java.lang.Object)>/java.lang.reflect.Method.invoke/1	<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<org.apache.dubbo.config.AbstractConfig: int hashCode()>/java.lang.reflect.Method.invoke/0	<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<org.apache.dubbo.config.AbstractConfig: java.lang.String toString()>/java.lang.reflect.Method.invoke/0	<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<org.apache.dubbo.config.AbstractConfig: boolean equals(java.lang.Object)>/java.lang.reflect.Method.invoke/0	<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<org.apache.dubbo.config.AbstractConfig: boolean equals(java.lang.Object)>/java.lang.reflect.Method.invoke/1	<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<org.apache.dubbo.config.AbstractConfig: int hashCode()>/java.lang.reflect.Method.invoke/0	<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentLinkedQueue: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void print(java.lang.String)>	<<immutable-context>>	<org.gradle.internal.exceptions.DefaultMultiCauseException: void printSingleCauseStackTrace(java.io.PrintWriter)>/java.io.PrintWriter.print/0	<java.util.concurrent.ConcurrentLinkedQueue: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentLinkedQueue: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void print(java.lang.String)>	<<immutable-context>>	<org.gradle.internal.impldep.org.apache.commons.lang.exception.NestableDelegate: void printStackTrace(java.io.PrintWriter)>/java.io.PrintWriter.print/0	<java.util.concurrent.ConcurrentLinkedQueue: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentLinkedQueue: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void println(java.lang.String)>	<<immutable-context>>	<org.gradle.internal.impldep.org.apache.commons.lang.exception.NestableDelegate: void printStackTrace(java.io.PrintWriter)>/java.io.PrintWriter.println/0	<java.util.concurrent.ConcurrentLinkedQueue: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentLinkedQueue: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.lang.String)>	<<immutable-context>>	<org.gradle.internal.classloader.ClasspathUtil: java.io.File getClasspathForResource(java.net.URL,java.lang.String)>/java.io.File.<init>/0	<java.util.concurrent.ConcurrentLinkedQueue: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentLinkedQueue: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.lang.String)>	<<immutable-context>>	<org.gradle.internal.classloader.ClasspathUtil: java.io.File getClasspathForResource(java.net.URL,java.lang.String)>/java.io.File.<init>/1	<java.util.concurrent.ConcurrentLinkedQueue: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentLinkedQueue: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.lang.String)>	<<immutable-context>>	<org.gradle.initialization.BuildLayoutParameters: java.io.File findGradleUserHomeDir()>/java.io.File.<init>/0	<java.util.concurrent.ConcurrentLinkedQueue: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentLinkedQueue: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.lang.String)>	<<immutable-context>>	<org.gradle.initialization.BuildLayoutParameters: void <clinit>()>/java.io.File.<init>/0	<java.util.concurrent.ConcurrentLinkedQueue: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void print(java.lang.String)>	<<immutable-context>>	<org.gradle.internal.exceptions.DefaultMultiCauseException: void printSingleCauseStackTrace(java.io.PrintWriter)>/java.io.PrintWriter.print/0	<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void print(java.lang.String)>	<<immutable-context>>	<org.gradle.internal.impldep.org.apache.commons.lang.exception.NestableDelegate: void printStackTrace(java.io.PrintWriter)>/java.io.PrintWriter.print/0	<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void println(java.lang.String)>	<<immutable-context>>	<org.gradle.internal.impldep.org.apache.commons.lang.exception.NestableDelegate: void printStackTrace(java.io.PrintWriter)>/java.io.PrintWriter.println/0	<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.lang.String)>	<<immutable-context>>	<org.gradle.internal.classloader.ClasspathUtil: java.io.File getClasspathForResource(java.net.URL,java.lang.String)>/java.io.File.<init>/0	<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.lang.String)>	<<immutable-context>>	<org.gradle.internal.classloader.ClasspathUtil: java.io.File getClasspathForResource(java.net.URL,java.lang.String)>/java.io.File.<init>/1	<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.lang.String)>	<<immutable-context>>	<org.gradle.initialization.BuildLayoutParameters: java.io.File findGradleUserHomeDir()>/java.io.File.<init>/0	<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.lang.String)>	<<immutable-context>>	<org.gradle.initialization.BuildLayoutParameters: void <clinit>()>/java.io.File.<init>/0	<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.SynchronousQueue: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void print(java.lang.String)>	<<immutable-context>>	<org.gradle.internal.exceptions.DefaultMultiCauseException: void printSingleCauseStackTrace(java.io.PrintWriter)>/java.io.PrintWriter.print/0	<java.util.concurrent.SynchronousQueue: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.SynchronousQueue: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void print(java.lang.String)>	<<immutable-context>>	<org.gradle.internal.impldep.org.apache.commons.lang.exception.NestableDelegate: void printStackTrace(java.io.PrintWriter)>/java.io.PrintWriter.print/0	<java.util.concurrent.SynchronousQueue: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.SynchronousQueue: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void println(java.lang.String)>	<<immutable-context>>	<org.gradle.internal.impldep.org.apache.commons.lang.exception.NestableDelegate: void printStackTrace(java.io.PrintWriter)>/java.io.PrintWriter.println/0	<java.util.concurrent.SynchronousQueue: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.SynchronousQueue: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.lang.String)>	<<immutable-context>>	<org.gradle.internal.classloader.ClasspathUtil: java.io.File getClasspathForResource(java.net.URL,java.lang.String)>/java.io.File.<init>/0	<java.util.concurrent.SynchronousQueue: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.SynchronousQueue: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.lang.String)>	<<immutable-context>>	<org.gradle.internal.classloader.ClasspathUtil: java.io.File getClasspathForResource(java.net.URL,java.lang.String)>/java.io.File.<init>/1	<java.util.concurrent.SynchronousQueue: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.SynchronousQueue: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.lang.String)>	<<immutable-context>>	<org.gradle.initialization.BuildLayoutParameters: java.io.File findGradleUserHomeDir()>/java.io.File.<init>/0	<java.util.concurrent.SynchronousQueue: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.SynchronousQueue: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.lang.String)>	<<immutable-context>>	<org.gradle.initialization.BuildLayoutParameters: void <clinit>()>/java.io.File.<init>/0	<java.util.concurrent.SynchronousQueue: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeMap: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void print(java.lang.String)>	<<immutable-context>>	<org.gradle.internal.exceptions.DefaultMultiCauseException: void printSingleCauseStackTrace(java.io.PrintWriter)>/java.io.PrintWriter.print/0	<java.util.TreeMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeMap: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void print(java.lang.String)>	<<immutable-context>>	<org.gradle.internal.impldep.org.apache.commons.lang.exception.NestableDelegate: void printStackTrace(java.io.PrintWriter)>/java.io.PrintWriter.print/0	<java.util.TreeMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeMap: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void println(java.lang.String)>	<<immutable-context>>	<org.gradle.internal.impldep.org.apache.commons.lang.exception.NestableDelegate: void printStackTrace(java.io.PrintWriter)>/java.io.PrintWriter.println/0	<java.util.TreeMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeMap: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.lang.String)>	<<immutable-context>>	<org.gradle.internal.classloader.ClasspathUtil: java.io.File getClasspathForResource(java.net.URL,java.lang.String)>/java.io.File.<init>/0	<java.util.TreeMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeMap: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.lang.String)>	<<immutable-context>>	<org.gradle.internal.classloader.ClasspathUtil: java.io.File getClasspathForResource(java.net.URL,java.lang.String)>/java.io.File.<init>/1	<java.util.TreeMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeMap: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.lang.String)>	<<immutable-context>>	<org.gradle.initialization.BuildLayoutParameters: java.io.File findGradleUserHomeDir()>/java.io.File.<init>/0	<java.util.TreeMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeMap: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.lang.String)>	<<immutable-context>>	<org.gradle.initialization.BuildLayoutParameters: void <clinit>()>/java.io.File.<init>/0	<java.util.TreeMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.LinkedBlockingDeque: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void print(java.lang.String)>	<<immutable-context>>	<org.gradle.internal.exceptions.DefaultMultiCauseException: void printSingleCauseStackTrace(java.io.PrintWriter)>/java.io.PrintWriter.print/0	<java.util.concurrent.LinkedBlockingDeque: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.LinkedBlockingDeque: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void print(java.lang.String)>	<<immutable-context>>	<org.gradle.internal.impldep.org.apache.commons.lang.exception.NestableDelegate: void printStackTrace(java.io.PrintWriter)>/java.io.PrintWriter.print/0	<java.util.concurrent.LinkedBlockingDeque: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.LinkedBlockingDeque: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void println(java.lang.String)>	<<immutable-context>>	<org.gradle.internal.impldep.org.apache.commons.lang.exception.NestableDelegate: void printStackTrace(java.io.PrintWriter)>/java.io.PrintWriter.println/0	<java.util.concurrent.LinkedBlockingDeque: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.LinkedBlockingDeque: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.lang.String)>	<<immutable-context>>	<org.gradle.internal.classloader.ClasspathUtil: java.io.File getClasspathForResource(java.net.URL,java.lang.String)>/java.io.File.<init>/0	<java.util.concurrent.LinkedBlockingDeque: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.LinkedBlockingDeque: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.lang.String)>	<<immutable-context>>	<org.gradle.internal.classloader.ClasspathUtil: java.io.File getClasspathForResource(java.net.URL,java.lang.String)>/java.io.File.<init>/1	<java.util.concurrent.LinkedBlockingDeque: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.LinkedBlockingDeque: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.lang.String)>	<<immutable-context>>	<org.gradle.initialization.BuildLayoutParameters: java.io.File findGradleUserHomeDir()>/java.io.File.<init>/0	<java.util.concurrent.LinkedBlockingDeque: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.LinkedBlockingDeque: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.lang.String)>	<<immutable-context>>	<org.gradle.initialization.BuildLayoutParameters: void <clinit>()>/java.io.File.<init>/0	<java.util.concurrent.LinkedBlockingDeque: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.PriorityBlockingQueue: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<org.apache.beam.sdk.util.ByteBuddyUtils: net.bytebuddy.dynamic.loading.ClassLoadingStrategy getClassLoadingStrategy(java.lang.Class)>/java.lang.reflect.Method.invoke/0	<java.util.concurrent.PriorityBlockingQueue: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.PriorityBlockingQueue: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<org.apache.beam.sdk.util.ByteBuddyUtils: net.bytebuddy.dynamic.loading.ClassLoadingStrategy getClassLoadingStrategy(java.lang.Class)>/java.lang.reflect.Method.invoke/1	<java.util.concurrent.PriorityBlockingQueue: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.PriorityBlockingQueue: void readObject(java.io.ObjectInputStream)>	<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>	<<immutable-context>>	<org.apache.beam.sdk.util.SerializableUtils$ContextualObjectInputStream: java.lang.Class resolveProxyClass(java.lang.String[])>/java.lang.ClassLoader.loadClass/0	<java.util.concurrent.PriorityBlockingQueue: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentSkipListMap: void readObject(java.io.ObjectInputStream)>	<java.lang.ProcessBuilder: java.lang.Process start()>	<<immutable-context>>	<org.apache.hadoop.util.Shell: void runCommand()>/java.lang.ProcessBuilder.start/0	<java.util.concurrent.ConcurrentSkipListMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentSkipListMap: void readObject(java.io.ObjectInputStream)>	<java.lang.ProcessBuilder: java.lang.Process start()>	<<immutable-context>>	<org.apache.hadoop.util.Shell: void runCommand()>/java.lang.ProcessBuilder.start/1	<java.util.concurrent.ConcurrentSkipListMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentSkipListMap: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.lang.String)>	<<immutable-context>>	<org.apache.hadoop.util.Shell: java.io.File checkHadoopHomeInner(java.lang.String)>/java.io.File.<init>/0	<java.util.concurrent.ConcurrentSkipListMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentSkipListMap: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.io.File,java.lang.String)>	<<immutable-context>>	<org.apache.hadoop.util.Shell: java.io.File getQualifiedBinInner(java.io.File,java.lang.String)>/java.io.File.<init>/0	<java.util.concurrent.ConcurrentSkipListMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentSkipListMap: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.io.File,java.lang.String)>	<<immutable-context>>	<org.apache.hadoop.util.Shell: java.io.File getQualifiedBinInner(java.io.File,java.lang.String)>/java.io.File.<init>/1	<java.util.concurrent.ConcurrentSkipListMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<org.apache.hadoop.thirdparty.com.google.common.collect.HashMultiset: void readObject(java.io.ObjectInputStream)>	<java.lang.ProcessBuilder: java.lang.Process start()>	<<immutable-context>>	<org.apache.hadoop.util.Shell: void runCommand()>/java.lang.ProcessBuilder.start/0	<org.apache.hadoop.thirdparty.com.google.common.collect.HashMultiset: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<org.apache.hadoop.thirdparty.com.google.common.collect.HashMultiset: void readObject(java.io.ObjectInputStream)>	<java.lang.ProcessBuilder: java.lang.Process start()>	<<immutable-context>>	<org.apache.hadoop.util.Shell: void runCommand()>/java.lang.ProcessBuilder.start/1	<org.apache.hadoop.thirdparty.com.google.common.collect.HashMultiset: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<org.apache.hadoop.thirdparty.com.google.common.collect.HashMultiset: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.lang.String)>	<<immutable-context>>	<org.apache.hadoop.util.Shell: java.io.File checkHadoopHomeInner(java.lang.String)>/java.io.File.<init>/0	<org.apache.hadoop.thirdparty.com.google.common.collect.HashMultiset: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<org.apache.hadoop.thirdparty.com.google.common.collect.HashMultiset: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.io.File,java.lang.String)>	<<immutable-context>>	<org.apache.hadoop.util.Shell: java.io.File getQualifiedBinInner(java.io.File,java.lang.String)>/java.io.File.<init>/0	<org.apache.hadoop.thirdparty.com.google.common.collect.HashMultiset: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<org.apache.hadoop.thirdparty.com.google.common.collect.HashMultiset: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.io.File,java.lang.String)>	<<immutable-context>>	<org.apache.hadoop.util.Shell: java.io.File getQualifiedBinInner(java.io.File,java.lang.String)>/java.io.File.<init>/1	<org.apache.hadoop.thirdparty.com.google.common.collect.HashMultiset: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<org.apache.commons.collections.map.CaseInsensitiveMap: void readObject(java.io.ObjectInputStream)>	<java.lang.ProcessBuilder: java.lang.Process start()>	<<immutable-context>>	<org.apache.hadoop.util.Shell: void runCommand()>/java.lang.ProcessBuilder.start/0	<org.apache.commons.collections.map.CaseInsensitiveMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<org.apache.commons.collections.map.CaseInsensitiveMap: void readObject(java.io.ObjectInputStream)>	<java.lang.ProcessBuilder: java.lang.Process start()>	<<immutable-context>>	<org.apache.hadoop.util.Shell: void runCommand()>/java.lang.ProcessBuilder.start/1	<org.apache.commons.collections.map.CaseInsensitiveMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<org.apache.commons.collections.map.CaseInsensitiveMap: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.lang.String)>	<<immutable-context>>	<org.apache.hadoop.util.Shell: java.io.File checkHadoopHomeInner(java.lang.String)>/java.io.File.<init>/0	<org.apache.commons.collections.map.CaseInsensitiveMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<org.apache.commons.collections.map.CaseInsensitiveMap: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.io.File,java.lang.String)>	<<immutable-context>>	<org.apache.hadoop.util.Shell: java.io.File getQualifiedBinInner(java.io.File,java.lang.String)>/java.io.File.<init>/0	<org.apache.commons.collections.map.CaseInsensitiveMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<org.apache.commons.collections.map.CaseInsensitiveMap: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.io.File,java.lang.String)>	<<immutable-context>>	<org.apache.hadoop.util.Shell: java.io.File getQualifiedBinInner(java.io.File,java.lang.String)>/java.io.File.<init>/1	<org.apache.commons.collections.map.CaseInsensitiveMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.PriorityQueue: void readObject(java.io.ObjectInputStream)>	<java.lang.ProcessBuilder: java.lang.Process start()>	<<immutable-context>>	<org.apache.hadoop.util.Shell: void runCommand()>/java.lang.ProcessBuilder.start/0	<java.util.PriorityQueue: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.PriorityQueue: void readObject(java.io.ObjectInputStream)>	<java.lang.ProcessBuilder: java.lang.Process start()>	<<immutable-context>>	<org.apache.hadoop.util.Shell: void runCommand()>/java.lang.ProcessBuilder.start/1	<java.util.PriorityQueue: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.PriorityQueue: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.lang.String)>	<<immutable-context>>	<org.apache.hadoop.util.Shell: java.io.File checkHadoopHomeInner(java.lang.String)>/java.io.File.<init>/0	<java.util.PriorityQueue: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.PriorityQueue: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.io.File,java.lang.String)>	<<immutable-context>>	<org.apache.hadoop.util.Shell: java.io.File getQualifiedBinInner(java.io.File,java.lang.String)>/java.io.File.<init>/0	<java.util.PriorityQueue: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.PriorityQueue: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.io.File,java.lang.String)>	<<immutable-context>>	<org.apache.hadoop.util.Shell: java.io.File getQualifiedBinInner(java.io.File,java.lang.String)>/java.io.File.<init>/1	<java.util.PriorityQueue: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<org.apache.hadoop.thirdparty.com.google.common.collect.LinkedHashMultiset: void readObject(java.io.ObjectInputStream)>	<java.lang.ProcessBuilder: java.lang.Process start()>	<<immutable-context>>	<org.apache.hadoop.util.Shell: void runCommand()>/java.lang.ProcessBuilder.start/0	<org.apache.hadoop.thirdparty.com.google.common.collect.LinkedHashMultiset: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<org.apache.hadoop.thirdparty.com.google.common.collect.LinkedHashMultiset: void readObject(java.io.ObjectInputStream)>	<java.lang.ProcessBuilder: java.lang.Process start()>	<<immutable-context>>	<org.apache.hadoop.util.Shell: void runCommand()>/java.lang.ProcessBuilder.start/1	<org.apache.hadoop.thirdparty.com.google.common.collect.LinkedHashMultiset: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<org.apache.hadoop.thirdparty.com.google.common.collect.LinkedHashMultiset: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.lang.String)>	<<immutable-context>>	<org.apache.hadoop.util.Shell: java.io.File checkHadoopHomeInner(java.lang.String)>/java.io.File.<init>/0	<org.apache.hadoop.thirdparty.com.google.common.collect.LinkedHashMultiset: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<org.apache.hadoop.thirdparty.com.google.common.collect.LinkedHashMultiset: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.io.File,java.lang.String)>	<<immutable-context>>	<org.apache.hadoop.util.Shell: java.io.File getQualifiedBinInner(java.io.File,java.lang.String)>/java.io.File.<init>/0	<org.apache.hadoop.thirdparty.com.google.common.collect.LinkedHashMultiset: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<org.apache.hadoop.thirdparty.com.google.common.collect.LinkedHashMultiset: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.io.File,java.lang.String)>	<<immutable-context>>	<org.apache.hadoop.util.Shell: java.io.File getQualifiedBinInner(java.io.File,java.lang.String)>/java.io.File.<init>/1	<org.apache.hadoop.thirdparty.com.google.common.collect.LinkedHashMultiset: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentLinkedDeque: void readObject(java.io.ObjectInputStream)>	<java.lang.ProcessBuilder: java.lang.Process start()>	<<immutable-context>>	<org.apache.hadoop.util.Shell: void runCommand()>/java.lang.ProcessBuilder.start/0	<java.util.concurrent.ConcurrentLinkedDeque: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentLinkedDeque: void readObject(java.io.ObjectInputStream)>	<java.lang.ProcessBuilder: java.lang.Process start()>	<<immutable-context>>	<org.apache.hadoop.util.Shell: void runCommand()>/java.lang.ProcessBuilder.start/1	<java.util.concurrent.ConcurrentLinkedDeque: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentLinkedDeque: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.lang.String)>	<<immutable-context>>	<org.apache.hadoop.util.Shell: java.io.File checkHadoopHomeInner(java.lang.String)>/java.io.File.<init>/0	<java.util.concurrent.ConcurrentLinkedDeque: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentLinkedDeque: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.io.File,java.lang.String)>	<<immutable-context>>	<org.apache.hadoop.util.Shell: java.io.File getQualifiedBinInner(java.io.File,java.lang.String)>/java.io.File.<init>/0	<java.util.concurrent.ConcurrentLinkedDeque: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentLinkedDeque: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.io.File,java.lang.String)>	<<immutable-context>>	<org.apache.hadoop.util.Shell: java.io.File getQualifiedBinInner(java.io.File,java.lang.String)>/java.io.File.<init>/1	<java.util.concurrent.ConcurrentLinkedDeque: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.LinkedBlockingDeque: void readObject(java.io.ObjectInputStream)>	<java.lang.ProcessBuilder: java.lang.Process start()>	<<immutable-context>>	<org.apache.hadoop.util.Shell: void runCommand()>/java.lang.ProcessBuilder.start/0	<java.util.concurrent.LinkedBlockingDeque: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.LinkedBlockingDeque: void readObject(java.io.ObjectInputStream)>	<java.lang.ProcessBuilder: java.lang.Process start()>	<<immutable-context>>	<org.apache.hadoop.util.Shell: void runCommand()>/java.lang.ProcessBuilder.start/1	<java.util.concurrent.LinkedBlockingDeque: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.LinkedBlockingDeque: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.lang.String)>	<<immutable-context>>	<org.apache.hadoop.util.Shell: java.io.File checkHadoopHomeInner(java.lang.String)>/java.io.File.<init>/0	<java.util.concurrent.LinkedBlockingDeque: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.LinkedBlockingDeque: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.io.File,java.lang.String)>	<<immutable-context>>	<org.apache.hadoop.util.Shell: java.io.File getQualifiedBinInner(java.io.File,java.lang.String)>/java.io.File.<init>/0	<java.util.concurrent.LinkedBlockingDeque: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.LinkedBlockingDeque: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.io.File,java.lang.String)>	<<immutable-context>>	<org.apache.hadoop.util.Shell: java.io.File getQualifiedBinInner(java.io.File,java.lang.String)>/java.io.File.<init>/1	<java.util.concurrent.LinkedBlockingDeque: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentLinkedQueue: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<datahub.shaded.org.apache.commons.lang.enums.ValuedEnum: int getValueInOtherClassLoader(java.lang.Object)>/java.lang.reflect.Method.invoke/0	<java.util.concurrent.ConcurrentLinkedQueue: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentLinkedQueue: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<datahub.shaded.org.apache.commons.lang.enum.Enum: java.lang.String getNameInOtherClassLoader(java.lang.Object)>/java.lang.reflect.Method.invoke/0	<java.util.concurrent.ConcurrentLinkedQueue: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentLinkedQueue: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<datahub.shaded.org.apache.commons.lang.enums.Enum: java.lang.String getNameInOtherClassLoader(java.lang.Object)>/java.lang.reflect.Method.invoke/0	<java.util.concurrent.ConcurrentLinkedQueue: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentLinkedDeque: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<datahub.shaded.org.apache.commons.lang.enum.Enum: java.lang.String getNameInOtherClassLoader(java.lang.Object)>/java.lang.reflect.Method.invoke/0	<java.util.concurrent.ConcurrentLinkedDeque: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentLinkedDeque: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<datahub.shaded.org.apache.commons.lang.enums.Enum: java.lang.String getNameInOtherClassLoader(java.lang.Object)>/java.lang.reflect.Method.invoke/0	<java.util.concurrent.ConcurrentLinkedDeque: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<datahub.shaded.com.google.common.collect.ImmutableListMultimap: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<datahub.shaded.org.apache.commons.lang.enums.ValuedEnum: int getValueInOtherClassLoader(java.lang.Object)>/java.lang.reflect.Method.invoke/0	<datahub.shaded.com.google.common.collect.ImmutableListMultimap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<datahub.shaded.com.google.common.collect.ImmutableListMultimap: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<datahub.shaded.org.apache.commons.lang.enum.Enum: java.lang.String getNameInOtherClassLoader(java.lang.Object)>/java.lang.reflect.Method.invoke/0	<datahub.shaded.com.google.common.collect.ImmutableListMultimap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<datahub.shaded.com.google.common.collect.ImmutableListMultimap: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<datahub.shaded.org.apache.commons.lang.enums.Enum: java.lang.String getNameInOtherClassLoader(java.lang.Object)>/java.lang.reflect.Method.invoke/0	<datahub.shaded.com.google.common.collect.ImmutableListMultimap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<datahub.shaded.org.springframework.util.MimeType: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<datahub.shaded.org.apache.commons.lang.enums.ValuedEnum: int getValueInOtherClassLoader(java.lang.Object)>/java.lang.reflect.Method.invoke/0	<datahub.shaded.org.springframework.util.MimeType: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<datahub.shaded.org.springframework.util.MimeType: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<datahub.shaded.org.apache.commons.lang.enum.Enum: java.lang.String getNameInOtherClassLoader(java.lang.Object)>/java.lang.reflect.Method.invoke/0	<datahub.shaded.org.springframework.util.MimeType: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<datahub.shaded.org.springframework.util.MimeType: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<datahub.shaded.org.apache.commons.lang.enums.Enum: java.lang.String getNameInOtherClassLoader(java.lang.Object)>/java.lang.reflect.Method.invoke/0	<datahub.shaded.org.springframework.util.MimeType: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<datahub.shaded.org.springframework.aop.aspectj.AbstractAspectJAdvice: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<datahub.shaded.org.apache.commons.lang.enum.Enum: java.lang.String getNameInOtherClassLoader(java.lang.Object)>/java.lang.reflect.Method.invoke/0	<datahub.shaded.org.springframework.aop.aspectj.AbstractAspectJAdvice: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<datahub.shaded.org.springframework.aop.aspectj.AbstractAspectJAdvice: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<datahub.shaded.org.apache.commons.lang.enums.Enum: java.lang.String getNameInOtherClassLoader(java.lang.Object)>/java.lang.reflect.Method.invoke/0	<datahub.shaded.org.springframework.aop.aspectj.AbstractAspectJAdvice: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<datahub.shaded.jackson.databind.util.internal.PrivateMaxEntriesMap: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<datahub.shaded.org.apache.commons.lang.enums.ValuedEnum: int getValueInOtherClassLoader(java.lang.Object)>/java.lang.reflect.Method.invoke/0	<datahub.shaded.jackson.databind.util.internal.PrivateMaxEntriesMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<datahub.shaded.jackson.databind.util.internal.PrivateMaxEntriesMap: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<datahub.shaded.org.apache.commons.lang.enum.Enum: java.lang.String getNameInOtherClassLoader(java.lang.Object)>/java.lang.reflect.Method.invoke/0	<datahub.shaded.jackson.databind.util.internal.PrivateMaxEntriesMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<datahub.shaded.jackson.databind.util.internal.PrivateMaxEntriesMap: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<datahub.shaded.org.apache.commons.lang.enums.Enum: java.lang.String getNameInOtherClassLoader(java.lang.Object)>/java.lang.reflect.Method.invoke/0	<datahub.shaded.jackson.databind.util.internal.PrivateMaxEntriesMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<datahub.shaded.com.google.common.collect.ImmutableSetMultimap: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<datahub.shaded.org.apache.commons.lang.enums.ValuedEnum: int getValueInOtherClassLoader(java.lang.Object)>/java.lang.reflect.Method.invoke/0	<datahub.shaded.com.google.common.collect.ImmutableSetMultimap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<datahub.shaded.com.google.common.collect.ImmutableSetMultimap: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<datahub.shaded.org.apache.commons.lang.enum.Enum: java.lang.String getNameInOtherClassLoader(java.lang.Object)>/java.lang.reflect.Method.invoke/0	<datahub.shaded.com.google.common.collect.ImmutableSetMultimap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<datahub.shaded.com.google.common.collect.ImmutableSetMultimap: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<datahub.shaded.org.apache.commons.lang.enums.Enum: java.lang.String getNameInOtherClassLoader(java.lang.Object)>/java.lang.reflect.Method.invoke/0	<datahub.shaded.com.google.common.collect.ImmutableSetMultimap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<org.apache.xerces.dom.PSVIDocumentImpl: void readObject(java.io.ObjectInputStream)>	<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>	<<immutable-context>>	<org.apache.xerces.dom.ObjectFactory: java.lang.Class findProviderClass(java.lang.String,java.lang.ClassLoader,boolean)>/java.lang.ClassLoader.loadClass/0	<org.apache.xerces.dom.PSVIDocumentImpl: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<org.apache.xerces.dom.PSVIDocumentImpl: void readObject(java.io.ObjectInputStream)>	<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>	<<immutable-context>>	<org.apache.xerces.dom.ObjectFactory: java.lang.Class findProviderClass(java.lang.String,java.lang.ClassLoader,boolean)>/java.lang.ClassLoader.loadClass/1	<org.apache.xerces.dom.PSVIDocumentImpl: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<org.apache.xerces.dom.PSVIDocumentImpl: void readObject(java.io.ObjectInputStream)>	<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>	<<immutable-context>>	<org.apache.xerces.impl.dv.ObjectFactory: java.lang.Class findProviderClass(java.lang.String,java.lang.ClassLoader,boolean)>/java.lang.ClassLoader.loadClass/0	<org.apache.xerces.dom.PSVIDocumentImpl: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<org.apache.xerces.dom.PSVIDocumentImpl: void readObject(java.io.ObjectInputStream)>	<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>	<<immutable-context>>	<org.apache.xerces.impl.dv.ObjectFactory: java.lang.Class findProviderClass(java.lang.String,java.lang.ClassLoader,boolean)>/java.lang.ClassLoader.loadClass/1	<org.apache.xerces.dom.PSVIDocumentImpl: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<org.apache.xerces.dom.PSVIDocumentImpl: void readObject(java.io.ObjectInputStream)>	<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>	<<immutable-context>>	<org.apache.html.dom.ObjectFactory: java.lang.Class findProviderClass(java.lang.String,java.lang.ClassLoader,boolean)>/java.lang.ClassLoader.loadClass/0	<org.apache.xerces.dom.PSVIDocumentImpl: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<org.apache.xerces.dom.PSVIDocumentImpl: void readObject(java.io.ObjectInputStream)>	<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>	<<immutable-context>>	<org.apache.html.dom.ObjectFactory: java.lang.Class findProviderClass(java.lang.String,java.lang.ClassLoader,boolean)>/java.lang.ClassLoader.loadClass/1	<org.apache.xerces.dom.PSVIDocumentImpl: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>	<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>	<<immutable-context>>	<org.apache.xerces.dom.ObjectFactory: java.lang.Class findProviderClass(java.lang.String,java.lang.ClassLoader,boolean)>/java.lang.ClassLoader.loadClass/0	<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>	<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>	<<immutable-context>>	<org.apache.xerces.dom.ObjectFactory: java.lang.Class findProviderClass(java.lang.String,java.lang.ClassLoader,boolean)>/java.lang.ClassLoader.loadClass/1	<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>	<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>	<<immutable-context>>	<org.apache.xerces.impl.dv.ObjectFactory: java.lang.Class findProviderClass(java.lang.String,java.lang.ClassLoader,boolean)>/java.lang.ClassLoader.loadClass/0	<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>	<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>	<<immutable-context>>	<org.apache.xerces.impl.dv.ObjectFactory: java.lang.Class findProviderClass(java.lang.String,java.lang.ClassLoader,boolean)>/java.lang.ClassLoader.loadClass/1	<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>	<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>	<<immutable-context>>	<org.apache.html.dom.ObjectFactory: java.lang.Class findProviderClass(java.lang.String,java.lang.ClassLoader,boolean)>/java.lang.ClassLoader.loadClass/0	<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>	<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>	<<immutable-context>>	<org.apache.html.dom.ObjectFactory: java.lang.Class findProviderClass(java.lang.String,java.lang.ClassLoader,boolean)>/java.lang.ClassLoader.loadClass/1	<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.SynchronousQueue: void readObject(java.io.ObjectInputStream)>	<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>	<<immutable-context>>	<org.apache.xerces.dom.ObjectFactory: java.lang.Class findProviderClass(java.lang.String,java.lang.ClassLoader,boolean)>/java.lang.ClassLoader.loadClass/0	<java.util.concurrent.SynchronousQueue: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.SynchronousQueue: void readObject(java.io.ObjectInputStream)>	<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>	<<immutable-context>>	<org.apache.xerces.dom.ObjectFactory: java.lang.Class findProviderClass(java.lang.String,java.lang.ClassLoader,boolean)>/java.lang.ClassLoader.loadClass/1	<java.util.concurrent.SynchronousQueue: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.SynchronousQueue: void readObject(java.io.ObjectInputStream)>	<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>	<<immutable-context>>	<org.apache.xerces.impl.dv.ObjectFactory: java.lang.Class findProviderClass(java.lang.String,java.lang.ClassLoader,boolean)>/java.lang.ClassLoader.loadClass/0	<java.util.concurrent.SynchronousQueue: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.SynchronousQueue: void readObject(java.io.ObjectInputStream)>	<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>	<<immutable-context>>	<org.apache.xerces.impl.dv.ObjectFactory: java.lang.Class findProviderClass(java.lang.String,java.lang.ClassLoader,boolean)>/java.lang.ClassLoader.loadClass/1	<java.util.concurrent.SynchronousQueue: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.SynchronousQueue: void readObject(java.io.ObjectInputStream)>	<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>	<<immutable-context>>	<org.apache.html.dom.ObjectFactory: java.lang.Class findProviderClass(java.lang.String,java.lang.ClassLoader,boolean)>/java.lang.ClassLoader.loadClass/0	<java.util.concurrent.SynchronousQueue: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.SynchronousQueue: void readObject(java.io.ObjectInputStream)>	<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>	<<immutable-context>>	<org.apache.html.dom.ObjectFactory: java.lang.Class findProviderClass(java.lang.String,java.lang.ClassLoader,boolean)>/java.lang.ClassLoader.loadClass/1	<java.util.concurrent.SynchronousQueue: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>	<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>	<<immutable-context>>	<org.apache.xerces.dom.ObjectFactory: java.lang.Class findProviderClass(java.lang.String,java.lang.ClassLoader,boolean)>/java.lang.ClassLoader.loadClass/0	<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>	<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>	<<immutable-context>>	<org.apache.xerces.dom.ObjectFactory: java.lang.Class findProviderClass(java.lang.String,java.lang.ClassLoader,boolean)>/java.lang.ClassLoader.loadClass/1	<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>	<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>	<<immutable-context>>	<org.apache.xerces.impl.dv.ObjectFactory: java.lang.Class findProviderClass(java.lang.String,java.lang.ClassLoader,boolean)>/java.lang.ClassLoader.loadClass/0	<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>	<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>	<<immutable-context>>	<org.apache.xerces.impl.dv.ObjectFactory: java.lang.Class findProviderClass(java.lang.String,java.lang.ClassLoader,boolean)>/java.lang.ClassLoader.loadClass/1	<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>	<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>	<<immutable-context>>	<org.apache.html.dom.ObjectFactory: java.lang.Class findProviderClass(java.lang.String,java.lang.ClassLoader,boolean)>/java.lang.ClassLoader.loadClass/0	<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>	<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>	<<immutable-context>>	<org.apache.html.dom.ObjectFactory: java.lang.Class findProviderClass(java.lang.String,java.lang.ClassLoader,boolean)>/java.lang.ClassLoader.loadClass/1	<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>	<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>	<<immutable-context>>	<org.apache.xerces.dom.ObjectFactory: java.lang.Class findProviderClass(java.lang.String,java.lang.ClassLoader,boolean)>/java.lang.ClassLoader.loadClass/0	<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>	<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>	<<immutable-context>>	<org.apache.xerces.dom.ObjectFactory: java.lang.Class findProviderClass(java.lang.String,java.lang.ClassLoader,boolean)>/java.lang.ClassLoader.loadClass/1	<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>	<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>	<<immutable-context>>	<org.apache.xerces.impl.dv.ObjectFactory: java.lang.Class findProviderClass(java.lang.String,java.lang.ClassLoader,boolean)>/java.lang.ClassLoader.loadClass/0	<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>	<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>	<<immutable-context>>	<org.apache.xerces.impl.dv.ObjectFactory: java.lang.Class findProviderClass(java.lang.String,java.lang.ClassLoader,boolean)>/java.lang.ClassLoader.loadClass/1	<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>	<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>	<<immutable-context>>	<org.apache.html.dom.ObjectFactory: java.lang.Class findProviderClass(java.lang.String,java.lang.ClassLoader,boolean)>/java.lang.ClassLoader.loadClass/0	<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>	<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>	<<immutable-context>>	<org.apache.html.dom.ObjectFactory: java.lang.Class findProviderClass(java.lang.String,java.lang.ClassLoader,boolean)>/java.lang.ClassLoader.loadClass/1	<java.util.ArrayList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.IdentityHashMap: void readObject(java.io.ObjectInputStream)>	<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>	<<immutable-context>>	<org.apache.xerces.dom.ObjectFactory: java.lang.Class findProviderClass(java.lang.String,java.lang.ClassLoader,boolean)>/java.lang.ClassLoader.loadClass/0	<java.util.IdentityHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.IdentityHashMap: void readObject(java.io.ObjectInputStream)>	<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>	<<immutable-context>>	<org.apache.xerces.dom.ObjectFactory: java.lang.Class findProviderClass(java.lang.String,java.lang.ClassLoader,boolean)>/java.lang.ClassLoader.loadClass/1	<java.util.IdentityHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.IdentityHashMap: void readObject(java.io.ObjectInputStream)>	<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>	<<immutable-context>>	<org.apache.xerces.impl.dv.ObjectFactory: java.lang.Class findProviderClass(java.lang.String,java.lang.ClassLoader,boolean)>/java.lang.ClassLoader.loadClass/0	<java.util.IdentityHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.IdentityHashMap: void readObject(java.io.ObjectInputStream)>	<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>	<<immutable-context>>	<org.apache.xerces.impl.dv.ObjectFactory: java.lang.Class findProviderClass(java.lang.String,java.lang.ClassLoader,boolean)>/java.lang.ClassLoader.loadClass/1	<java.util.IdentityHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.IdentityHashMap: void readObject(java.io.ObjectInputStream)>	<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>	<<immutable-context>>	<org.apache.html.dom.ObjectFactory: java.lang.Class findProviderClass(java.lang.String,java.lang.ClassLoader,boolean)>/java.lang.ClassLoader.loadClass/0	<java.util.IdentityHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.IdentityHashMap: void readObject(java.io.ObjectInputStream)>	<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>	<<immutable-context>>	<org.apache.html.dom.ObjectFactory: java.lang.Class findProviderClass(java.lang.String,java.lang.ClassLoader,boolean)>/java.lang.ClassLoader.loadClass/1	<java.util.IdentityHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>	<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>	<<immutable-context>>	<org.apache.xerces.dom.ObjectFactory: java.lang.Class findProviderClass(java.lang.String,java.lang.ClassLoader,boolean)>/java.lang.ClassLoader.loadClass/0	<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>	<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>	<<immutable-context>>	<org.apache.xerces.dom.ObjectFactory: java.lang.Class findProviderClass(java.lang.String,java.lang.ClassLoader,boolean)>/java.lang.ClassLoader.loadClass/1	<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>	<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>	<<immutable-context>>	<org.apache.xerces.impl.dv.ObjectFactory: java.lang.Class findProviderClass(java.lang.String,java.lang.ClassLoader,boolean)>/java.lang.ClassLoader.loadClass/0	<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>	<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>	<<immutable-context>>	<org.apache.xerces.impl.dv.ObjectFactory: java.lang.Class findProviderClass(java.lang.String,java.lang.ClassLoader,boolean)>/java.lang.ClassLoader.loadClass/1	<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>	<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>	<<immutable-context>>	<org.apache.html.dom.ObjectFactory: java.lang.Class findProviderClass(java.lang.String,java.lang.ClassLoader,boolean)>/java.lang.ClassLoader.loadClass/0	<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>	<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>	<<immutable-context>>	<org.apache.html.dom.ObjectFactory: java.lang.Class findProviderClass(java.lang.String,java.lang.ClassLoader,boolean)>/java.lang.ClassLoader.loadClass/1	<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<datahub.shaded.org.springframework.beans.factory.annotation.InitDestroyAnnotationBeanPostProcessor: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<datahub.shaded.org.apache.commons.lang.enums.ValuedEnum: int getValueInOtherClassLoader(java.lang.Object)>/java.lang.reflect.Method.invoke/0	<datahub.shaded.org.springframework.beans.factory.annotation.InitDestroyAnnotationBeanPostProcessor: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<datahub.shaded.org.springframework.beans.factory.annotation.InitDestroyAnnotationBeanPostProcessor: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<datahub.shaded.org.apache.commons.lang.enum.Enum: java.lang.String getNameInOtherClassLoader(java.lang.Object)>/java.lang.reflect.Method.invoke/0	<datahub.shaded.org.springframework.beans.factory.annotation.InitDestroyAnnotationBeanPostProcessor: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<datahub.shaded.org.springframework.beans.factory.annotation.InitDestroyAnnotationBeanPostProcessor: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<datahub.shaded.org.apache.commons.lang.enums.Enum: java.lang.String getNameInOtherClassLoader(java.lang.Object)>/java.lang.reflect.Method.invoke/0	<datahub.shaded.org.springframework.beans.factory.annotation.InitDestroyAnnotationBeanPostProcessor: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.HashSet: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<datahub.shaded.org.apache.commons.lang.enums.ValuedEnum: int getValueInOtherClassLoader(java.lang.Object)>/java.lang.reflect.Method.invoke/0	<java.util.HashSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.HashSet: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<datahub.shaded.org.apache.commons.lang.enum.Enum: java.lang.String getNameInOtherClassLoader(java.lang.Object)>/java.lang.reflect.Method.invoke/0	<java.util.HashSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.HashSet: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<datahub.shaded.org.apache.commons.lang.enums.Enum: java.lang.String getNameInOtherClassLoader(java.lang.Object)>/java.lang.reflect.Method.invoke/0	<java.util.HashSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<datahub.shaded.com.google.common.collect.ArrayListMultimap: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<datahub.shaded.org.apache.commons.lang.enums.ValuedEnum: int getValueInOtherClassLoader(java.lang.Object)>/java.lang.reflect.Method.invoke/0	<datahub.shaded.com.google.common.collect.ArrayListMultimap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<datahub.shaded.com.google.common.collect.ArrayListMultimap: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<datahub.shaded.org.apache.commons.lang.enum.Enum: java.lang.String getNameInOtherClassLoader(java.lang.Object)>/java.lang.reflect.Method.invoke/0	<datahub.shaded.com.google.common.collect.ArrayListMultimap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<datahub.shaded.com.google.common.collect.ArrayListMultimap: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<datahub.shaded.org.apache.commons.lang.enums.Enum: java.lang.String getNameInOtherClassLoader(java.lang.Object)>/java.lang.reflect.Method.invoke/0	<datahub.shaded.com.google.common.collect.ArrayListMultimap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<datahub.shaded.org.apache.commons.lang.enums.ValuedEnum: int getValueInOtherClassLoader(java.lang.Object)>/java.lang.reflect.Method.invoke/0	<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<datahub.shaded.org.apache.commons.lang.enum.Enum: java.lang.String getNameInOtherClassLoader(java.lang.Object)>/java.lang.reflect.Method.invoke/0	<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<datahub.shaded.org.apache.commons.lang.enums.Enum: java.lang.String getNameInOtherClassLoader(java.lang.Object)>/java.lang.reflect.Method.invoke/0	<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<datahub.shaded.com.google.common.collect.ImmutableRangeMap: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<datahub.shaded.org.apache.commons.lang.enums.ValuedEnum: int getValueInOtherClassLoader(java.lang.Object)>/java.lang.reflect.Method.invoke/0	<datahub.shaded.com.google.common.collect.ImmutableRangeMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<datahub.shaded.com.google.common.collect.ImmutableRangeMap: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<datahub.shaded.org.apache.commons.lang.enum.Enum: java.lang.String getNameInOtherClassLoader(java.lang.Object)>/java.lang.reflect.Method.invoke/0	<datahub.shaded.com.google.common.collect.ImmutableRangeMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<datahub.shaded.com.google.common.collect.ImmutableRangeMap: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<datahub.shaded.org.apache.commons.lang.enums.Enum: java.lang.String getNameInOtherClassLoader(java.lang.Object)>/java.lang.reflect.Method.invoke/0	<datahub.shaded.com.google.common.collect.ImmutableRangeMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<org.apache.commons.collections.collection.AbstractSerializableCollectionDecorator: void readObject(java.io.ObjectInputStream)>	<java.lang.ProcessBuilder: java.lang.Process start()>	<<immutable-context>>	<org.apache.hadoop.util.Shell: void runCommand()>/java.lang.ProcessBuilder.start/0	<org.apache.commons.collections.collection.AbstractSerializableCollectionDecorator: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<org.apache.commons.collections.collection.AbstractSerializableCollectionDecorator: void readObject(java.io.ObjectInputStream)>	<java.lang.ProcessBuilder: java.lang.Process start()>	<<immutable-context>>	<org.apache.hadoop.util.Shell: void runCommand()>/java.lang.ProcessBuilder.start/1	<org.apache.commons.collections.collection.AbstractSerializableCollectionDecorator: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<org.apache.commons.collections.collection.AbstractSerializableCollectionDecorator: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.lang.String)>	<<immutable-context>>	<org.apache.hadoop.util.Shell: java.io.File checkHadoopHomeInner(java.lang.String)>/java.io.File.<init>/0	<org.apache.commons.collections.collection.AbstractSerializableCollectionDecorator: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<org.apache.commons.collections.collection.AbstractSerializableCollectionDecorator: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.io.File,java.lang.String)>	<<immutable-context>>	<org.apache.hadoop.util.Shell: java.io.File getQualifiedBinInner(java.io.File,java.lang.String)>/java.io.File.<init>/0	<org.apache.commons.collections.collection.AbstractSerializableCollectionDecorator: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<org.apache.commons.collections.collection.AbstractSerializableCollectionDecorator: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.io.File,java.lang.String)>	<<immutable-context>>	<org.apache.hadoop.util.Shell: java.io.File getQualifiedBinInner(java.io.File,java.lang.String)>/java.io.File.<init>/1	<org.apache.commons.collections.collection.AbstractSerializableCollectionDecorator: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<org.apache.curator.shaded.com.google.common.collect.LinkedHashMultiset: void readObject(java.io.ObjectInputStream)>	<java.lang.ProcessBuilder: java.lang.Process start()>	<<immutable-context>>	<org.apache.hadoop.util.Shell: void runCommand()>/java.lang.ProcessBuilder.start/0	<org.apache.curator.shaded.com.google.common.collect.LinkedHashMultiset: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<org.apache.curator.shaded.com.google.common.collect.LinkedHashMultiset: void readObject(java.io.ObjectInputStream)>	<java.lang.ProcessBuilder: java.lang.Process start()>	<<immutable-context>>	<org.apache.hadoop.util.Shell: void runCommand()>/java.lang.ProcessBuilder.start/1	<org.apache.curator.shaded.com.google.common.collect.LinkedHashMultiset: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<org.apache.curator.shaded.com.google.common.collect.LinkedHashMultiset: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.lang.String)>	<<immutable-context>>	<org.apache.hadoop.util.Shell: java.io.File checkHadoopHomeInner(java.lang.String)>/java.io.File.<init>/0	<org.apache.curator.shaded.com.google.common.collect.LinkedHashMultiset: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<org.apache.curator.shaded.com.google.common.collect.LinkedHashMultiset: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.io.File,java.lang.String)>	<<immutable-context>>	<org.apache.hadoop.util.Shell: java.io.File getQualifiedBinInner(java.io.File,java.lang.String)>/java.io.File.<init>/0	<org.apache.curator.shaded.com.google.common.collect.LinkedHashMultiset: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<org.apache.curator.shaded.com.google.common.collect.LinkedHashMultiset: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.io.File,java.lang.String)>	<<immutable-context>>	<org.apache.hadoop.util.Shell: java.io.File getQualifiedBinInner(java.io.File,java.lang.String)>/java.io.File.<init>/1	<org.apache.curator.shaded.com.google.common.collect.LinkedHashMultiset: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.HashMap: void readObject(java.io.ObjectInputStream)>	<java.lang.ProcessBuilder: java.lang.Process start()>	<<immutable-context>>	<org.apache.hadoop.util.Shell: void runCommand()>/java.lang.ProcessBuilder.start/0	<java.util.HashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.HashMap: void readObject(java.io.ObjectInputStream)>	<java.lang.ProcessBuilder: java.lang.Process start()>	<<immutable-context>>	<org.apache.hadoop.util.Shell: void runCommand()>/java.lang.ProcessBuilder.start/1	<java.util.HashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.HashMap: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.lang.String)>	<<immutable-context>>	<org.apache.hadoop.util.Shell: java.io.File checkHadoopHomeInner(java.lang.String)>/java.io.File.<init>/0	<java.util.HashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.HashMap: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.io.File,java.lang.String)>	<<immutable-context>>	<org.apache.hadoop.util.Shell: java.io.File getQualifiedBinInner(java.io.File,java.lang.String)>/java.io.File.<init>/0	<java.util.HashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.HashMap: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.io.File,java.lang.String)>	<<immutable-context>>	<org.apache.hadoop.util.Shell: java.io.File getQualifiedBinInner(java.io.File,java.lang.String)>/java.io.File.<init>/1	<java.util.HashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<org.apache.commons.collections.set.AbstractSerializableSetDecorator: void readObject(java.io.ObjectInputStream)>	<java.lang.ProcessBuilder: java.lang.Process start()>	<<immutable-context>>	<org.apache.hadoop.util.Shell: void runCommand()>/java.lang.ProcessBuilder.start/0	<org.apache.commons.collections.set.AbstractSerializableSetDecorator: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<org.apache.commons.collections.set.AbstractSerializableSetDecorator: void readObject(java.io.ObjectInputStream)>	<java.lang.ProcessBuilder: java.lang.Process start()>	<<immutable-context>>	<org.apache.hadoop.util.Shell: void runCommand()>/java.lang.ProcessBuilder.start/1	<org.apache.commons.collections.set.AbstractSerializableSetDecorator: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<org.apache.commons.collections.set.AbstractSerializableSetDecorator: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.lang.String)>	<<immutable-context>>	<org.apache.hadoop.util.Shell: java.io.File checkHadoopHomeInner(java.lang.String)>/java.io.File.<init>/0	<org.apache.commons.collections.set.AbstractSerializableSetDecorator: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<org.apache.commons.collections.set.AbstractSerializableSetDecorator: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.io.File,java.lang.String)>	<<immutable-context>>	<org.apache.hadoop.util.Shell: java.io.File getQualifiedBinInner(java.io.File,java.lang.String)>/java.io.File.<init>/0	<org.apache.commons.collections.set.AbstractSerializableSetDecorator: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<org.apache.commons.collections.set.AbstractSerializableSetDecorator: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.io.File,java.lang.String)>	<<immutable-context>>	<org.apache.hadoop.util.Shell: java.io.File getQualifiedBinInner(java.io.File,java.lang.String)>/java.io.File.<init>/1	<org.apache.commons.collections.set.AbstractSerializableSetDecorator: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentLinkedQueue: void readObject(java.io.ObjectInputStream)>	<java.lang.ProcessBuilder: java.lang.Process start()>	<<immutable-context>>	<org.apache.hadoop.util.Shell: void runCommand()>/java.lang.ProcessBuilder.start/0	<java.util.concurrent.ConcurrentLinkedQueue: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentLinkedQueue: void readObject(java.io.ObjectInputStream)>	<java.lang.ProcessBuilder: java.lang.Process start()>	<<immutable-context>>	<org.apache.hadoop.util.Shell: void runCommand()>/java.lang.ProcessBuilder.start/1	<java.util.concurrent.ConcurrentLinkedQueue: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentLinkedQueue: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.lang.String)>	<<immutable-context>>	<org.apache.hadoop.util.Shell: java.io.File checkHadoopHomeInner(java.lang.String)>/java.io.File.<init>/0	<java.util.concurrent.ConcurrentLinkedQueue: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentLinkedQueue: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.io.File,java.lang.String)>	<<immutable-context>>	<org.apache.hadoop.util.Shell: java.io.File getQualifiedBinInner(java.io.File,java.lang.String)>/java.io.File.<init>/0	<java.util.concurrent.ConcurrentLinkedQueue: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentLinkedQueue: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.io.File,java.lang.String)>	<<immutable-context>>	<org.apache.hadoop.util.Shell: java.io.File getQualifiedBinInner(java.io.File,java.lang.String)>/java.io.File.<init>/1	<java.util.concurrent.ConcurrentLinkedQueue: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.PriorityBlockingQueue: void readObject(java.io.ObjectInputStream)>	<java.lang.ProcessBuilder: java.lang.Process start()>	<<immutable-context>>	<org.apache.hadoop.util.Shell: void runCommand()>/java.lang.ProcessBuilder.start/0	<java.util.concurrent.PriorityBlockingQueue: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.PriorityBlockingQueue: void readObject(java.io.ObjectInputStream)>	<java.lang.ProcessBuilder: java.lang.Process start()>	<<immutable-context>>	<org.apache.hadoop.util.Shell: void runCommand()>/java.lang.ProcessBuilder.start/1	<java.util.concurrent.PriorityBlockingQueue: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.PriorityBlockingQueue: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.lang.String)>	<<immutable-context>>	<org.apache.hadoop.util.Shell: java.io.File checkHadoopHomeInner(java.lang.String)>/java.io.File.<init>/0	<java.util.concurrent.PriorityBlockingQueue: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.PriorityBlockingQueue: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.io.File,java.lang.String)>	<<immutable-context>>	<org.apache.hadoop.util.Shell: java.io.File getQualifiedBinInner(java.io.File,java.lang.String)>/java.io.File.<init>/0	<java.util.concurrent.PriorityBlockingQueue: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.PriorityBlockingQueue: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.io.File,java.lang.String)>	<<immutable-context>>	<org.apache.hadoop.util.Shell: java.io.File getQualifiedBinInner(java.io.File,java.lang.String)>/java.io.File.<init>/1	<java.util.concurrent.PriorityBlockingQueue: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>	<java.lang.ProcessBuilder: java.lang.Process start()>	<<immutable-context>>	<org.apache.hadoop.util.Shell: void runCommand()>/java.lang.ProcessBuilder.start/0	<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>	<java.lang.ProcessBuilder: java.lang.Process start()>	<<immutable-context>>	<org.apache.hadoop.util.Shell: void runCommand()>/java.lang.ProcessBuilder.start/1	<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.lang.String)>	<<immutable-context>>	<org.apache.hadoop.util.Shell: java.io.File checkHadoopHomeInner(java.lang.String)>/java.io.File.<init>/0	<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.io.File,java.lang.String)>	<<immutable-context>>	<org.apache.hadoop.util.Shell: java.io.File getQualifiedBinInner(java.io.File,java.lang.String)>/java.io.File.<init>/0	<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>	<java.io.File: void <init>(java.io.File,java.lang.String)>	<<immutable-context>>	<org.apache.hadoop.util.Shell: java.io.File getQualifiedBinInner(java.io.File,java.lang.String)>/java.io.File.<init>/1	<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream

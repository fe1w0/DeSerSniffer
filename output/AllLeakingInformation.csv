TromLabel	ToLabel	Context	Invocation	SourceValue
<java.util.concurrent.PriorityBlockingQueue: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<com.google.common.reflect.Types$JavaVersion$3: java.lang.String typeName(java.lang.reflect.Type)>/java.lang.reflect.Method.invoke/0	<java.util.concurrent.PriorityBlockingQueue: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<com.google.common.util.concurrent.AtomicDoubleArray: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<com.google.common.reflect.Types$JavaVersion$3: java.lang.String typeName(java.lang.reflect.Type)>/java.lang.reflect.Method.invoke/0	<com.google.common.util.concurrent.AtomicDoubleArray: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<com.google.common.collect.MapMakerInternalMap: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<com.google.common.reflect.Types$JavaVersion$3: java.lang.String typeName(java.lang.reflect.Type)>/java.lang.reflect.Method.invoke/0	<com.google.common.collect.MapMakerInternalMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<com.google.common.collect.EnumHashBiMap: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<com.google.common.reflect.Types$JavaVersion$3: java.lang.String typeName(java.lang.reflect.Type)>/java.lang.reflect.Method.invoke/0	<com.google.common.collect.EnumHashBiMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<com.google.common.reflect.Types$JavaVersion$3: java.lang.String typeName(java.lang.reflect.Type)>/java.lang.reflect.Method.invoke/0	<java.util.ArrayDeque: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<com.google.common.reflect.Types$JavaVersion$3: java.lang.String typeName(java.lang.reflect.Type)>/java.lang.reflect.Method.invoke/0	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<com.google.common.collect.LinkedHashMultiset: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<com.google.common.reflect.Types$JavaVersion$3: java.lang.String typeName(java.lang.reflect.Type)>/java.lang.reflect.Method.invoke/0	<com.google.common.collect.LinkedHashMultiset: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<com.google.common.collect.ArrayListMultimap: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<com.google.common.reflect.Types$JavaVersion$3: java.lang.String typeName(java.lang.reflect.Type)>/java.lang.reflect.Method.invoke/0	<com.google.common.collect.ArrayListMultimap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<com.google.common.collect.CompactHashSet: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<com.google.common.reflect.Types$JavaVersion$3: java.lang.String typeName(java.lang.reflect.Type)>/java.lang.reflect.Method.invoke/0	<com.google.common.collect.CompactHashSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<com.google.common.collect.LinkedHashMultimap: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<com.google.common.reflect.Types$JavaVersion$3: java.lang.String typeName(java.lang.reflect.Type)>/java.lang.reflect.Method.invoke/0	<com.google.common.collect.LinkedHashMultimap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<com.google.common.hash.MessageDigestHashFunction: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<com.google.common.reflect.Types$JavaVersion$3: java.lang.String typeName(java.lang.reflect.Type)>/java.lang.reflect.Method.invoke/0	<com.google.common.hash.MessageDigestHashFunction: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<com.google.common.collect.ConcurrentHashMultiset: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<com.google.common.reflect.Types$JavaVersion$3: java.lang.String typeName(java.lang.reflect.Type)>/java.lang.reflect.Method.invoke/0	<com.google.common.collect.ConcurrentHashMultiset: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeMap: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<com.google.common.reflect.Types$JavaVersion$3: java.lang.String typeName(java.lang.reflect.Type)>/java.lang.reflect.Method.invoke/0	<java.util.TreeMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentLinkedQueue: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<com.google.common.reflect.Types$JavaVersion$3: java.lang.String typeName(java.lang.reflect.Type)>/java.lang.reflect.Method.invoke/0	<java.util.concurrent.ConcurrentLinkedQueue: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<com.google.common.collect.HashMultimap: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<com.google.common.reflect.Types$JavaVersion$3: java.lang.String typeName(java.lang.reflect.Type)>/java.lang.reflect.Method.invoke/0	<com.google.common.collect.HashMultimap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<com.google.common.reflect.Types$JavaVersion$3: java.lang.String typeName(java.lang.reflect.Type)>/java.lang.reflect.Method.invoke/0	<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<com.google.common.collect.ImmutableSetMultimap: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<com.google.common.reflect.Types$JavaVersion$3: java.lang.String typeName(java.lang.reflect.Type)>/java.lang.reflect.Method.invoke/0	<com.google.common.collect.ImmutableSetMultimap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<com.google.common.hash.LongAdder: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<com.google.common.reflect.Types$JavaVersion$3: java.lang.String typeName(java.lang.reflect.Type)>/java.lang.reflect.Method.invoke/0	<com.google.common.hash.LongAdder: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<com.google.common.collect.RegularContiguousSet: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<com.google.common.reflect.Types$JavaVersion$3: java.lang.String typeName(java.lang.reflect.Type)>/java.lang.reflect.Method.invoke/0	<com.google.common.collect.RegularContiguousSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.LinkedBlockingQueue: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<com.google.common.reflect.Types$JavaVersion$3: java.lang.String typeName(java.lang.reflect.Type)>/java.lang.reflect.Method.invoke/0	<java.util.concurrent.LinkedBlockingQueue: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.SynchronousQueue: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<com.google.common.reflect.Types$JavaVersion$3: java.lang.String typeName(java.lang.reflect.Type)>/java.lang.reflect.Method.invoke/0	<java.util.concurrent.SynchronousQueue: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.CopyOnWriteArrayList: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<com.google.common.reflect.Types$JavaVersion$3: java.lang.String typeName(java.lang.reflect.Type)>/java.lang.reflect.Method.invoke/0	<java.util.concurrent.CopyOnWriteArrayList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<com.google.common.collect.ImmutableListMultimap: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<com.google.common.reflect.Types$JavaVersion$3: java.lang.String typeName(java.lang.reflect.Type)>/java.lang.reflect.Method.invoke/0	<com.google.common.collect.ImmutableListMultimap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.IdentityHashMap: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<com.google.common.reflect.Types$JavaVersion$3: java.lang.String typeName(java.lang.reflect.Type)>/java.lang.reflect.Method.invoke/0	<java.util.IdentityHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<com.google.common.collect.ImmutableEnumMap: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<com.google.common.reflect.Types$JavaVersion$3: java.lang.String typeName(java.lang.reflect.Type)>/java.lang.reflect.Method.invoke/0	<com.google.common.collect.ImmutableEnumMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<com.google.common.reflect.Types$JavaVersion$3: java.lang.String typeName(java.lang.reflect.Type)>/java.lang.reflect.Method.invoke/0	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<com.google.common.collect.EnumBiMap: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<com.google.common.reflect.Types$JavaVersion$3: java.lang.String typeName(java.lang.reflect.Type)>/java.lang.reflect.Method.invoke/0	<com.google.common.collect.EnumBiMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<com.google.common.collect.TreeMultiset: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<com.google.common.reflect.Types$JavaVersion$3: java.lang.String typeName(java.lang.reflect.Type)>/java.lang.reflect.Method.invoke/0	<com.google.common.collect.TreeMultiset: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<com.google.common.collect.TreeMultimap: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<com.google.common.reflect.Types$JavaVersion$3: java.lang.String typeName(java.lang.reflect.Type)>/java.lang.reflect.Method.invoke/0	<com.google.common.collect.TreeMultimap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<com.google.common.collect.HashMultiset: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<com.google.common.reflect.Types$JavaVersion$3: java.lang.String typeName(java.lang.reflect.Type)>/java.lang.reflect.Method.invoke/0	<com.google.common.collect.HashMultiset: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<com.google.common.collect.HashBiMap: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<com.google.common.reflect.Types$JavaVersion$3: java.lang.String typeName(java.lang.reflect.Type)>/java.lang.reflect.Method.invoke/0	<com.google.common.collect.HashBiMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.PriorityQueue: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<com.google.common.reflect.Types$JavaVersion$3: java.lang.String typeName(java.lang.reflect.Type)>/java.lang.reflect.Method.invoke/0	<java.util.PriorityQueue: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<com.google.common.collect.CompactHashMap: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<com.google.common.reflect.Types$JavaVersion$3: java.lang.String typeName(java.lang.reflect.Type)>/java.lang.reflect.Method.invoke/0	<com.google.common.collect.CompactHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>	<java.io.FileOutputStream: void write(byte[])>	<<immutable-context>>	<clojure.lang.Compiler: void writeClassFile(java.lang.String,byte[])>/java.io.FileOutputStream.write/0	<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(int)>	<<immutable-context>>	<clojure.core.proxy$java.io.Writer$ff19274a: void write(int)>/java.io.Writer.write/0	<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(int)>	<<immutable-context>>	<clojure.pprint.proxy$java.io.Writer$IDeref$e595a7c1: void write(int)>/java.io.Writer.write/0	<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(int)>	<<immutable-context>>	<clojure.pprint.proxy$java.io.Writer$ff19274a: void write(int)>/java.io.Writer.write/0	<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(int)>	<<immutable-context>>	<clojure.pprint$p_write_char: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(int)>	<<immutable-context>>	<clojure.pprint$c_write_char: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(int)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/1	<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(int)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/3	<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(int)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/4	<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(int)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/6	<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(int)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/14	<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(int)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/15	<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(int)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/16	<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(int)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/17	<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(int)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/19	<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(int)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/20	<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(int)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/21	<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(int)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/22	<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(int)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/25	<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(int)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/26	<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(int)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/27	<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(int)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/34	<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(int)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/38	<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(int)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/40	<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(int)>	<<immutable-context>>	<clojure.lang.RT: void printInnerSeq(clojure.lang.ISeq,java.io.Writer)>/java.io.Writer.write/0	<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint.proxy$java.io.Writer$IDeref$e595a7c1: void write(java.lang.String)>/java.io.Writer.write/0	<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_simple_list$fn__11152: java.lang.Object invoke()>/java.io.Writer.write/0	<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_simple_list$fn__11152: java.lang.Object invoke()>/java.io.Writer.write/1	<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7515: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7515: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/1	<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7515: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/2	<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7478: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7478: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/1	<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$write_white_space: java.lang.Object invokeStatic(java.lang.Object)>/java.io.Writer.write/0	<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7403: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7366: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_condp: java.lang.Object invokeStatic(java.lang.Object)>/java.io.Writer.write/0	<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_ns_reference$fn__11215: java.lang.Object invoke()>/java.io.Writer.write/0	<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7509: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7509: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/1	<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7509: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/2	<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7509: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/3	<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7509: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/4	<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7509: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/5	<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7509: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/6	<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7509: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/7	<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7417: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7417: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/1	<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7417: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/2	<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7417: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/3	<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7393: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_meta: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_meta: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/1	<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7480: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7480: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/1	<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_simple_list: java.lang.Object invokeStatic(java.lang.Object)>/java.io.Writer.write/0	<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_map: java.lang.Object invokeStatic(java.lang.Object)>/java.io.Writer.write/0	<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7468: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7468: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/1	<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7468: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/2	<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7468: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/3	<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7379: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7532: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7532: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/1	<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_set$fn__11181: java.lang.Object invoke()>/java.io.Writer.write/0	<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_set$fn__11181: java.lang.Object invoke()>/java.io.Writer.write/1	<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_map$fn__11173: java.lang.Object invoke()>/java.io.Writer.write/0	<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_map$fn__11173: java.lang.Object invoke()>/java.io.Writer.write/1	<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_map$fn__11173: java.lang.Object invoke()>/java.io.Writer.write/2	<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$fn__10207: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$fn__10216: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$emit_nl: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$emit_nl: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/1	<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$emit_nl: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/2	<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_simple_code_list: java.lang.Object invokeStatic(java.lang.Object)>/java.io.Writer.write/0	<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_cond$fn__11379: java.lang.Object invoke()>/java.io.Writer.write/0	<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_cond$fn__11379: java.lang.Object invoke()>/java.io.Writer.write/1	<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_cond$fn__11379: java.lang.Object invoke()>/java.io.Writer.write/2	<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_cond$fn__11379: java.lang.Object invoke()>/java.io.Writer.write/3	<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.instant$print_date: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.instant$print_date: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/1	<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.instant$print_date: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/2	<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7484: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_simple_code_list$fn__11408: java.lang.Object invoke()>/java.io.Writer.write/0	<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_simple_code_list$fn__11408: java.lang.Object invoke()>/java.io.Writer.write/1	<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.instant$print_timestamp: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.instant$print_timestamp: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/1	<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.instant$print_timestamp: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/2	<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.instant$print_timestamp: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/3	<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7375: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7582: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7582: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/1	<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7419: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7419: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/1	<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.uuid$fn__8526: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_set: java.lang.Object invokeStatic(java.lang.Object)>/java.io.Writer.write/0	<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_throwable$print_via__7561: java.lang.Object invoke(java.lang.Object)>/java.io.Writer.write/0	<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_throwable$print_via__7561: java.lang.Object invoke(java.lang.Object)>/java.io.Writer.write/1	<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_throwable$print_via__7561: java.lang.Object invoke(java.lang.Object)>/java.io.Writer.write/2	<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_throwable$print_via__7561: java.lang.Object invoke(java.lang.Object)>/java.io.Writer.write/3	<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_throwable$print_via__7561: java.lang.Object invoke(java.lang.Object)>/java.io.Writer.write/4	<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_ns: java.lang.Object invokeStatic(java.lang.Object)>/java.io.Writer.write/0	<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_simple: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_ideref: java.lang.Object invokeStatic(java.lang.Object)>/java.io.Writer.write/0	<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_throwable: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_throwable: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/1	<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_throwable: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/2	<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_throwable: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/3	<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_throwable: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/4	<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_throwable: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/5	<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_throwable: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/6	<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_throwable: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/7	<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_throwable: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/8	<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_throwable: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/9	<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_throwable: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/10	<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7513: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7513: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/1	<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_tagged_object: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_tagged_object: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object)>/java.io.Writer.write/1	<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_tagged_object: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object)>/java.io.Writer.write/2	<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_tagged_object: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object)>/java.io.Writer.write/3	<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_tagged_object: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object)>/java.io.Writer.write/4	<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_condp$fn__11386: java.lang.Object invoke()>/java.io.Writer.write/0	<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_condp$fn__11386: java.lang.Object invoke()>/java.io.Writer.write/1	<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_condp$fn__11386: java.lang.Object invoke()>/java.io.Writer.write/2	<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_meta: java.lang.Object invokeStatic(java.lang.Object)>/java.io.Writer.write/0	<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_meta: java.lang.Object invokeStatic(java.lang.Object)>/java.io.Writer.write/1	<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_ns_reference: java.lang.Object invokeStatic(java.lang.Object)>/java.io.Writer.write/0	<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_sequential: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_sequential: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>/java.io.Writer.write/1	<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_sequential: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>/java.io.Writer.write/2	<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_sequential: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>/java.io.Writer.write/3	<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_sequential: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>/java.io.Writer.write/4	<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_sequential: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>/java.io.Writer.write/5	<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_ctor: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_ctor: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object)>/java.io.Writer.write/1	<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_ctor: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object)>/java.io.Writer.write/2	<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_ctor: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object)>/java.io.Writer.write/3	<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_let: java.lang.Object invokeStatic(java.lang.Object)>/java.io.Writer.write/0	<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_vector$fn__11158: java.lang.Object invoke()>/java.io.Writer.write/0	<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_vector$fn__11158: java.lang.Object invoke()>/java.io.Writer.write/1	<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$fn__10219: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_defn: java.lang.Object invokeStatic(java.lang.Object)>/java.io.Writer.write/0	<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_cond: java.lang.Object invokeStatic(java.lang.Object)>/java.io.Writer.write/0	<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/0	<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/2	<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/5	<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/7	<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/8	<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/9	<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/10	<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/11	<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/12	<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/13	<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/18	<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/23	<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/24	<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/28	<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/29	<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/30	<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/31	<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/32	<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/33	<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/35	<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/36	<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/37	<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/39	<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/41	<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/42	<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/43	<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/44	<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/45	<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$write_tokens: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$write_tokens: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object)>/java.io.Writer.write/1	<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$write_tokens: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object)>/java.io.Writer.write/2	<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_reader_macro: java.lang.Object invokeStatic(java.lang.Object)>/java.io.Writer.write/0	<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7381: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7381: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/1	<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7381: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/2	<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7381: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/3	<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_binding_form$fn__11351: java.lang.Object invoke()>/java.io.Writer.write/0	<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_binding_form$fn__11351: java.lang.Object invoke()>/java.io.Writer.write/1	<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_binding_form$fn__11351: java.lang.Object invoke()>/java.io.Writer.write/2	<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_vector: java.lang.Object invokeStatic(java.lang.Object)>/java.io.Writer.write/0	<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7383: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7383: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/1	<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7383: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/2	<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7383: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/3	<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_binding_form: java.lang.Object invokeStatic(java.lang.Object)>/java.io.Writer.write/0	<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7511: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7511: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/1	<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.instant$print_calendar: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.instant$print_calendar: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/2	<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.instant$print_calendar: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/4	<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7507: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7584: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7584: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/1	<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String,int,int)>	<<immutable-context>>	<clojure.instant$print_calendar: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/1	<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String,int,int)>	<<immutable-context>>	<clojure.instant$print_calendar: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/3	<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(int)>	<<immutable-context>>	<clojure.pprint$p_write_char: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(int)>	<<immutable-context>>	<clojure.pprint$c_write_char: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String,int,int)>	<<immutable-context>>	<clojure.instant$print_calendar: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/1	<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String,int,int)>	<<immutable-context>>	<clojure.instant$print_calendar: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/3	<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_simple_list$fn__11152: java.lang.Object invoke()>/java.io.Writer.write/0	<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_simple_list$fn__11152: java.lang.Object invoke()>/java.io.Writer.write/1	<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7515: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7515: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/1	<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7515: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/2	<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7478: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7478: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/1	<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$write_white_space: java.lang.Object invokeStatic(java.lang.Object)>/java.io.Writer.write/0	<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7403: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7366: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_condp: java.lang.Object invokeStatic(java.lang.Object)>/java.io.Writer.write/0	<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_ns_reference$fn__11215: java.lang.Object invoke()>/java.io.Writer.write/0	<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7509: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7509: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/1	<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7509: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/2	<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7509: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/3	<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7509: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/4	<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7509: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/5	<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7509: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/6	<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7509: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/7	<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7417: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7417: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/1	<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7417: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/2	<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7417: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/3	<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7393: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_meta: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_meta: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/1	<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7480: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7480: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/1	<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_simple_list: java.lang.Object invokeStatic(java.lang.Object)>/java.io.Writer.write/0	<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_map: java.lang.Object invokeStatic(java.lang.Object)>/java.io.Writer.write/0	<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7468: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7468: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/1	<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7468: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/2	<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7468: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/3	<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7379: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7532: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7532: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/1	<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_set$fn__11181: java.lang.Object invoke()>/java.io.Writer.write/0	<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_set$fn__11181: java.lang.Object invoke()>/java.io.Writer.write/1	<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_map$fn__11173: java.lang.Object invoke()>/java.io.Writer.write/0	<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_map$fn__11173: java.lang.Object invoke()>/java.io.Writer.write/1	<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_map$fn__11173: java.lang.Object invoke()>/java.io.Writer.write/2	<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$fn__10207: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$fn__10216: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$emit_nl: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$emit_nl: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/1	<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$emit_nl: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/2	<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_simple_code_list: java.lang.Object invokeStatic(java.lang.Object)>/java.io.Writer.write/0	<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_cond$fn__11379: java.lang.Object invoke()>/java.io.Writer.write/0	<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_cond$fn__11379: java.lang.Object invoke()>/java.io.Writer.write/1	<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_cond$fn__11379: java.lang.Object invoke()>/java.io.Writer.write/2	<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_cond$fn__11379: java.lang.Object invoke()>/java.io.Writer.write/3	<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.instant$print_date: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.instant$print_date: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/1	<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.instant$print_date: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/2	<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7484: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_simple_code_list$fn__11408: java.lang.Object invoke()>/java.io.Writer.write/0	<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_simple_code_list$fn__11408: java.lang.Object invoke()>/java.io.Writer.write/1	<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.instant$print_timestamp: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.instant$print_timestamp: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/1	<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.instant$print_timestamp: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/2	<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.instant$print_timestamp: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/3	<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7375: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7582: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7582: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/1	<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7419: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7419: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/1	<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.uuid$fn__8526: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_set: java.lang.Object invokeStatic(java.lang.Object)>/java.io.Writer.write/0	<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_throwable$print_via__7561: java.lang.Object invoke(java.lang.Object)>/java.io.Writer.write/0	<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_throwable$print_via__7561: java.lang.Object invoke(java.lang.Object)>/java.io.Writer.write/1	<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_throwable$print_via__7561: java.lang.Object invoke(java.lang.Object)>/java.io.Writer.write/2	<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_throwable$print_via__7561: java.lang.Object invoke(java.lang.Object)>/java.io.Writer.write/3	<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_throwable$print_via__7561: java.lang.Object invoke(java.lang.Object)>/java.io.Writer.write/4	<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_ns: java.lang.Object invokeStatic(java.lang.Object)>/java.io.Writer.write/0	<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_simple: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_ideref: java.lang.Object invokeStatic(java.lang.Object)>/java.io.Writer.write/0	<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_throwable: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_throwable: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/1	<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_throwable: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/2	<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_throwable: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/3	<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_throwable: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/4	<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_throwable: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/5	<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_throwable: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/6	<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_throwable: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/7	<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_throwable: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/8	<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_throwable: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/9	<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_throwable: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/10	<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7513: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7513: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/1	<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_tagged_object: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_tagged_object: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object)>/java.io.Writer.write/1	<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_tagged_object: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object)>/java.io.Writer.write/2	<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_tagged_object: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object)>/java.io.Writer.write/3	<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_tagged_object: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object)>/java.io.Writer.write/4	<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_condp$fn__11386: java.lang.Object invoke()>/java.io.Writer.write/0	<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_condp$fn__11386: java.lang.Object invoke()>/java.io.Writer.write/1	<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_condp$fn__11386: java.lang.Object invoke()>/java.io.Writer.write/2	<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_meta: java.lang.Object invokeStatic(java.lang.Object)>/java.io.Writer.write/0	<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_meta: java.lang.Object invokeStatic(java.lang.Object)>/java.io.Writer.write/1	<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_ns_reference: java.lang.Object invokeStatic(java.lang.Object)>/java.io.Writer.write/0	<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_sequential: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_sequential: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>/java.io.Writer.write/1	<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_sequential: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>/java.io.Writer.write/2	<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_sequential: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>/java.io.Writer.write/3	<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_sequential: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>/java.io.Writer.write/4	<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_sequential: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>/java.io.Writer.write/5	<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_ctor: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_ctor: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object)>/java.io.Writer.write/1	<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_ctor: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object)>/java.io.Writer.write/2	<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_ctor: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object)>/java.io.Writer.write/3	<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_let: java.lang.Object invokeStatic(java.lang.Object)>/java.io.Writer.write/0	<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_vector$fn__11158: java.lang.Object invoke()>/java.io.Writer.write/0	<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_vector$fn__11158: java.lang.Object invoke()>/java.io.Writer.write/1	<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$fn__10219: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_defn: java.lang.Object invokeStatic(java.lang.Object)>/java.io.Writer.write/0	<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_cond: java.lang.Object invokeStatic(java.lang.Object)>/java.io.Writer.write/0	<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$write_tokens: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$write_tokens: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object)>/java.io.Writer.write/1	<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$write_tokens: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object)>/java.io.Writer.write/2	<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_reader_macro: java.lang.Object invokeStatic(java.lang.Object)>/java.io.Writer.write/0	<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7381: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7381: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/1	<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7381: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/2	<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7381: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/3	<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_binding_form$fn__11351: java.lang.Object invoke()>/java.io.Writer.write/0	<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_binding_form$fn__11351: java.lang.Object invoke()>/java.io.Writer.write/1	<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_binding_form$fn__11351: java.lang.Object invoke()>/java.io.Writer.write/2	<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_vector: java.lang.Object invokeStatic(java.lang.Object)>/java.io.Writer.write/0	<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7383: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7383: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/1	<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7383: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/2	<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7383: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/3	<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_binding_form: java.lang.Object invokeStatic(java.lang.Object)>/java.io.Writer.write/0	<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7511: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7511: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/1	<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.instant$print_calendar: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.instant$print_calendar: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/2	<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.instant$print_calendar: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/4	<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7507: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7584: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7584: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/1	<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>	<java.lang.ProcessBuilder: java.lang.Process start()>	<<immutable-context>>	<clojure.java.browse$browse_url$fn__11861: java.lang.Object invoke()>/java.lang.ProcessBuilder.start/0	<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>	<java.io.FileOutputStream: void write(byte[])>	<<immutable-context>>	<clojure.lang.Compiler: void writeClassFile(java.lang.String,byte[])>/java.io.FileOutputStream.write/0	<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(int)>	<<immutable-context>>	<clojure.core.proxy$java.io.Writer$ff19274a: void write(int)>/java.io.Writer.write/0	<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(int)>	<<immutable-context>>	<clojure.pprint.proxy$java.io.Writer$IDeref$e595a7c1: void write(int)>/java.io.Writer.write/0	<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(int)>	<<immutable-context>>	<clojure.pprint.proxy$java.io.Writer$ff19274a: void write(int)>/java.io.Writer.write/0	<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(int)>	<<immutable-context>>	<clojure.pprint$p_write_char: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(int)>	<<immutable-context>>	<clojure.pprint$c_write_char: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(int)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/1	<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(int)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/3	<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(int)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/4	<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(int)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/6	<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(int)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/14	<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(int)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/15	<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(int)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/16	<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(int)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/17	<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(int)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/19	<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(int)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/20	<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(int)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/21	<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(int)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/22	<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(int)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/25	<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(int)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/26	<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(int)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/27	<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(int)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/34	<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(int)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/38	<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(int)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/40	<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(int)>	<<immutable-context>>	<clojure.lang.RT: void printInnerSeq(clojure.lang.ISeq,java.io.Writer)>/java.io.Writer.write/0	<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint.proxy$java.io.Writer$IDeref$e595a7c1: void write(java.lang.String)>/java.io.Writer.write/0	<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_simple_list$fn__11152: java.lang.Object invoke()>/java.io.Writer.write/0	<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_simple_list$fn__11152: java.lang.Object invoke()>/java.io.Writer.write/1	<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7515: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7515: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/1	<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7515: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/2	<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7478: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7478: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/1	<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$write_white_space: java.lang.Object invokeStatic(java.lang.Object)>/java.io.Writer.write/0	<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7403: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7366: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_condp: java.lang.Object invokeStatic(java.lang.Object)>/java.io.Writer.write/0	<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_ns_reference$fn__11215: java.lang.Object invoke()>/java.io.Writer.write/0	<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7509: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7509: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/1	<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7509: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/2	<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7509: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/3	<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7509: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/4	<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7509: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/5	<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7509: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/6	<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7509: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/7	<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7417: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7417: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/1	<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7417: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/2	<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7417: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/3	<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7393: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_meta: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_meta: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/1	<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7480: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7480: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/1	<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_simple_list: java.lang.Object invokeStatic(java.lang.Object)>/java.io.Writer.write/0	<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_map: java.lang.Object invokeStatic(java.lang.Object)>/java.io.Writer.write/0	<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7468: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7468: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/1	<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7468: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/2	<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7468: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/3	<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7379: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7532: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7532: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/1	<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_set$fn__11181: java.lang.Object invoke()>/java.io.Writer.write/0	<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_set$fn__11181: java.lang.Object invoke()>/java.io.Writer.write/1	<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_map$fn__11173: java.lang.Object invoke()>/java.io.Writer.write/0	<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_map$fn__11173: java.lang.Object invoke()>/java.io.Writer.write/1	<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_map$fn__11173: java.lang.Object invoke()>/java.io.Writer.write/2	<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$fn__10207: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$fn__10216: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$emit_nl: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$emit_nl: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/1	<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$emit_nl: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/2	<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_simple_code_list: java.lang.Object invokeStatic(java.lang.Object)>/java.io.Writer.write/0	<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_cond$fn__11379: java.lang.Object invoke()>/java.io.Writer.write/0	<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_cond$fn__11379: java.lang.Object invoke()>/java.io.Writer.write/1	<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_cond$fn__11379: java.lang.Object invoke()>/java.io.Writer.write/2	<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_cond$fn__11379: java.lang.Object invoke()>/java.io.Writer.write/3	<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.instant$print_date: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.instant$print_date: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/1	<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.instant$print_date: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/2	<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7484: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_simple_code_list$fn__11408: java.lang.Object invoke()>/java.io.Writer.write/0	<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_simple_code_list$fn__11408: java.lang.Object invoke()>/java.io.Writer.write/1	<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.instant$print_timestamp: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.instant$print_timestamp: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/1	<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.instant$print_timestamp: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/2	<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.instant$print_timestamp: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/3	<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7375: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7582: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7582: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/1	<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7419: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7419: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/1	<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.uuid$fn__8526: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_set: java.lang.Object invokeStatic(java.lang.Object)>/java.io.Writer.write/0	<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_throwable$print_via__7561: java.lang.Object invoke(java.lang.Object)>/java.io.Writer.write/0	<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_throwable$print_via__7561: java.lang.Object invoke(java.lang.Object)>/java.io.Writer.write/1	<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_throwable$print_via__7561: java.lang.Object invoke(java.lang.Object)>/java.io.Writer.write/2	<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_throwable$print_via__7561: java.lang.Object invoke(java.lang.Object)>/java.io.Writer.write/3	<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_throwable$print_via__7561: java.lang.Object invoke(java.lang.Object)>/java.io.Writer.write/4	<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_ns: java.lang.Object invokeStatic(java.lang.Object)>/java.io.Writer.write/0	<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_simple: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_ideref: java.lang.Object invokeStatic(java.lang.Object)>/java.io.Writer.write/0	<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_throwable: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_throwable: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/1	<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_throwable: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/2	<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_throwable: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/3	<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_throwable: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/4	<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_throwable: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/5	<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_throwable: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/6	<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_throwable: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/7	<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_throwable: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/8	<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_throwable: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/9	<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_throwable: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/10	<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7513: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7513: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/1	<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_tagged_object: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_tagged_object: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object)>/java.io.Writer.write/1	<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_tagged_object: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object)>/java.io.Writer.write/2	<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_tagged_object: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object)>/java.io.Writer.write/3	<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_tagged_object: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object)>/java.io.Writer.write/4	<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_condp$fn__11386: java.lang.Object invoke()>/java.io.Writer.write/0	<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_condp$fn__11386: java.lang.Object invoke()>/java.io.Writer.write/1	<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_condp$fn__11386: java.lang.Object invoke()>/java.io.Writer.write/2	<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_meta: java.lang.Object invokeStatic(java.lang.Object)>/java.io.Writer.write/0	<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_meta: java.lang.Object invokeStatic(java.lang.Object)>/java.io.Writer.write/1	<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_ns_reference: java.lang.Object invokeStatic(java.lang.Object)>/java.io.Writer.write/0	<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_sequential: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_sequential: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>/java.io.Writer.write/1	<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_sequential: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>/java.io.Writer.write/2	<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_sequential: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>/java.io.Writer.write/3	<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_sequential: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>/java.io.Writer.write/4	<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_sequential: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>/java.io.Writer.write/5	<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_ctor: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_ctor: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object)>/java.io.Writer.write/1	<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_ctor: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object)>/java.io.Writer.write/2	<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_ctor: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object)>/java.io.Writer.write/3	<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_let: java.lang.Object invokeStatic(java.lang.Object)>/java.io.Writer.write/0	<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_vector$fn__11158: java.lang.Object invoke()>/java.io.Writer.write/0	<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_vector$fn__11158: java.lang.Object invoke()>/java.io.Writer.write/1	<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$fn__10219: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_defn: java.lang.Object invokeStatic(java.lang.Object)>/java.io.Writer.write/0	<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_cond: java.lang.Object invokeStatic(java.lang.Object)>/java.io.Writer.write/0	<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/0	<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/2	<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/5	<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/7	<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/8	<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/9	<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/10	<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/11	<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/12	<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/13	<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/18	<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/23	<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/24	<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/28	<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/29	<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/30	<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/31	<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/32	<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/33	<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/35	<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/36	<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/37	<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/39	<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/41	<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/42	<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/43	<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/44	<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/45	<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$write_tokens: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$write_tokens: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object)>/java.io.Writer.write/1	<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$write_tokens: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object)>/java.io.Writer.write/2	<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_reader_macro: java.lang.Object invokeStatic(java.lang.Object)>/java.io.Writer.write/0	<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7381: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7381: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/1	<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7381: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/2	<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7381: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/3	<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_binding_form$fn__11351: java.lang.Object invoke()>/java.io.Writer.write/0	<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_binding_form$fn__11351: java.lang.Object invoke()>/java.io.Writer.write/1	<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_binding_form$fn__11351: java.lang.Object invoke()>/java.io.Writer.write/2	<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_vector: java.lang.Object invokeStatic(java.lang.Object)>/java.io.Writer.write/0	<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7383: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7383: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/1	<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7383: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/2	<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7383: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/3	<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_binding_form: java.lang.Object invokeStatic(java.lang.Object)>/java.io.Writer.write/0	<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7511: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7511: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/1	<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.instant$print_calendar: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.instant$print_calendar: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/2	<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.instant$print_calendar: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/4	<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7507: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7584: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7584: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/1	<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String,int,int)>	<<immutable-context>>	<clojure.instant$print_calendar: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/1	<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String,int,int)>	<<immutable-context>>	<clojure.instant$print_calendar: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/3	<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(int)>	<<immutable-context>>	<clojure.pprint$p_write_char: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(int)>	<<immutable-context>>	<clojure.pprint$c_write_char: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String,int,int)>	<<immutable-context>>	<clojure.instant$print_calendar: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/1	<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String,int,int)>	<<immutable-context>>	<clojure.instant$print_calendar: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/3	<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_simple_list$fn__11152: java.lang.Object invoke()>/java.io.Writer.write/0	<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_simple_list$fn__11152: java.lang.Object invoke()>/java.io.Writer.write/1	<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7515: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7515: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/1	<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7515: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/2	<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7478: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7478: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/1	<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$write_white_space: java.lang.Object invokeStatic(java.lang.Object)>/java.io.Writer.write/0	<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7403: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7366: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_condp: java.lang.Object invokeStatic(java.lang.Object)>/java.io.Writer.write/0	<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_ns_reference$fn__11215: java.lang.Object invoke()>/java.io.Writer.write/0	<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7509: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7509: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/1	<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7509: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/2	<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7509: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/3	<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7509: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/4	<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7509: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/5	<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7509: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/6	<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7509: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/7	<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7417: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7417: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/1	<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7417: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/2	<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7417: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/3	<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7393: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_meta: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_meta: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/1	<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7480: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7480: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/1	<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_simple_list: java.lang.Object invokeStatic(java.lang.Object)>/java.io.Writer.write/0	<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_map: java.lang.Object invokeStatic(java.lang.Object)>/java.io.Writer.write/0	<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7468: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7468: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/1	<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7468: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/2	<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7468: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/3	<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7379: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7532: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7532: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/1	<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_set$fn__11181: java.lang.Object invoke()>/java.io.Writer.write/0	<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_set$fn__11181: java.lang.Object invoke()>/java.io.Writer.write/1	<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_map$fn__11173: java.lang.Object invoke()>/java.io.Writer.write/0	<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_map$fn__11173: java.lang.Object invoke()>/java.io.Writer.write/1	<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_map$fn__11173: java.lang.Object invoke()>/java.io.Writer.write/2	<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$fn__10207: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$fn__10216: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$emit_nl: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$emit_nl: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/1	<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$emit_nl: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/2	<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_simple_code_list: java.lang.Object invokeStatic(java.lang.Object)>/java.io.Writer.write/0	<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_cond$fn__11379: java.lang.Object invoke()>/java.io.Writer.write/0	<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_cond$fn__11379: java.lang.Object invoke()>/java.io.Writer.write/1	<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_cond$fn__11379: java.lang.Object invoke()>/java.io.Writer.write/2	<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_cond$fn__11379: java.lang.Object invoke()>/java.io.Writer.write/3	<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.instant$print_date: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.instant$print_date: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/1	<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.instant$print_date: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/2	<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7484: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_simple_code_list$fn__11408: java.lang.Object invoke()>/java.io.Writer.write/0	<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_simple_code_list$fn__11408: java.lang.Object invoke()>/java.io.Writer.write/1	<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.instant$print_timestamp: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.instant$print_timestamp: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/1	<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.instant$print_timestamp: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/2	<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.instant$print_timestamp: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/3	<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7375: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7582: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7582: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/1	<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7419: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7419: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/1	<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.uuid$fn__8526: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_set: java.lang.Object invokeStatic(java.lang.Object)>/java.io.Writer.write/0	<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_throwable$print_via__7561: java.lang.Object invoke(java.lang.Object)>/java.io.Writer.write/0	<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_throwable$print_via__7561: java.lang.Object invoke(java.lang.Object)>/java.io.Writer.write/1	<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_throwable$print_via__7561: java.lang.Object invoke(java.lang.Object)>/java.io.Writer.write/2	<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_throwable$print_via__7561: java.lang.Object invoke(java.lang.Object)>/java.io.Writer.write/3	<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_throwable$print_via__7561: java.lang.Object invoke(java.lang.Object)>/java.io.Writer.write/4	<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_ns: java.lang.Object invokeStatic(java.lang.Object)>/java.io.Writer.write/0	<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_simple: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_ideref: java.lang.Object invokeStatic(java.lang.Object)>/java.io.Writer.write/0	<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_throwable: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_throwable: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/1	<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_throwable: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/2	<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_throwable: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/3	<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_throwable: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/4	<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_throwable: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/5	<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_throwable: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/6	<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_throwable: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/7	<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_throwable: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/8	<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_throwable: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/9	<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_throwable: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/10	<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7513: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7513: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/1	<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_tagged_object: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_tagged_object: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object)>/java.io.Writer.write/1	<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_tagged_object: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object)>/java.io.Writer.write/2	<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_tagged_object: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object)>/java.io.Writer.write/3	<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_tagged_object: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object)>/java.io.Writer.write/4	<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_condp$fn__11386: java.lang.Object invoke()>/java.io.Writer.write/0	<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_condp$fn__11386: java.lang.Object invoke()>/java.io.Writer.write/1	<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_condp$fn__11386: java.lang.Object invoke()>/java.io.Writer.write/2	<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_meta: java.lang.Object invokeStatic(java.lang.Object)>/java.io.Writer.write/0	<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_meta: java.lang.Object invokeStatic(java.lang.Object)>/java.io.Writer.write/1	<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_ns_reference: java.lang.Object invokeStatic(java.lang.Object)>/java.io.Writer.write/0	<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_sequential: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_sequential: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>/java.io.Writer.write/1	<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_sequential: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>/java.io.Writer.write/2	<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_sequential: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>/java.io.Writer.write/3	<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_sequential: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>/java.io.Writer.write/4	<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_sequential: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>/java.io.Writer.write/5	<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_ctor: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_ctor: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object)>/java.io.Writer.write/1	<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_ctor: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object)>/java.io.Writer.write/2	<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_ctor: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object)>/java.io.Writer.write/3	<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_let: java.lang.Object invokeStatic(java.lang.Object)>/java.io.Writer.write/0	<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_vector$fn__11158: java.lang.Object invoke()>/java.io.Writer.write/0	<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_vector$fn__11158: java.lang.Object invoke()>/java.io.Writer.write/1	<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$fn__10219: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_defn: java.lang.Object invokeStatic(java.lang.Object)>/java.io.Writer.write/0	<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_cond: java.lang.Object invokeStatic(java.lang.Object)>/java.io.Writer.write/0	<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$write_tokens: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$write_tokens: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object)>/java.io.Writer.write/1	<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$write_tokens: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object)>/java.io.Writer.write/2	<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_reader_macro: java.lang.Object invokeStatic(java.lang.Object)>/java.io.Writer.write/0	<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7381: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7381: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/1	<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7381: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/2	<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7381: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/3	<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_binding_form$fn__11351: java.lang.Object invoke()>/java.io.Writer.write/0	<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_binding_form$fn__11351: java.lang.Object invoke()>/java.io.Writer.write/1	<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_binding_form$fn__11351: java.lang.Object invoke()>/java.io.Writer.write/2	<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_vector: java.lang.Object invokeStatic(java.lang.Object)>/java.io.Writer.write/0	<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7383: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7383: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/1	<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7383: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/2	<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7383: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/3	<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_binding_form: java.lang.Object invokeStatic(java.lang.Object)>/java.io.Writer.write/0	<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7511: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7511: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/1	<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.instant$print_calendar: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.instant$print_calendar: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/2	<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.instant$print_calendar: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/4	<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7507: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7584: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7584: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/1	<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>	<java.io.FileOutputStream: void write(byte[])>	<<immutable-context>>	<clojure.lang.Compiler: void writeClassFile(java.lang.String,byte[])>/java.io.FileOutputStream.write/0	<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(int)>	<<immutable-context>>	<clojure.core.proxy$java.io.Writer$ff19274a: void write(int)>/java.io.Writer.write/0	<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(int)>	<<immutable-context>>	<clojure.pprint.proxy$java.io.Writer$IDeref$e595a7c1: void write(int)>/java.io.Writer.write/0	<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(int)>	<<immutable-context>>	<clojure.pprint.proxy$java.io.Writer$ff19274a: void write(int)>/java.io.Writer.write/0	<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(int)>	<<immutable-context>>	<clojure.pprint$p_write_char: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(int)>	<<immutable-context>>	<clojure.pprint$c_write_char: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(int)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/1	<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(int)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/3	<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(int)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/4	<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(int)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/6	<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(int)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/14	<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(int)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/15	<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(int)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/16	<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(int)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/17	<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(int)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/19	<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(int)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/20	<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(int)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/21	<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(int)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/22	<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(int)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/25	<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(int)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/26	<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(int)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/27	<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(int)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/34	<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(int)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/38	<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(int)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/40	<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(int)>	<<immutable-context>>	<clojure.lang.RT: void printInnerSeq(clojure.lang.ISeq,java.io.Writer)>/java.io.Writer.write/0	<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint.proxy$java.io.Writer$IDeref$e595a7c1: void write(java.lang.String)>/java.io.Writer.write/0	<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_simple_list$fn__11152: java.lang.Object invoke()>/java.io.Writer.write/0	<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_simple_list$fn__11152: java.lang.Object invoke()>/java.io.Writer.write/1	<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7515: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7515: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/1	<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7515: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/2	<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7478: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7478: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/1	<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$write_white_space: java.lang.Object invokeStatic(java.lang.Object)>/java.io.Writer.write/0	<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7403: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7366: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_condp: java.lang.Object invokeStatic(java.lang.Object)>/java.io.Writer.write/0	<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_ns_reference$fn__11215: java.lang.Object invoke()>/java.io.Writer.write/0	<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7509: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7509: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/1	<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7509: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/2	<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7509: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/3	<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7509: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/4	<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7509: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/5	<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7509: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/6	<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7509: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/7	<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7417: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7417: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/1	<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7417: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/2	<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7417: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/3	<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7393: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_meta: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_meta: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/1	<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7480: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7480: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/1	<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_simple_list: java.lang.Object invokeStatic(java.lang.Object)>/java.io.Writer.write/0	<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_map: java.lang.Object invokeStatic(java.lang.Object)>/java.io.Writer.write/0	<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7468: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7468: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/1	<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7468: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/2	<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7468: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/3	<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7379: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7532: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7532: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/1	<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_set$fn__11181: java.lang.Object invoke()>/java.io.Writer.write/0	<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_set$fn__11181: java.lang.Object invoke()>/java.io.Writer.write/1	<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_map$fn__11173: java.lang.Object invoke()>/java.io.Writer.write/0	<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_map$fn__11173: java.lang.Object invoke()>/java.io.Writer.write/1	<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_map$fn__11173: java.lang.Object invoke()>/java.io.Writer.write/2	<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$fn__10207: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$fn__10216: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$emit_nl: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$emit_nl: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/1	<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$emit_nl: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/2	<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_simple_code_list: java.lang.Object invokeStatic(java.lang.Object)>/java.io.Writer.write/0	<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_cond$fn__11379: java.lang.Object invoke()>/java.io.Writer.write/0	<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_cond$fn__11379: java.lang.Object invoke()>/java.io.Writer.write/1	<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_cond$fn__11379: java.lang.Object invoke()>/java.io.Writer.write/2	<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_cond$fn__11379: java.lang.Object invoke()>/java.io.Writer.write/3	<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.instant$print_date: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.instant$print_date: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/1	<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.instant$print_date: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/2	<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7484: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_simple_code_list$fn__11408: java.lang.Object invoke()>/java.io.Writer.write/0	<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_simple_code_list$fn__11408: java.lang.Object invoke()>/java.io.Writer.write/1	<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.instant$print_timestamp: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.instant$print_timestamp: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/1	<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.instant$print_timestamp: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/2	<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.instant$print_timestamp: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/3	<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7375: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7582: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7582: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/1	<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7419: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7419: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/1	<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.uuid$fn__8526: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_set: java.lang.Object invokeStatic(java.lang.Object)>/java.io.Writer.write/0	<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_ns: java.lang.Object invokeStatic(java.lang.Object)>/java.io.Writer.write/0	<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_simple: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_ideref: java.lang.Object invokeStatic(java.lang.Object)>/java.io.Writer.write/0	<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_throwable: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_throwable: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/1	<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_throwable: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/2	<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_throwable: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/3	<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_throwable: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/4	<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_throwable: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/5	<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_throwable: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/6	<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_throwable: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/7	<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_throwable: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/8	<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_throwable: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/9	<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_throwable: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/10	<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7513: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7513: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/1	<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_tagged_object: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_tagged_object: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object)>/java.io.Writer.write/1	<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_tagged_object: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object)>/java.io.Writer.write/2	<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_tagged_object: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object)>/java.io.Writer.write/3	<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_tagged_object: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object)>/java.io.Writer.write/4	<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_condp$fn__11386: java.lang.Object invoke()>/java.io.Writer.write/0	<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_condp$fn__11386: java.lang.Object invoke()>/java.io.Writer.write/1	<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_condp$fn__11386: java.lang.Object invoke()>/java.io.Writer.write/2	<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_meta: java.lang.Object invokeStatic(java.lang.Object)>/java.io.Writer.write/0	<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_meta: java.lang.Object invokeStatic(java.lang.Object)>/java.io.Writer.write/1	<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_ns_reference: java.lang.Object invokeStatic(java.lang.Object)>/java.io.Writer.write/0	<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_sequential: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_sequential: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>/java.io.Writer.write/1	<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_sequential: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>/java.io.Writer.write/2	<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_sequential: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>/java.io.Writer.write/3	<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_sequential: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>/java.io.Writer.write/4	<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_sequential: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>/java.io.Writer.write/5	<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_ctor: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_ctor: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object)>/java.io.Writer.write/1	<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_ctor: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object)>/java.io.Writer.write/2	<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_ctor: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object)>/java.io.Writer.write/3	<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_let: java.lang.Object invokeStatic(java.lang.Object)>/java.io.Writer.write/0	<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_vector$fn__11158: java.lang.Object invoke()>/java.io.Writer.write/0	<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_vector$fn__11158: java.lang.Object invoke()>/java.io.Writer.write/1	<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$fn__10219: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_defn: java.lang.Object invokeStatic(java.lang.Object)>/java.io.Writer.write/0	<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_cond: java.lang.Object invokeStatic(java.lang.Object)>/java.io.Writer.write/0	<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/0	<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/2	<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/5	<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/7	<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/8	<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/9	<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/10	<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/11	<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/12	<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/13	<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/18	<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/23	<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/24	<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/28	<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/29	<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/30	<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/31	<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/32	<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/33	<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/35	<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/36	<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/37	<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/39	<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/41	<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/42	<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/43	<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/44	<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/45	<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$write_tokens: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$write_tokens: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object)>/java.io.Writer.write/1	<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$write_tokens: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object)>/java.io.Writer.write/2	<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_reader_macro: java.lang.Object invokeStatic(java.lang.Object)>/java.io.Writer.write/0	<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7381: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7381: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/1	<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7381: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/2	<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7381: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/3	<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_binding_form$fn__11351: java.lang.Object invoke()>/java.io.Writer.write/0	<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_binding_form$fn__11351: java.lang.Object invoke()>/java.io.Writer.write/1	<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_binding_form$fn__11351: java.lang.Object invoke()>/java.io.Writer.write/2	<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_vector: java.lang.Object invokeStatic(java.lang.Object)>/java.io.Writer.write/0	<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7383: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7383: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/1	<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7383: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/2	<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7383: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/3	<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_binding_form: java.lang.Object invokeStatic(java.lang.Object)>/java.io.Writer.write/0	<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7511: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7511: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/1	<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.instant$print_calendar: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.instant$print_calendar: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/2	<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.instant$print_calendar: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/4	<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7507: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7584: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7584: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/1	<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String,int,int)>	<<immutable-context>>	<clojure.instant$print_calendar: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/1	<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String,int,int)>	<<immutable-context>>	<clojure.instant$print_calendar: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/3	<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(int)>	<<immutable-context>>	<clojure.pprint$p_write_char: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(int)>	<<immutable-context>>	<clojure.pprint$c_write_char: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String,int,int)>	<<immutable-context>>	<clojure.instant$print_calendar: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/1	<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String,int,int)>	<<immutable-context>>	<clojure.instant$print_calendar: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/3	<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_simple_list$fn__11152: java.lang.Object invoke()>/java.io.Writer.write/0	<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_simple_list$fn__11152: java.lang.Object invoke()>/java.io.Writer.write/1	<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7515: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7515: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/1	<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7515: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/2	<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7478: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7478: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/1	<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$write_white_space: java.lang.Object invokeStatic(java.lang.Object)>/java.io.Writer.write/0	<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7403: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7366: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_condp: java.lang.Object invokeStatic(java.lang.Object)>/java.io.Writer.write/0	<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_ns_reference$fn__11215: java.lang.Object invoke()>/java.io.Writer.write/0	<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7509: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7509: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/1	<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7509: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/2	<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7509: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/3	<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7509: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/4	<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7509: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/5	<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7509: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/6	<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7509: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/7	<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7417: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7417: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/1	<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7417: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/2	<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7417: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/3	<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7393: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_meta: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_meta: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/1	<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7480: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7480: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/1	<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_simple_list: java.lang.Object invokeStatic(java.lang.Object)>/java.io.Writer.write/0	<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_map: java.lang.Object invokeStatic(java.lang.Object)>/java.io.Writer.write/0	<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7468: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7468: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/1	<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7468: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/2	<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7468: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/3	<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7379: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7532: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7532: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/1	<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_set$fn__11181: java.lang.Object invoke()>/java.io.Writer.write/0	<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_set$fn__11181: java.lang.Object invoke()>/java.io.Writer.write/1	<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_map$fn__11173: java.lang.Object invoke()>/java.io.Writer.write/0	<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_map$fn__11173: java.lang.Object invoke()>/java.io.Writer.write/1	<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_map$fn__11173: java.lang.Object invoke()>/java.io.Writer.write/2	<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$fn__10207: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$fn__10216: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$emit_nl: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$emit_nl: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/1	<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$emit_nl: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/2	<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_simple_code_list: java.lang.Object invokeStatic(java.lang.Object)>/java.io.Writer.write/0	<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_cond$fn__11379: java.lang.Object invoke()>/java.io.Writer.write/0	<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_cond$fn__11379: java.lang.Object invoke()>/java.io.Writer.write/1	<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_cond$fn__11379: java.lang.Object invoke()>/java.io.Writer.write/2	<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_cond$fn__11379: java.lang.Object invoke()>/java.io.Writer.write/3	<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.instant$print_date: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.instant$print_date: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/1	<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.instant$print_date: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/2	<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7484: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_simple_code_list$fn__11408: java.lang.Object invoke()>/java.io.Writer.write/0	<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_simple_code_list$fn__11408: java.lang.Object invoke()>/java.io.Writer.write/1	<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.instant$print_timestamp: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.instant$print_timestamp: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/1	<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.instant$print_timestamp: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/2	<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.instant$print_timestamp: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/3	<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7375: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7582: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7582: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/1	<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7419: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7419: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/1	<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.uuid$fn__8526: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_set: java.lang.Object invokeStatic(java.lang.Object)>/java.io.Writer.write/0	<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_ns: java.lang.Object invokeStatic(java.lang.Object)>/java.io.Writer.write/0	<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_simple: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_ideref: java.lang.Object invokeStatic(java.lang.Object)>/java.io.Writer.write/0	<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_throwable: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_throwable: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/1	<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_throwable: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/2	<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_throwable: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/3	<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_throwable: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/4	<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_throwable: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/5	<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_throwable: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/6	<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_throwable: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/7	<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_throwable: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/8	<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_throwable: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/9	<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_throwable: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/10	<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7513: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7513: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/1	<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_tagged_object: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_tagged_object: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object)>/java.io.Writer.write/1	<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_tagged_object: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object)>/java.io.Writer.write/2	<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_tagged_object: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object)>/java.io.Writer.write/3	<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_tagged_object: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object)>/java.io.Writer.write/4	<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_condp$fn__11386: java.lang.Object invoke()>/java.io.Writer.write/0	<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_condp$fn__11386: java.lang.Object invoke()>/java.io.Writer.write/1	<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_condp$fn__11386: java.lang.Object invoke()>/java.io.Writer.write/2	<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_meta: java.lang.Object invokeStatic(java.lang.Object)>/java.io.Writer.write/0	<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_meta: java.lang.Object invokeStatic(java.lang.Object)>/java.io.Writer.write/1	<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_ns_reference: java.lang.Object invokeStatic(java.lang.Object)>/java.io.Writer.write/0	<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_sequential: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_sequential: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>/java.io.Writer.write/1	<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_sequential: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>/java.io.Writer.write/2	<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_sequential: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>/java.io.Writer.write/3	<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_sequential: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>/java.io.Writer.write/4	<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_sequential: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>/java.io.Writer.write/5	<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_ctor: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_ctor: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object)>/java.io.Writer.write/1	<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_ctor: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object)>/java.io.Writer.write/2	<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_ctor: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object)>/java.io.Writer.write/3	<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_let: java.lang.Object invokeStatic(java.lang.Object)>/java.io.Writer.write/0	<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_vector$fn__11158: java.lang.Object invoke()>/java.io.Writer.write/0	<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_vector$fn__11158: java.lang.Object invoke()>/java.io.Writer.write/1	<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$fn__10219: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_defn: java.lang.Object invokeStatic(java.lang.Object)>/java.io.Writer.write/0	<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_cond: java.lang.Object invokeStatic(java.lang.Object)>/java.io.Writer.write/0	<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$write_tokens: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$write_tokens: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object)>/java.io.Writer.write/1	<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$write_tokens: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object)>/java.io.Writer.write/2	<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_reader_macro: java.lang.Object invokeStatic(java.lang.Object)>/java.io.Writer.write/0	<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7381: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7381: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/1	<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7381: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/2	<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7381: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/3	<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_binding_form$fn__11351: java.lang.Object invoke()>/java.io.Writer.write/0	<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_binding_form$fn__11351: java.lang.Object invoke()>/java.io.Writer.write/1	<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_binding_form$fn__11351: java.lang.Object invoke()>/java.io.Writer.write/2	<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_vector: java.lang.Object invokeStatic(java.lang.Object)>/java.io.Writer.write/0	<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7383: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7383: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/1	<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7383: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/2	<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7383: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/3	<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_binding_form: java.lang.Object invokeStatic(java.lang.Object)>/java.io.Writer.write/0	<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7511: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7511: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/1	<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.instant$print_calendar: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.instant$print_calendar: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/2	<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.instant$print_calendar: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/4	<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7507: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7584: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7584: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/1	<java.util.TreeSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.lang.ProcessBuilder: java.lang.Process start()>	<<immutable-context>>	<clojure.java.browse$browse_url$fn__11861: java.lang.Object invoke()>/java.lang.ProcessBuilder.start/0	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.FileOutputStream: void write(byte[])>	<<immutable-context>>	<clojure.lang.Compiler: void writeClassFile(java.lang.String,byte[])>/java.io.FileOutputStream.write/0	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(int)>	<<immutable-context>>	<clojure.core.proxy$java.io.Writer$ff19274a: void write(int)>/java.io.Writer.write/0	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(int)>	<<immutable-context>>	<clojure.pprint.proxy$java.io.Writer$IDeref$e595a7c1: void write(int)>/java.io.Writer.write/0	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(int)>	<<immutable-context>>	<clojure.pprint.proxy$java.io.Writer$ff19274a: void write(int)>/java.io.Writer.write/0	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(int)>	<<immutable-context>>	<clojure.pprint$p_write_char: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(int)>	<<immutable-context>>	<clojure.pprint$c_write_char: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(int)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/1	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(int)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/3	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(int)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/4	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(int)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/6	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(int)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/14	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(int)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/15	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(int)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/16	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(int)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/17	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(int)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/19	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(int)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/20	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(int)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/21	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(int)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/22	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(int)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/25	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(int)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/26	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(int)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/27	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(int)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/34	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(int)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/38	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(int)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/40	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(int)>	<<immutable-context>>	<clojure.lang.RT: void printInnerSeq(clojure.lang.ISeq,java.io.Writer)>/java.io.Writer.write/0	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint.proxy$java.io.Writer$IDeref$e595a7c1: void write(java.lang.String)>/java.io.Writer.write/0	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_simple_list$fn__11152: java.lang.Object invoke()>/java.io.Writer.write/0	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_simple_list$fn__11152: java.lang.Object invoke()>/java.io.Writer.write/1	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7515: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7515: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/1	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7515: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/2	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7478: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7478: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/1	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$write_white_space: java.lang.Object invokeStatic(java.lang.Object)>/java.io.Writer.write/0	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7403: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7366: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_condp: java.lang.Object invokeStatic(java.lang.Object)>/java.io.Writer.write/0	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_ns_reference$fn__11215: java.lang.Object invoke()>/java.io.Writer.write/0	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7509: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7509: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/1	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7509: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/2	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7509: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/3	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7509: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/4	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7509: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/5	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7509: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/6	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7509: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/7	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7417: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7417: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/1	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7417: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/2	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7417: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/3	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7393: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_meta: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_meta: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/1	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7480: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7480: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/1	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_simple_list: java.lang.Object invokeStatic(java.lang.Object)>/java.io.Writer.write/0	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_map: java.lang.Object invokeStatic(java.lang.Object)>/java.io.Writer.write/0	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7468: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7468: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/1	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7468: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/2	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7468: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/3	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7379: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7532: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7532: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/1	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_set$fn__11181: java.lang.Object invoke()>/java.io.Writer.write/0	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_set$fn__11181: java.lang.Object invoke()>/java.io.Writer.write/1	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_map$fn__11173: java.lang.Object invoke()>/java.io.Writer.write/0	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_map$fn__11173: java.lang.Object invoke()>/java.io.Writer.write/1	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_map$fn__11173: java.lang.Object invoke()>/java.io.Writer.write/2	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$fn__10207: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$fn__10216: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$emit_nl: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$emit_nl: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/1	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$emit_nl: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/2	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_simple_code_list: java.lang.Object invokeStatic(java.lang.Object)>/java.io.Writer.write/0	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_cond$fn__11379: java.lang.Object invoke()>/java.io.Writer.write/0	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_cond$fn__11379: java.lang.Object invoke()>/java.io.Writer.write/1	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_cond$fn__11379: java.lang.Object invoke()>/java.io.Writer.write/2	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_cond$fn__11379: java.lang.Object invoke()>/java.io.Writer.write/3	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.instant$print_date: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.instant$print_date: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/1	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.instant$print_date: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/2	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7484: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_simple_code_list$fn__11408: java.lang.Object invoke()>/java.io.Writer.write/0	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_simple_code_list$fn__11408: java.lang.Object invoke()>/java.io.Writer.write/1	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.instant$print_timestamp: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.instant$print_timestamp: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/1	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.instant$print_timestamp: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/2	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.instant$print_timestamp: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/3	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7375: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7582: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7582: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/1	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7419: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7419: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/1	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.uuid$fn__8526: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_set: java.lang.Object invokeStatic(java.lang.Object)>/java.io.Writer.write/0	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_throwable$print_via__7561: java.lang.Object invoke(java.lang.Object)>/java.io.Writer.write/0	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_throwable$print_via__7561: java.lang.Object invoke(java.lang.Object)>/java.io.Writer.write/1	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_throwable$print_via__7561: java.lang.Object invoke(java.lang.Object)>/java.io.Writer.write/2	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_throwable$print_via__7561: java.lang.Object invoke(java.lang.Object)>/java.io.Writer.write/3	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_throwable$print_via__7561: java.lang.Object invoke(java.lang.Object)>/java.io.Writer.write/4	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_ns: java.lang.Object invokeStatic(java.lang.Object)>/java.io.Writer.write/0	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_simple: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_ideref: java.lang.Object invokeStatic(java.lang.Object)>/java.io.Writer.write/0	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_throwable: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_throwable: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/1	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_throwable: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/2	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_throwable: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/3	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_throwable: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/4	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_throwable: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/5	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_throwable: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/6	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_throwable: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/7	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_throwable: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/8	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_throwable: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/9	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_throwable: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/10	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7513: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7513: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/1	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_tagged_object: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_tagged_object: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object)>/java.io.Writer.write/1	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_tagged_object: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object)>/java.io.Writer.write/2	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_tagged_object: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object)>/java.io.Writer.write/3	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_tagged_object: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object)>/java.io.Writer.write/4	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_condp$fn__11386: java.lang.Object invoke()>/java.io.Writer.write/0	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_condp$fn__11386: java.lang.Object invoke()>/java.io.Writer.write/1	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_condp$fn__11386: java.lang.Object invoke()>/java.io.Writer.write/2	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_meta: java.lang.Object invokeStatic(java.lang.Object)>/java.io.Writer.write/0	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_meta: java.lang.Object invokeStatic(java.lang.Object)>/java.io.Writer.write/1	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_ns_reference: java.lang.Object invokeStatic(java.lang.Object)>/java.io.Writer.write/0	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_sequential: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_sequential: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>/java.io.Writer.write/1	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_sequential: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>/java.io.Writer.write/2	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_sequential: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>/java.io.Writer.write/3	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_sequential: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>/java.io.Writer.write/4	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_sequential: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>/java.io.Writer.write/5	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_ctor: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_ctor: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object)>/java.io.Writer.write/1	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_ctor: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object)>/java.io.Writer.write/2	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_ctor: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object)>/java.io.Writer.write/3	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_let: java.lang.Object invokeStatic(java.lang.Object)>/java.io.Writer.write/0	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_vector$fn__11158: java.lang.Object invoke()>/java.io.Writer.write/0	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_vector$fn__11158: java.lang.Object invoke()>/java.io.Writer.write/1	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$fn__10219: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_defn: java.lang.Object invokeStatic(java.lang.Object)>/java.io.Writer.write/0	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_cond: java.lang.Object invokeStatic(java.lang.Object)>/java.io.Writer.write/0	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/0	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/2	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/5	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/7	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/8	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/9	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/10	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/11	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/12	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/13	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/18	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/23	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/24	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/28	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/29	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/30	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/31	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/32	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/33	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/35	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/36	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/37	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/39	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/41	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/42	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/43	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/44	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/45	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$write_tokens: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$write_tokens: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object)>/java.io.Writer.write/1	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$write_tokens: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object)>/java.io.Writer.write/2	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_reader_macro: java.lang.Object invokeStatic(java.lang.Object)>/java.io.Writer.write/0	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7381: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7381: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/1	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7381: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/2	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7381: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/3	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_binding_form$fn__11351: java.lang.Object invoke()>/java.io.Writer.write/0	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_binding_form$fn__11351: java.lang.Object invoke()>/java.io.Writer.write/1	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_binding_form$fn__11351: java.lang.Object invoke()>/java.io.Writer.write/2	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_vector: java.lang.Object invokeStatic(java.lang.Object)>/java.io.Writer.write/0	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7383: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7383: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/1	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7383: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/2	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7383: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/3	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_binding_form: java.lang.Object invokeStatic(java.lang.Object)>/java.io.Writer.write/0	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7511: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7511: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/1	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.instant$print_calendar: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.instant$print_calendar: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/2	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.instant$print_calendar: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/4	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7507: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7584: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7584: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/1	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String,int,int)>	<<immutable-context>>	<clojure.instant$print_calendar: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/1	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String,int,int)>	<<immutable-context>>	<clojure.instant$print_calendar: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/3	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(int)>	<<immutable-context>>	<clojure.pprint$p_write_char: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(int)>	<<immutable-context>>	<clojure.pprint$c_write_char: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String,int,int)>	<<immutable-context>>	<clojure.instant$print_calendar: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/1	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String,int,int)>	<<immutable-context>>	<clojure.instant$print_calendar: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/3	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_simple_list$fn__11152: java.lang.Object invoke()>/java.io.Writer.write/0	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_simple_list$fn__11152: java.lang.Object invoke()>/java.io.Writer.write/1	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7515: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7515: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/1	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7515: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/2	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7478: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7478: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/1	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$write_white_space: java.lang.Object invokeStatic(java.lang.Object)>/java.io.Writer.write/0	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7403: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7366: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_condp: java.lang.Object invokeStatic(java.lang.Object)>/java.io.Writer.write/0	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_ns_reference$fn__11215: java.lang.Object invoke()>/java.io.Writer.write/0	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7509: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7509: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/1	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7509: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/2	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7509: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/3	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7509: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/4	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7509: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/5	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7509: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/6	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7509: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/7	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7417: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7417: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/1	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7417: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/2	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7417: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/3	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7393: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_meta: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_meta: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/1	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7480: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7480: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/1	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_simple_list: java.lang.Object invokeStatic(java.lang.Object)>/java.io.Writer.write/0	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_map: java.lang.Object invokeStatic(java.lang.Object)>/java.io.Writer.write/0	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7468: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7468: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/1	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7468: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/2	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7468: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/3	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7379: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7532: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7532: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/1	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_set$fn__11181: java.lang.Object invoke()>/java.io.Writer.write/0	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_set$fn__11181: java.lang.Object invoke()>/java.io.Writer.write/1	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_map$fn__11173: java.lang.Object invoke()>/java.io.Writer.write/0	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_map$fn__11173: java.lang.Object invoke()>/java.io.Writer.write/1	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_map$fn__11173: java.lang.Object invoke()>/java.io.Writer.write/2	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$fn__10207: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$fn__10216: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$emit_nl: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$emit_nl: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/1	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$emit_nl: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/2	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_simple_code_list: java.lang.Object invokeStatic(java.lang.Object)>/java.io.Writer.write/0	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_cond$fn__11379: java.lang.Object invoke()>/java.io.Writer.write/0	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_cond$fn__11379: java.lang.Object invoke()>/java.io.Writer.write/1	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_cond$fn__11379: java.lang.Object invoke()>/java.io.Writer.write/2	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_cond$fn__11379: java.lang.Object invoke()>/java.io.Writer.write/3	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.instant$print_date: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.instant$print_date: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/1	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.instant$print_date: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/2	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7484: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_simple_code_list$fn__11408: java.lang.Object invoke()>/java.io.Writer.write/0	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_simple_code_list$fn__11408: java.lang.Object invoke()>/java.io.Writer.write/1	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.instant$print_timestamp: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.instant$print_timestamp: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/1	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.instant$print_timestamp: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/2	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.instant$print_timestamp: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/3	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7375: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7582: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7582: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/1	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7419: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7419: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/1	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.uuid$fn__8526: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_set: java.lang.Object invokeStatic(java.lang.Object)>/java.io.Writer.write/0	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_throwable$print_via__7561: java.lang.Object invoke(java.lang.Object)>/java.io.Writer.write/0	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_throwable$print_via__7561: java.lang.Object invoke(java.lang.Object)>/java.io.Writer.write/1	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_throwable$print_via__7561: java.lang.Object invoke(java.lang.Object)>/java.io.Writer.write/2	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_throwable$print_via__7561: java.lang.Object invoke(java.lang.Object)>/java.io.Writer.write/3	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_throwable$print_via__7561: java.lang.Object invoke(java.lang.Object)>/java.io.Writer.write/4	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_ns: java.lang.Object invokeStatic(java.lang.Object)>/java.io.Writer.write/0	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_simple: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_ideref: java.lang.Object invokeStatic(java.lang.Object)>/java.io.Writer.write/0	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_throwable: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_throwable: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/1	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_throwable: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/2	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_throwable: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/3	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_throwable: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/4	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_throwable: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/5	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_throwable: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/6	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_throwable: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/7	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_throwable: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/8	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_throwable: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/9	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_throwable: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/10	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7513: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7513: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/1	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_tagged_object: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_tagged_object: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object)>/java.io.Writer.write/1	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_tagged_object: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object)>/java.io.Writer.write/2	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_tagged_object: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object)>/java.io.Writer.write/3	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_tagged_object: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object)>/java.io.Writer.write/4	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_condp$fn__11386: java.lang.Object invoke()>/java.io.Writer.write/0	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_condp$fn__11386: java.lang.Object invoke()>/java.io.Writer.write/1	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_condp$fn__11386: java.lang.Object invoke()>/java.io.Writer.write/2	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_meta: java.lang.Object invokeStatic(java.lang.Object)>/java.io.Writer.write/0	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_meta: java.lang.Object invokeStatic(java.lang.Object)>/java.io.Writer.write/1	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_ns_reference: java.lang.Object invokeStatic(java.lang.Object)>/java.io.Writer.write/0	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_sequential: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_sequential: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>/java.io.Writer.write/1	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_sequential: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>/java.io.Writer.write/2	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_sequential: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>/java.io.Writer.write/3	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_sequential: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>/java.io.Writer.write/4	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_sequential: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>/java.io.Writer.write/5	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_ctor: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_ctor: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object)>/java.io.Writer.write/1	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_ctor: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object)>/java.io.Writer.write/2	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_ctor: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object)>/java.io.Writer.write/3	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_let: java.lang.Object invokeStatic(java.lang.Object)>/java.io.Writer.write/0	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_vector$fn__11158: java.lang.Object invoke()>/java.io.Writer.write/0	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_vector$fn__11158: java.lang.Object invoke()>/java.io.Writer.write/1	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$fn__10219: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_defn: java.lang.Object invokeStatic(java.lang.Object)>/java.io.Writer.write/0	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_cond: java.lang.Object invokeStatic(java.lang.Object)>/java.io.Writer.write/0	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$write_tokens: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$write_tokens: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object)>/java.io.Writer.write/1	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$write_tokens: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object)>/java.io.Writer.write/2	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_reader_macro: java.lang.Object invokeStatic(java.lang.Object)>/java.io.Writer.write/0	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7381: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7381: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/1	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7381: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/2	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7381: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/3	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_binding_form$fn__11351: java.lang.Object invoke()>/java.io.Writer.write/0	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_binding_form$fn__11351: java.lang.Object invoke()>/java.io.Writer.write/1	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_binding_form$fn__11351: java.lang.Object invoke()>/java.io.Writer.write/2	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_vector: java.lang.Object invokeStatic(java.lang.Object)>/java.io.Writer.write/0	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7383: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7383: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/1	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7383: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/2	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7383: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/3	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_binding_form: java.lang.Object invokeStatic(java.lang.Object)>/java.io.Writer.write/0	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7511: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7511: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/1	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.instant$print_calendar: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.instant$print_calendar: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/2	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.instant$print_calendar: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/4	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7507: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7584: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7584: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/1	<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.lang.ProcessBuilder: java.lang.Process start()>	<<immutable-context>>	<clojure.java.browse$browse_url$fn__11861: java.lang.Object invoke()>/java.lang.ProcessBuilder.start/0	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.FileOutputStream: void write(byte[])>	<<immutable-context>>	<clojure.lang.Compiler: void writeClassFile(java.lang.String,byte[])>/java.io.FileOutputStream.write/0	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(int)>	<<immutable-context>>	<clojure.core.proxy$java.io.Writer$ff19274a: void write(int)>/java.io.Writer.write/0	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(int)>	<<immutable-context>>	<clojure.pprint.proxy$java.io.Writer$IDeref$e595a7c1: void write(int)>/java.io.Writer.write/0	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(int)>	<<immutable-context>>	<clojure.pprint.proxy$java.io.Writer$ff19274a: void write(int)>/java.io.Writer.write/0	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(int)>	<<immutable-context>>	<clojure.pprint$p_write_char: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(int)>	<<immutable-context>>	<clojure.pprint$c_write_char: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(int)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/1	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(int)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/3	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(int)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/4	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(int)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/6	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(int)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/14	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(int)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/15	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(int)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/16	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(int)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/17	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(int)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/19	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(int)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/20	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(int)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/21	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(int)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/22	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(int)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/25	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(int)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/26	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(int)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/27	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(int)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/34	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(int)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/38	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(int)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/40	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(int)>	<<immutable-context>>	<clojure.lang.RT: void printInnerSeq(clojure.lang.ISeq,java.io.Writer)>/java.io.Writer.write/0	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint.proxy$java.io.Writer$IDeref$e595a7c1: void write(java.lang.String)>/java.io.Writer.write/0	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_simple_list$fn__11152: java.lang.Object invoke()>/java.io.Writer.write/0	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_simple_list$fn__11152: java.lang.Object invoke()>/java.io.Writer.write/1	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7515: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7515: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/1	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7515: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/2	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7478: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7478: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/1	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$write_white_space: java.lang.Object invokeStatic(java.lang.Object)>/java.io.Writer.write/0	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7403: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7366: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_condp: java.lang.Object invokeStatic(java.lang.Object)>/java.io.Writer.write/0	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_ns_reference$fn__11215: java.lang.Object invoke()>/java.io.Writer.write/0	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7509: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7509: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/1	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7509: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/2	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7509: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/3	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7509: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/4	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7509: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/5	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7509: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/6	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7509: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/7	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7417: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7417: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/1	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7417: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/2	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7417: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/3	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7393: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_meta: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_meta: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/1	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7480: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7480: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/1	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_simple_list: java.lang.Object invokeStatic(java.lang.Object)>/java.io.Writer.write/0	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_map: java.lang.Object invokeStatic(java.lang.Object)>/java.io.Writer.write/0	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7468: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7468: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/1	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7468: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/2	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7468: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/3	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7379: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7532: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7532: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/1	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_set$fn__11181: java.lang.Object invoke()>/java.io.Writer.write/0	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_set$fn__11181: java.lang.Object invoke()>/java.io.Writer.write/1	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_map$fn__11173: java.lang.Object invoke()>/java.io.Writer.write/0	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_map$fn__11173: java.lang.Object invoke()>/java.io.Writer.write/1	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_map$fn__11173: java.lang.Object invoke()>/java.io.Writer.write/2	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$fn__10207: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$fn__10216: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$emit_nl: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$emit_nl: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/1	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$emit_nl: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/2	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_simple_code_list: java.lang.Object invokeStatic(java.lang.Object)>/java.io.Writer.write/0	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_cond$fn__11379: java.lang.Object invoke()>/java.io.Writer.write/0	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_cond$fn__11379: java.lang.Object invoke()>/java.io.Writer.write/1	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_cond$fn__11379: java.lang.Object invoke()>/java.io.Writer.write/2	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_cond$fn__11379: java.lang.Object invoke()>/java.io.Writer.write/3	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.instant$print_date: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.instant$print_date: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/1	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.instant$print_date: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/2	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7484: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_simple_code_list$fn__11408: java.lang.Object invoke()>/java.io.Writer.write/0	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_simple_code_list$fn__11408: java.lang.Object invoke()>/java.io.Writer.write/1	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.instant$print_timestamp: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.instant$print_timestamp: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/1	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.instant$print_timestamp: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/2	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.instant$print_timestamp: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/3	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7375: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7582: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7582: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/1	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7419: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7419: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/1	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.uuid$fn__8526: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_set: java.lang.Object invokeStatic(java.lang.Object)>/java.io.Writer.write/0	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_throwable$print_via__7561: java.lang.Object invoke(java.lang.Object)>/java.io.Writer.write/0	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_throwable$print_via__7561: java.lang.Object invoke(java.lang.Object)>/java.io.Writer.write/1	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_throwable$print_via__7561: java.lang.Object invoke(java.lang.Object)>/java.io.Writer.write/2	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_throwable$print_via__7561: java.lang.Object invoke(java.lang.Object)>/java.io.Writer.write/3	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_throwable$print_via__7561: java.lang.Object invoke(java.lang.Object)>/java.io.Writer.write/4	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_ns: java.lang.Object invokeStatic(java.lang.Object)>/java.io.Writer.write/0	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_simple: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_ideref: java.lang.Object invokeStatic(java.lang.Object)>/java.io.Writer.write/0	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_throwable: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_throwable: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/1	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_throwable: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/2	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_throwable: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/3	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_throwable: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/4	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_throwable: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/5	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_throwable: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/6	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_throwable: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/7	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_throwable: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/8	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_throwable: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/9	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_throwable: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/10	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7513: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7513: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/1	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_tagged_object: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_tagged_object: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object)>/java.io.Writer.write/1	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_tagged_object: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object)>/java.io.Writer.write/2	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_tagged_object: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object)>/java.io.Writer.write/3	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_tagged_object: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object)>/java.io.Writer.write/4	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_condp$fn__11386: java.lang.Object invoke()>/java.io.Writer.write/0	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_condp$fn__11386: java.lang.Object invoke()>/java.io.Writer.write/1	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_condp$fn__11386: java.lang.Object invoke()>/java.io.Writer.write/2	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_meta: java.lang.Object invokeStatic(java.lang.Object)>/java.io.Writer.write/0	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_meta: java.lang.Object invokeStatic(java.lang.Object)>/java.io.Writer.write/1	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_ns_reference: java.lang.Object invokeStatic(java.lang.Object)>/java.io.Writer.write/0	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_sequential: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_sequential: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>/java.io.Writer.write/1	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_sequential: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>/java.io.Writer.write/2	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_sequential: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>/java.io.Writer.write/3	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_sequential: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>/java.io.Writer.write/4	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_sequential: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>/java.io.Writer.write/5	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_ctor: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_ctor: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object)>/java.io.Writer.write/1	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_ctor: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object)>/java.io.Writer.write/2	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_ctor: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object)>/java.io.Writer.write/3	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_let: java.lang.Object invokeStatic(java.lang.Object)>/java.io.Writer.write/0	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_vector$fn__11158: java.lang.Object invoke()>/java.io.Writer.write/0	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_vector$fn__11158: java.lang.Object invoke()>/java.io.Writer.write/1	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$fn__10219: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_defn: java.lang.Object invokeStatic(java.lang.Object)>/java.io.Writer.write/0	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_cond: java.lang.Object invokeStatic(java.lang.Object)>/java.io.Writer.write/0	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/0	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/2	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/5	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/7	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/8	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/9	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/10	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/11	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/12	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/13	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/18	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/23	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/24	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/28	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/29	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/30	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/31	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/32	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/33	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/35	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/36	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/37	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/39	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/41	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/42	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/43	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/44	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>/java.io.Writer.write/45	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$write_tokens: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$write_tokens: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object)>/java.io.Writer.write/1	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$write_tokens: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object)>/java.io.Writer.write/2	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_reader_macro: java.lang.Object invokeStatic(java.lang.Object)>/java.io.Writer.write/0	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7381: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7381: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/1	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7381: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/2	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7381: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/3	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_binding_form$fn__11351: java.lang.Object invoke()>/java.io.Writer.write/0	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_binding_form$fn__11351: java.lang.Object invoke()>/java.io.Writer.write/1	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_binding_form$fn__11351: java.lang.Object invoke()>/java.io.Writer.write/2	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_vector: java.lang.Object invokeStatic(java.lang.Object)>/java.io.Writer.write/0	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7383: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7383: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/1	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7383: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/2	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7383: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/3	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_binding_form: java.lang.Object invokeStatic(java.lang.Object)>/java.io.Writer.write/0	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7511: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7511: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/1	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.instant$print_calendar: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.instant$print_calendar: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/2	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.instant$print_calendar: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/4	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7507: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7584: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7584: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/1	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String,int,int)>	<<immutable-context>>	<clojure.instant$print_calendar: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/1	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.Writer: void write(java.lang.String,int,int)>	<<immutable-context>>	<clojure.instant$print_calendar: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/3	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(int)>	<<immutable-context>>	<clojure.pprint$p_write_char: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(int)>	<<immutable-context>>	<clojure.pprint$c_write_char: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String,int,int)>	<<immutable-context>>	<clojure.instant$print_calendar: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/1	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String,int,int)>	<<immutable-context>>	<clojure.instant$print_calendar: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/3	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_simple_list$fn__11152: java.lang.Object invoke()>/java.io.Writer.write/0	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_simple_list$fn__11152: java.lang.Object invoke()>/java.io.Writer.write/1	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7515: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7515: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/1	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7515: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/2	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7478: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7478: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/1	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$write_white_space: java.lang.Object invokeStatic(java.lang.Object)>/java.io.Writer.write/0	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7403: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7366: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_condp: java.lang.Object invokeStatic(java.lang.Object)>/java.io.Writer.write/0	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_ns_reference$fn__11215: java.lang.Object invoke()>/java.io.Writer.write/0	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7509: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7509: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/1	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7509: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/2	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7509: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/3	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7509: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/4	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7509: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/5	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7509: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/6	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7509: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/7	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7417: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7417: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/1	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7417: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/2	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7417: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/3	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7393: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_meta: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_meta: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/1	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7480: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7480: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/1	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_simple_list: java.lang.Object invokeStatic(java.lang.Object)>/java.io.Writer.write/0	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_map: java.lang.Object invokeStatic(java.lang.Object)>/java.io.Writer.write/0	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7468: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7468: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/1	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7468: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/2	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7468: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/3	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7379: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7532: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7532: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/1	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_set$fn__11181: java.lang.Object invoke()>/java.io.Writer.write/0	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_set$fn__11181: java.lang.Object invoke()>/java.io.Writer.write/1	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_map$fn__11173: java.lang.Object invoke()>/java.io.Writer.write/0	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_map$fn__11173: java.lang.Object invoke()>/java.io.Writer.write/1	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_map$fn__11173: java.lang.Object invoke()>/java.io.Writer.write/2	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$fn__10207: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$fn__10216: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$emit_nl: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$emit_nl: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/1	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$emit_nl: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/2	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_simple_code_list: java.lang.Object invokeStatic(java.lang.Object)>/java.io.Writer.write/0	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_cond$fn__11379: java.lang.Object invoke()>/java.io.Writer.write/0	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_cond$fn__11379: java.lang.Object invoke()>/java.io.Writer.write/1	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_cond$fn__11379: java.lang.Object invoke()>/java.io.Writer.write/2	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_cond$fn__11379: java.lang.Object invoke()>/java.io.Writer.write/3	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.instant$print_date: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.instant$print_date: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/1	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.instant$print_date: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/2	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7484: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_simple_code_list$fn__11408: java.lang.Object invoke()>/java.io.Writer.write/0	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_simple_code_list$fn__11408: java.lang.Object invoke()>/java.io.Writer.write/1	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.instant$print_timestamp: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.instant$print_timestamp: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/1	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.instant$print_timestamp: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/2	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.instant$print_timestamp: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/3	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7375: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7582: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7582: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/1	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7419: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7419: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/1	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.uuid$fn__8526: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_set: java.lang.Object invokeStatic(java.lang.Object)>/java.io.Writer.write/0	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_throwable$print_via__7561: java.lang.Object invoke(java.lang.Object)>/java.io.Writer.write/0	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_throwable$print_via__7561: java.lang.Object invoke(java.lang.Object)>/java.io.Writer.write/1	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_throwable$print_via__7561: java.lang.Object invoke(java.lang.Object)>/java.io.Writer.write/2	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_throwable$print_via__7561: java.lang.Object invoke(java.lang.Object)>/java.io.Writer.write/3	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_throwable$print_via__7561: java.lang.Object invoke(java.lang.Object)>/java.io.Writer.write/4	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_ns: java.lang.Object invokeStatic(java.lang.Object)>/java.io.Writer.write/0	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_simple: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_ideref: java.lang.Object invokeStatic(java.lang.Object)>/java.io.Writer.write/0	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_throwable: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_throwable: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/1	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_throwable: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/2	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_throwable: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/3	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_throwable: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/4	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_throwable: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/5	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_throwable: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/6	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_throwable: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/7	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_throwable: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/8	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_throwable: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/9	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_throwable: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/10	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7513: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7513: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/1	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_tagged_object: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_tagged_object: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object)>/java.io.Writer.write/1	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_tagged_object: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object)>/java.io.Writer.write/2	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_tagged_object: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object)>/java.io.Writer.write/3	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_tagged_object: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object)>/java.io.Writer.write/4	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_condp$fn__11386: java.lang.Object invoke()>/java.io.Writer.write/0	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_condp$fn__11386: java.lang.Object invoke()>/java.io.Writer.write/1	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_condp$fn__11386: java.lang.Object invoke()>/java.io.Writer.write/2	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_meta: java.lang.Object invokeStatic(java.lang.Object)>/java.io.Writer.write/0	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_meta: java.lang.Object invokeStatic(java.lang.Object)>/java.io.Writer.write/1	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_ns_reference: java.lang.Object invokeStatic(java.lang.Object)>/java.io.Writer.write/0	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_sequential: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_sequential: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>/java.io.Writer.write/1	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_sequential: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>/java.io.Writer.write/2	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_sequential: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>/java.io.Writer.write/3	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_sequential: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>/java.io.Writer.write/4	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_sequential: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>/java.io.Writer.write/5	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_ctor: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_ctor: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object)>/java.io.Writer.write/1	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_ctor: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object)>/java.io.Writer.write/2	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$print_ctor: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object)>/java.io.Writer.write/3	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_let: java.lang.Object invokeStatic(java.lang.Object)>/java.io.Writer.write/0	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_vector$fn__11158: java.lang.Object invoke()>/java.io.Writer.write/0	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_vector$fn__11158: java.lang.Object invoke()>/java.io.Writer.write/1	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$fn__10219: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_defn: java.lang.Object invokeStatic(java.lang.Object)>/java.io.Writer.write/0	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_cond: java.lang.Object invokeStatic(java.lang.Object)>/java.io.Writer.write/0	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$write_tokens: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$write_tokens: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object)>/java.io.Writer.write/1	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$write_tokens: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object)>/java.io.Writer.write/2	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_reader_macro: java.lang.Object invokeStatic(java.lang.Object)>/java.io.Writer.write/0	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7381: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7381: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/1	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7381: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/2	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7381: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/3	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_binding_form$fn__11351: java.lang.Object invoke()>/java.io.Writer.write/0	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_binding_form$fn__11351: java.lang.Object invoke()>/java.io.Writer.write/1	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_binding_form$fn__11351: java.lang.Object invoke()>/java.io.Writer.write/2	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_vector: java.lang.Object invokeStatic(java.lang.Object)>/java.io.Writer.write/0	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7383: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7383: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/1	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7383: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/2	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7383: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/3	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.pprint$pprint_binding_form: java.lang.Object invokeStatic(java.lang.Object)>/java.io.Writer.write/0	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7511: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7511: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/1	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.instant$print_calendar: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.instant$print_calendar: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/2	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.instant$print_calendar: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/4	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7507: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7584: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/0	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>	<java.io.PrintWriter: void write(java.lang.String)>	<<immutable-context>>	<clojure.core$fn__7584: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>/java.io.Writer.write/1	<java.util.Hashtable: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<com.google.common.cache.LongAdder: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<com.google.common.reflect.Types$JavaVersion$3: java.lang.String typeName(java.lang.reflect.Type)>/java.lang.reflect.Method.invoke/0	<com.google.common.cache.LongAdder: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<com.google.common.collect.ImmutableRangeSet: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<com.google.common.reflect.Types$JavaVersion$3: java.lang.String typeName(java.lang.reflect.Type)>/java.lang.reflect.Method.invoke/0	<com.google.common.collect.ImmutableRangeSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<com.google.common.collect.LinkedListMultimap: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<com.google.common.reflect.Types$JavaVersion$3: java.lang.String typeName(java.lang.reflect.Type)>/java.lang.reflect.Method.invoke/0	<com.google.common.collect.LinkedListMultimap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.concurrent.LinkedBlockingDeque: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<com.google.common.reflect.Types$JavaVersion$3: java.lang.String typeName(java.lang.reflect.Type)>/java.lang.reflect.Method.invoke/0	<java.util.concurrent.LinkedBlockingDeque: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<com.google.common.collect.EmptyContiguousSet: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<com.google.common.reflect.Types$JavaVersion$3: java.lang.String typeName(java.lang.reflect.Type)>/java.lang.reflect.Method.invoke/0	<com.google.common.collect.EmptyContiguousSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.HashSet: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<com.google.common.reflect.Types$JavaVersion$3: java.lang.String typeName(java.lang.reflect.Type)>/java.lang.reflect.Method.invoke/0	<java.util.HashSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<com.google.common.reflect.Types$JavaVersion$3: java.lang.String typeName(java.lang.reflect.Type)>/java.lang.reflect.Method.invoke/0	<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<com.google.common.reflect.Types$JavaVersion$3: java.lang.String typeName(java.lang.reflect.Type)>/java.lang.reflect.Method.invoke/0	<java.util.LinkedList: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<com.google.common.util.concurrent.AtomicDouble: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<com.google.common.reflect.Types$JavaVersion$3: java.lang.String typeName(java.lang.reflect.Type)>/java.lang.reflect.Method.invoke/0	<com.google.common.util.concurrent.AtomicDouble: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<com.google.common.collect.ImmutableEnumSet: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<com.google.common.reflect.Types$JavaVersion$3: java.lang.String typeName(java.lang.reflect.Type)>/java.lang.reflect.Method.invoke/0	<com.google.common.collect.ImmutableEnumSet: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<com.google.common.collect.EnumMultiset: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<com.google.common.reflect.Types$JavaVersion$3: java.lang.String typeName(java.lang.reflect.Type)>/java.lang.reflect.Method.invoke/0	<com.google.common.collect.EnumMultiset: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<java.util.HashMap: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<com.google.common.reflect.Types$JavaVersion$3: java.lang.String typeName(java.lang.reflect.Type)>/java.lang.reflect.Method.invoke/0	<java.util.HashMap: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream
<com.google.common.hash.BloomFilter: void readObject(java.io.ObjectInputStream)>	<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	<<immutable-context>>	<com.google.common.reflect.Types$JavaVersion$3: java.lang.String typeName(java.lang.reflect.Type)>/java.lang.reflect.Method.invoke/0	<com.google.common.hash.BloomFilter: void readObject(java.io.ObjectInputStream)>/TaintedMock java.io.ObjectInputStream

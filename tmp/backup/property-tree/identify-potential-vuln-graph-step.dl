// 离线使用
// 只分析是否存在可达路径
.type Method = symbol
.type InformationLabel = symbol
.type Lable = symbol

.decl fromSourceCallGraph(?fromMethod: Method, ?toMethod: Method)
.decl LeakingSinkMethod(?lable:InformationLabel, ?method:Method)

.input fromSourceCallGraph(filename="fromSourceCallGraph.csv")
.input LeakingSinkMethod(filename="LeakingSinkMethod.csv")

.decl SourceMethod(method: Method)
.decl SinkMethod(method: Method)

SinkMethod(method) :-
    LeakingSinkMethod(_, method).

SourceMethod("<sources.serialize.UnsafeSerialize: void readObject(java.io.ObjectInputStream)>").

.decl isOpaqueMethod(method: Method)

isOpaqueMethod(method) :-
    SinkMethod(method),
    match("<javax[.].*", method).

isOpaqueMethod(method) :-
    LeakingSinkMethod(_, method),
    match("<javax[.].*", method).


.decl PotentialVulnGraphStep(label: Lable, fromMethod: Method, toMethod: Method, step: number)
// .decl PotentialVulnGraph(label: Lable, fromMethod: Method, toMethod: Method)

// fromMethod -> toMethod / SinkMethod
PotentialVulnGraphStep(label, fromMethod, toMethod, step) :-
    !isOpaqueMethod(fromMethod),
    !isOpaqueMethod(toMethod),
    SinkMethod(toMethod),
    fromSourceCallGraph(fromMethod, toMethod),
    SourceMethod(sourceMethod),
    step = 0,
    label = cat(cat(sourceMethod, " -> "), toMethod).


// avoid cyclic

// fromMethod -> toMethod / oldFromMethod -> ... -> toMethod / SinkMethod
PotentialVulnGraphStep(label, fromMethod, toMethod, step) :-
    !isOpaqueMethod(fromMethod),
    PotentialVulnGraphStep(label, toMethod, oldFromMethod, oldStep),
    step = oldStep + 1,   
    (
        (
            PotentialVulnGraphStep(label, fromMethod, _, otherOldStep),
            step < otherOldStep
        );
        !PotentialVulnGraphStep(label, fromMethod, oldFromMethod, step)
        ),
    fromSourceCallGraph(fromMethod, toMethod).

// PotentialVulnGraphStep(label, fromMethod, toMethod, step) :-
//     !isOpaqueMethod(fromMethod),
//     PotentialVulnGraphStep(label, toMethod, _, oldStep),
//     step = oldStep + 1,
//     fromSourceCallGraph(fromMethod, toMethod).

.decl vulnGraphStep(label: Lable, fromMethod: Method, toMethod: Method, step: number)

vulnGraphStep(label, fromMethod, toMethod, step) :-
    SourceMethod(fromMethod),
    PotentialVulnGraphStep(label, fromMethod, toMethod, step).

.output PotentialVulnGraphStep
.output vulnGraphStep
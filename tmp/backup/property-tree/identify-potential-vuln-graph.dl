// 离线使用
// 只分析是否存在可达路径
.type Method = symbol
.type InformationLabel = symbol
.type Label = symbol

.decl fromSourceCallGraph(?fromMethod: Method, ?toMethod: Method)
.decl LeakingSinkMethod(?label:InformationLabel, ?method:Method)

.input fromSourceCallGraph(filename="fromSourceCallGraph.csv")
.input LeakingSinkMethod(filename="LeakingSinkMethod.csv")

.decl SourceMethod(method: Method)
.decl SinkMethod(method: Method)

SinkMethod(method) :-
    LeakingSinkMethod(_, method).

SourceMethod("<sources.serialize.UnsafeSerialize: void readObject(java.io.ObjectInputStream)>").

.decl isOpaqueMethod(method: Method)

#define OpaqueRule "<java[.]awt.*|<javax.*"

isOpaqueMethod(method) :-
    SinkMethod(method),
    match(OpaqueRule, method).

isOpaqueMethod(method) :-
    fromSourceCallGraph(_, method),
    match(OpaqueRule, method).

isOpaqueMethod(method) :-
    fromSourceCallGraph(method, _),
    match(OpaqueRule, method).

.decl PotentialVulnGraph(label: Label, fromMethod: Method, toMethod: Method)

// fromMethod -> toMethod / SinkMethod
PotentialVulnGraph(label, fromMethod, toMethod) :-
    !isOpaqueMethod(fromMethod),
    !isOpaqueMethod(toMethod),
    SinkMethod(toMethod),
    fromSourceCallGraph(fromMethod, toMethod),
    SourceMethod(sourceMethod),
    label = cat(cat(sourceMethod, " -> "), toMethod).

// fromMethod -> toMethod / oldFromMethod -> ... -> toMethod / SinkMethod
PotentialVulnGraph(label, fromMethod, toMethod) :-
    !isOpaqueMethod(fromMethod),
    PotentialVulnGraph(label, toMethod, _),
    fromSourceCallGraph(fromMethod, toMethod).

.decl vulnGraph(label: Label, fromMethod: Method, toMethod: Method)

vulnGraph(label, fromMethod, toMethod) :-
    SourceMethod(fromMethod),
    PotentialVulnGraph(label, fromMethod, toMethod).

.output PotentialVulnGraph
.output vulnGraph
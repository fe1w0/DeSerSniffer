.type Node <: symbol
.type Path = [
    rest: Path,
    node: Node
]
.type Method = Node
.type InformationLabel = symbol
.type Lable = symbol


.decl fromSourceCallGraph(?fromMethod: Method, ?toMethod: Method)
.decl LeakingSinkMethod(?lable:InformationLabel, ?method:Method)

// .input fromSourceCallGraph(filename="fromSourceCallGraph.csv")
// .input LeakingSinkMethod(filename="LeakingSinkMethod.csv")

.decl SourceMethod(method: Method)
.decl SinkMethod(method: Method)

SinkMethod(method) :-
    LeakingSinkMethod(_, method).

// SourceMethod("<sun.reflect.annotation.AnnotationInvocationHandler: void readObject(java.io.ObjectInputStream)>").

SourceMethod("A").
SourceMethod("AA").
SinkMethod("EVIL").

fromSourceCallGraph("A", "B").
fromSourceCallGraph("AA", "B").
fromSourceCallGraph("A", "C").
fromSourceCallGraph("A", "D").
fromSourceCallGraph("B", "C").
fromSourceCallGraph("B", "D").
fromSourceCallGraph("C", "D").
fromSourceCallGraph("D", "E").
fromSourceCallGraph("E", "F").
fromSourceCallGraph("F", "D").
fromSourceCallGraph("F", "EVIL").


.decl isOpaqueMethod(method: Method) 


#define OpaqueRule "<java[.]awt.*|<javax.*"

isOpaqueMethod(method) :-
    SinkMethod(method),
    match(OpaqueRule, method).

isOpaqueMethod(method) :-
    fromSourceCallGraph(_, method),
    match(OpaqueRule, method).

isOpaqueMethod(method) :-
    fromSourceCallGraph(method, _),
    match(OpaqueRule, method).

.decl PotentialVulnGraphStep(current_path: Path, step: number)

.decl PotentialVulnPath(path:Path)

PotentialVulnGraphStep([nil, method], step) :-
    SourceMethod(method),
    step = 1.

PotentialVulnPath([nil, method]) :-
    SourceMethod(method).

PotentialVulnPath(current_path),
PotentialVulnGraphStep(current_path, new_step) :-
    PotentialVulnPath(path),
    path = [oldFromMethod, oldToMethod],
    oldToMethod = fromMethod,
    fromSourceCallGraph(fromMethod, toMethod),
    current_path = [[oldFromMethod, oldToMethod], toMethod],
    PotentialVulnGraphStep(path, step),
    !isOpaqueMethod(toMethod),
    new_step = step + 1,
    new_step <= 100.

// PotentialVulnPath(remove) <= PotentialVulnPath(new) :-
//     remove = [remove_path, node],
//     new = [new_path, node],
//     PotentialVulnGraphStep(remove_path, remove_step),
//     PotentialVulnGraphStep(new_path, new_step),
//     new_step <= remove_step.

// PotentialVulnPath(remove) <= PotentialVulnPath(new) :-
//     remove = [remove_path, node],
//     new = [new_path, node],
//     PotentialVulnGraphStep(remove_path, remove_step),
//     PotentialVulnGraphStep(new_path, new_step),
//     new_step <= remove_step.

.output PotentialVulnPath, PotentialVulnGraphStep
.limitsize PotentialVulnGraphStep(n=500)
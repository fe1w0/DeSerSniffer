//-----------------------------------------------------------------------------
// 分析出 属性树
//-----------------------------------------------------------------------------
// label 用于区别不同的 ChainsPath,
// parent_object_class 表示 parent class,
// field_object_class 表示 child class,
// field_name 表示 parent_class.field_name
.decl PropertyTree(label: symbol, parent_object_class: symbol, field_object_class: symbol, field_name: symbol, whole_name: symbol)

.decl FINAL_Field_Type(signature: symbol, field_object_class: symbol)

FINAL_Field_Type(signature, field_object_class) :-
    !Special_Field_Type(signature, _, _),
    Field_Type(signature, field_object_class).

FINAL_Field_Type(signature, new_type) :-
    Special_Field_Type(signature, _, new_type).

// 自底向上的计算方式 Special_Field_Type
// 由于 Method_Subtype 算法产生的 Sub_Method 产生新的 CallGraph, 这也导致一些Field实际类型是其 Sub_Class
.decl Special_Field_Type(signature: symbol, field_name: symbol, new_type: symbol)

Special_Field_Type(signature, field_name, new_type) :-
    PotentialVulnGraph(_, _, to_method),
    // value 为 Point-To 的地址
    basic.ResolveInvocation(_, invocation, to_method),
    // 得到 invocation 的 base 信息
    VirtualMethodInvocation_Base(invocation, base),
    mainAnalysis.VarPointsTo(_, value, _, base),
    // base 得到 PointsTo 中的 Value, 并得到为 Field 信息
    mainAnalysis.InstanceFieldPointsTo(_, value, signature, _, _),
    Field_SimpleName(signature, field_name),
    Method_DeclaringType(to_method, new_type).  

// Todo: PotentialVulnGraphLabel 有点问题
#define STOP_PropertyTree_Class "java[.]lang[.].*"

PropertyTree(label, parent_object_class, field_object_class, field_name, whole_name) :-
    label="ROOT",
    SourceMethod(source_method),
    Method_DeclaringType(source_method, parent_object_class),
    !match(STOP_PropertyTree_Class, parent_object_class),
    !match(STOP_PropertyTree_Class, field_object_class),
    Field_DeclaringType(signature, parent_object_class),
    Field_SimpleName(signature, field_name),
    whole_name = cat(cat(parent_object_class, "#"), field_name),
    FINAL_Field_Type(signature, field_object_class).

// 递归查询
PropertyTree(label, parent_object_class, field_object_class, field_name, whole_name) :-
    !match(STOP_PropertyTree_Class, parent_object_class),
    label="ORDINARY",
    !isPrimitiveType(field_object_class),
    PropertyTree(_, _, parent_object_class, _, _),
    Field_DeclaringType(signature, parent_object_class),
    Field_SimpleName(signature, field_name),
    whole_name = cat(cat(parent_object_class, "#"), field_name),
    FINAL_Field_Type(signature, field_object_class).

// 递归查询
PropertyTree(label, parent_object_class, field_object_class, field_name, whole_name) :-
    !match(STOP_PropertyTree_Class, parent_object_class),
    label="PRIORITY",
    isPrimitiveType(field_object_class),
    PropertyTree(_, _, parent_object_class, _, _),
    Field_DeclaringType(signature, parent_object_class),
    Field_SimpleName(signature, field_name),
    whole_name = cat(cat(parent_object_class, "#"), field_name),
    FINAL_Field_Type(signature, field_object_class).


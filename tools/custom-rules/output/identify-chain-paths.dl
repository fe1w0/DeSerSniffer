//-----------------------------------------------------------------------------
// Inline-Doop Version
// identify-chain-paths 用于分析出 当前 ChainsPath.csv 给 FuzzChains
//-----------------------------------------------------------------------------
.type Label = symbol

.decl SourceMethod(method: Method)
.decl SinkMethod(method: Method)

.decl PotentialVulnGraphLabel(label: Label)

// 返回 符合 FuzzChains的格式
.decl ChainPathsOutput(MethodDeclaringType: ReferenceType , MethodSimpleName: symbol, MethodJVMDescriptor: JVMDescriptor)

.decl isChainPathMethod(?method: Method)

SinkMethod(method) :-
    isMethod(method),
    LeakingSinkMethod(_, method).

SourceMethod(method) :-
    isMethod(method),
    TaintSourceMethod(_, method).

#define OpaqueRule "<java[.]awt.*|<javax.*"

.decl isOpaqueMethodForIdentify(method: Method)

isOpaqueMethodForIdentify(method) :-
    !SinkMethod(method),
    !SourceMethod(method),
    fromSourceCallGraph(_, method, _),
    match(OpaqueRule, method).

isOpaqueMethodForIdentify(method) :-
    !SinkMethod(method),
    !SourceMethod(method),
    fromSourceCallGraph(method, _, _),
    match(OpaqueRule, method).

.decl PotentialVulnGraph(label: Label, fromMethod: Method, toMethod: Method)

// fromMethod -> toMethod / SinkMethod
PotentialVulnGraphLabel(newlabel),
PotentialVulnGraph(newlabel, fromMethod, toMethod) :-
    !isOpaqueMethodForIdentify(fromMethod),
    !isOpaqueMethodForIdentify(toMethod),
    SinkMethod(toMethod),
    // fromMethod 受到 LeakingTaintedInformation(_, _, _, invocation, _)
    LeakingTaintedInformation(_, _, _, invocation, source_value),
    Instruction_Method(invocation, fromMethod),
    fromSourceCallGraph(fromMethod, toMethod, label),
    SourceValueAndMethod(source_value, sourceMethod),
    newlabel = cat(label, cat("::", cat(cat(sourceMethod, " -> "))), toMethod).

// fromMethod -> toMethod / oldFromMethod -> ... -> toMethod / SinkMethod
PotentialVulnGraph(label, fromMethod, toMethod) :-
    !isOpaqueMethodForIdentify(fromMethod),
    PotentialVulnGraph(label, toMethod, _),
    fromSourceCallGraph(fromMethod, toMethod, _).

isChainPathMethod(toMethod),
isChainPathMethod(fromMethod) :-
    PotentialVulnGraph(_, fromMethod, toMethod).

// ChainPathsOutput
ChainPathsOutput(MethodDeclaringType, MethodSimpleName, MethodJVMDescriptor) :-
    isChainPathMethod(method),
    // 查找 ?fromMethod 的 Method_DeclaringType, Method_SimpleName, Method_JVMDescriptor
    Method_DeclaringType(method, MethodDeclaringType),
    Method_SimpleName(method, MethodSimpleName),
    Method_JVMDescriptor(method, MethodJVMDescriptor).

.output isOpaqueMethodForIdentify
.output ChainPathsOutput
.output PotentialVulnGraphLabel
.output PotentialVulnGraph
/**
 * 利用 InterproceduralTransferAnalysis.CallEdgeInSummarizer 检测
*/
.decl CallGraphInSummarizer(fromMethod: Method, toMethod: Method)

/**
 * method 被认为 无法在 fromSourceCallGraph中传递，只能作为 End 结点。
*/
.decl EndMethodInTransfer(method: Method)

EndMethodInTransfer("<java.lang.Class: java.lang.Class forName(java.lang.String)>").
EndMethodInTransfer("<java.lang.Throwable: void printStackTrace()>").
EndMethodInTransfer("<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>").
EndMethodInTransfer("<java.lang.Class: java.lang.Object newInstance()>").
EndMethodInTransfer("<java.io.ObjectInputStream: java.lang.Object readObject()>").
EndMethodInTransfer("<java.io.ObjectInputStream: void defaultReadObject()>").

EndMethodInTransfer(method) :- 
    DenyEntryClass(class),
    !DefineSinkMethod(method),
    Method_DeclaringType(method, class).


CallGraphInSummarizer(fromMethod, toMethod) :-
    toMethod = callee_method,
    InterproceduralTransferAnalysis.CallEdgeInSummarizer(caller_ctx, caller_invocation, callee_ctx, callee_method),
    Instruction_Method(caller_invocation, fromMethod),
    !EndMethodInTransfer(fromMethod).


/**
 * 检测 TaintedTransferResult 过程中，是否由以下的字段来传播
 * Static Field
 * transient Field 
 * 若是，则中断实际传播过程
*/
.decl EndObjectFieldInTransfer(var: symbol, in_method: Method)

EndObjectFieldInTransfer(to, in_method) :-
    LoadInstanceField(base, signature, to, in_method),
    (
        Field_Modifier("transient", signature);
        Field_Modifier("staic", signature)
    ).

/**
 * 用于中断实际传播过程的临时变量
*/
.decl InValidVariableInTransfer(var: symbol, in_method: Method)

InValidVariableInTransfer(var, in_method) :-
    EndObjectFieldInTransfer(var, in_method).

InValidVariableInTransfer(to, in_method) :-
    EndObjectFieldInTransfer(from, in_method),
    TaintedTransferResult(in_method, from, in_method, to).

/**
 * this / param -> formal_this
*/
.decl TaintedToInvocationBase(from: symbol, from_method: Method, this: symbol, to_method: Method)

TaintedToInvocationBase(from, from_method, this, to_method) :-
    TaintedTransferResult(from_method, from, from_method, base),
    InterproceduralTransferAnalysis.CallEdgeInSummarizer(from_method, invocation, to_method, to_method),
    !InValidVariableInTransfer(from_method, base),
    !EndMethodInTransfer(from_method),
    (
        FormalParam(_, from_method, from);
        ThisVar(from_method, from)
    ),
    ThisVar(to_method, this),
    Instruction_Method(invocation, from_method),
    MethodInvocation_Base(invocation, base).

/**
 * this / param -> formal_param
*/
.decl TaintedToInvocationParam(from: symbol, from_method: Method, formal_param: symbol, to_method: Method)

TaintedToInvocationParam(from, from_method, formal_param, to_method) :-
    TaintedTransferResult(from_method, from, from_method, param),
    InterproceduralTransferAnalysis.CallEdgeInSummarizer(from_method, invocation, to_method, to_method),
    !InValidVariableInTransfer(from_method, param),
    !EndMethodInTransfer(from_method),
    (
        FormalParam(_, from_method, from);
        ThisVar(from_method, from)
    ),
    Instruction_Method(invocation, from_method),
    ActualParam(index, invocation, param),
    FormalParam(index, to_method, formal_param).

/**
 * this / param -> invocation: param/base
*/
.decl TaintedToInvocationVariable(from: symbol, from_method: Method, to: symbol, to_method: Method)

TaintedToInvocationVariable(from, from_method, to, to_method) :-
    (
        TaintedToInvocationParam(from, from_method, to, to_method);
        TaintedToInvocationBase(from, from_method, to, to_method)
    ).

/**
 * 自低向上，构建 ReachableTaintedCallGraph(NodeMethod, Variable, SinkMethod)
*/
.decl ReachableTaintedCallGraph(NodeMethod: Method, from_var: Var, ToMethod: Method, to_var: Var, SinkMethod: Method)

/**
 * 自低向上，计算 NodeMethod 到 SinkMethod 的可达性
*/
.decl ReachableTaintedToSinkeMethod(NodeMethod: Method, from: Var, SinkMethod: Method, Sink_to: Var)

/**
 * from: this/param,
 * to: this/param
*/
ReachableTaintedToSinkeMethod(NodeMethod, from, SinkMethod, to),
ReachableTaintedCallGraph(NodeMethod, from, SinkMethod, to, SinkMethod) :-
    TaintedToInvocationVariable(from, NodeMethod, to, SinkMethod),
    ApplicationMethod(NodeMethod),
    DefineSinkMethod(SinkMethod).

/**
 * from: this/param,
 * PreviousFrom: formal_param
*/
ReachableTaintedToSinkeMethod(NodeMethod, from, SinkMethod, to),
ReachableTaintedCallGraph(NodeMethod, from, PreviousNodeMethod, PreviousFrom, SinkMethod) :-
    ReachableTaintedToSinkeMethod(PreviousNodeMethod, PreviousFrom, SinkMethod, to),
    TaintedToInvocationVariable(from, NodeMethod, PreviousFrom, PreviousNodeMethod),
    ReachableTaintedCallGraph(PreviousNodeMethod, PreviousFrom, PreviousToMethod, PreviousTo, SinkMethod).


.decl ReachabelSinkingMethod(SourceMethod: Method, SourceFrom: Var, SinkMethod: Method, SinkTo: Var)

ReachabelSinkingMethod(SourceMethod, from, SinkMethod, to) :-
    readObject.ListReadObjectMethod(SourceMethod),
    ReachableTaintedToSinkeMethod(SourceMethod, from, SinkMethod, to).



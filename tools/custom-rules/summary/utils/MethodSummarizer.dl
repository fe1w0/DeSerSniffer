
/**
 * 通过污点传播过程 
*/
.decl TaintedTransferResult(fromCtx: symbol, from: symbol, toCtx: symbol, to: symbol)
.output TaintedTransferResult
.printsize TaintedTransferResult

TaintedTransferResult(fromCtx, from, toCtx, to) :-
	TaintObjTransfer(fromCtx, from, toCtx, to).

TaintedTransferResult(fromCtx, from, toCtx, to) :-
	toCtx = in_method,
	fromCtx = in_method,
	from = base,
	TaintedVarPointsTo(baseValue, _, base),
	Extension_Value(hctx, field_value, signature, in_method, base, to).

TaintedTransferResult(fromCtx, from, toCtx, to) :-
	TaintedTransferResult(fromCtx, from, toCtx, tmp),
	TaintedTransferResult(fromCtx, tmp, toCtx, to).

TaintedTransferResult(fromCtx, from, toCtx, to) :-
	TaintedVarPointsTo(from_value, fromCtx, from),
	StoreInstanceField(from, base, signature, in_method),
	to = base,
	toCtx = in_method.

/**
 * formal @this <-> actual @this
*/
TaintedTransferResult(RfromCtx, Rfrom, RtoCtx, Rto) :-
	TaintedTransferResult(fromCtx, from, toCtx, to),
	ThisVar(method, from),
	Rto = from,
	RtoCtx = fromCtx,
	Rfrom = to,
	RfromCtx = toCtx.

/**
 * 在利用 ForcedReachable 计算函数内的指针时，需要对 this.field 进行 mock
*/
.decl Extension_Value(hctx: symbol, field_value: symbol, signature: symbol, method: Method, from_base: symbol, to: symbol)
.output Extension_Value
.printsize Extension_Value

mainAnalysis.VarPointsTo(hctx, field_value, in_method, to),
mainAnalysis.Value_isMock(field_value), isValue(field_value), mainAnalysis.Value_Type(field_value, value_type), mainAnalysis.Value_DeclaringType(field_value, declaring_type),
Extension_Value(hctx, field_value, signature, in_method, base, to) :-
 Target_Lost_Store_Target(base, signature, in_method, to),
 mainAnalysis.isImmutableHContext(hctx),
 field_value = cat(cat("<mock value for ", signature), cat(">:: ", in_method)),
 Field_Type(signature, value_type),
 Method_DeclaringType(in_method, declaring_type).

.output mainAnalysis.StoreHeapInstanceField
.output mainAnalysis.LoadHeapInstanceField
.output mainAnalysis.InstanceFieldPointsTo

/**
 * 统计哪些函数已经触发了摘要过程
*/
.decl MethodInSummaries(method: Method)
.output MethodInSummaries

/**
 * 需设计:
 * 变量传播摘要需要自动计算提供以下关系:
 * - BaseToRetTaintTransferMethod
 * - BaseToParamTaintTransferMethod
 * - ParamToBaseTaintTransferMethod
 * - ParamToRetTaintTransferMethod
 * 未考虑:
 * - ParamIndexToBaseTaintTransferMethod
*/
.comp MethodSummarizer {

	/**
	* base(this) 可以 传递到 index-th 参数
	*/
	.decl BaseToParamSummarizeMethod(index:number, method:Method)

	BaseToParamTaintTransferMethod(method),
	BaseToParamSummarizeMethod(index, method):-
		TaintedTransferResult(method, from, method, to),
		FormalParam(index, method, to),
		ThisVar(method, from).

	/**
	* base(this) 可以传递到 return
	*/
	.decl BaseToRetSummarizeMethod(method: Method)

	BaseToRetTaintTransferMethod(method),
	BaseToRetSummarizeMethod(method) :-
		TaintedTransferResult(method, from, method, to),
		ReturnVar(to, method),
		ThisVar(method, from).

	/**
	* index-th 可以传递到 return
	*/
	.decl ParamToRetSummarizeMethod(index:number, method:Method)

	ParamToRetTaintTransferMethod(method),
	ParamToRetSummarizeMethod(index, method) :-
		TaintedTransferResult(method, from, method, to),
		ReturnVar(to, method),
		FormalParam(index, method, from).

	/**	
	* index-th 参数 可以传递到 base(this)
	*/
	.decl ParamToBaseSummarizeMethod(index:number, method:Method)

	ParamToBaseTaintTransferMethod(index, method),
	ParamToBaseSummarizeMethod(index, method) :-
		TaintedTransferResult(method, from, method, to),
		ThisVar(method, to),
		FormalParam(index, method, from).
}

/**
 * 采用 May 分析的方式，处理 Native 函数
*/
.comp NativeMethodSummarize {

	.decl NativeMethod(method: Method)

	NativeMethod(method) :-
		Method_Modifier("native", method).

	/**
	* base(this) 可以 传递到 index-th 参数
	*/
	.decl BaseToParamSummarizeMethod(index:number, method:Method)

	BaseToParamTaintTransferMethod(method),
	BaseToParamSummarizeMethod(index, method):-
		FormalParam(index, method, _),
		!Method_Modifier("static", method),
		NativeMethod(method).

	/**
	* base(this) 可以传递到 return
	*/
	.decl BaseToRetSummarizeMethod(method: Method)

	BaseToRetTaintTransferMethod(method),
	BaseToRetSummarizeMethod(method) :-
		!Method_Modifier("static", method),
		Method_ReturnType(method, _),
		NativeMethod(method).

	/**
	* index-th 可以传递到 return
	*/
	.decl ParamToRetSummarizeMethod(index:number, method:Method)

	ParamToRetTaintTransferMethod(method),
	ParamToRetSummarizeMethod(index, method) :-
		FormalParam(index, method, _),
		Method_ReturnType(method, _),
		NativeMethod(method).
	
	/**	
	* index-th 参数 可以传递到 base(this)
	*/
	.decl ParamToBaseSummarizeMethod(index:number, method:Method)

	ParamToBaseTaintTransferMethod(index, method),
	ParamToBaseSummarizeMethod(index, method) :-
		FormalParam(index, method, _),
		!Method_Modifier("static", method),
		NativeMethod(method).
}


/**
 * 解决过程间的传播问题:
 * 1. Merge 潜在调用的CallEdge的污点传播摘要信息
 * 2. 解决两种特殊图问题, Recursion and circular calls
*/
.comp InterproceduralTransfer {

	/**
	* 摘要函数中的CallEdge，主要用过过程间摘要函数的污点传播过程，利用Bottom和Node中的传播摘要信息
	*/
	.decl CallEdgeInSummarizer(caller_ctx: symbol, caller_invocation: symbol, callee_ctx: symbol, callee_method: symbol)
	.output CallEdgeInSummarizer

	/**
	* 处理传统调用问题:
	*/
	mainAnalysis.OptVirtualMethodInvocationBase(invocation, base) :-
		mainAnalysis.ForcedReachable(method),
		Instruction_Method(invocation, method),
		VirtualMethodInvocation_Base(invocation, base).

	mainAnalysis.OptSuperMethodInvocationBase(invocation, base) :-
		mainAnalysis.ForcedReachable(method),
		Instruction_Method(invocation, method),
		SuperMethodInvocation_Base(invocation, base).

	mainAnalysis.OptSpecialMethodInvocationBase(invocation, base) :-
		mainAnalysis.ForcedReachable(method),
		Instruction_Method(invocation, method),
		SpecialMethodInvocation_Base(invocation, base).

	/**
	* 将影响 污点传播，以及指针传播
	*/
	CallEdgeInSummarizer(caller_ctx, caller_invocation, callee_ctx, callee_method) :-
		mainAnalysis.configuration.ContextRequest(caller_ctx, _, caller_invocation, _, callee_method, 1),
		callee_ctx = callee_method.

	/**
	* 需要考虑静态调用
	*/
	CallEdgeInSummarizer(caller_ctx, caller_invocation, callee_ctx, callee_method) :-
		mainAnalysis.configuration.StaticContextRequest(caller_ctx, caller_invocation),
		MethodInvocation_Method(caller_invocation, callee_method),
		callee_ctx = callee_method.
	
	/**
	* 需要考虑虚拟化调用时，
	* ret 需要有 VarPointsTo 分配
	* souffle-logic/main/method-handles.dl
	*/
	mainAnalysis.VarPointsTo(hctx, val, callerCtx, var) :-
		CallEdgeInSummarizer(callerCtx, invo, calleeCtx, method),
		ReturnVar(ret, method),
		mainAnalysis.VarPointsTo(hctx, val, calleeCtx, ret),
		AssignReturnValue(invo, var),
		Var_Type(ret, retType),
		Var_Type(var, varType),
		mainAnalysis.CompatibleTypes(retType, varType).

	/**
	* 主要依靠 MethodInvocationInContext 来传递摘要
	*/
	MethodInvocationInContextInApplication(caller_ctx, caller_invocation, callee_method),
	MethodInvocationInContext(caller_ctx, caller_invocation, callee_method) :-
		CallEdgeInSummarizer(caller_ctx, caller_invocation, _, callee_method).

	/**
	* 主要依靠 MethodInvocationInContext 来传递摘要
	*/
	mainAnalysis.VarPointsTo(hctx, value, callerCtx, local) :-
		CallEdgeInSummarizer(callerCtx, invocation, calleeCtx, method),
		AssignReturnValue(invocation, local),
		ReturnVar(return, method),
		!SanitizationMethod(method),
		mainAnalysis.OptRetVarPointsTo(hctx, value, calleeCtx, return).

	/**
	* 解决 Const 数值问题
	*/
	.decl CreateNumberValue(const:symbol, type:Type, declaringType:ReferenceType)

	CreateNumberValue(const, type, className) :-
		AssignNumConstant_Id(insn, const),
		NumConstantRaw(const, type),
		Instruction_Method(insn, meth),
		Method_DeclaringType(meth, className).

	mainAnalysis.VarPointsTo(hctx, constValue, toCtx, to),
	mainAnalysis.Value_Num(constValue, const, type),
	isValue(constValue),
	mainAnalysis.Value_Type(constValue, type),
	mainAnalysis.Value_DeclaringType(constValue, declaringType) :-
		mainAnalysis.ReachableContext(toCtx, inmethod),
		Instruction_Method(insn, inmethod),
		(
			AssignNumConstant_Id(insn, const);
    		AssignCastNumConstant_Id(insn, const)
		),
		AssignInstruction_To(insn, to),
		CreateNumberValue(const, type, declaringType),
		constValue = cat("num-constant-", const),
		mainAnalysis.isImmutableHContext(hctx).
}

.init InterproceduralTransferAnalysis = InterproceduralTransfer

.init Summarizer = MethodSummarizer

.init NativeSummarize = NativeMethodSummarize

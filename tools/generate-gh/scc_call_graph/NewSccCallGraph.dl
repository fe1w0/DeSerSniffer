/**
 * 在计算不同 Label 下的 SCC，并在此基础上生成 CallGraph
*/

.comp CallGraph {
	.type Node = symbol
	.type Label = symbol


	/**
	* 导入 PotentialVulnGraph 数据
	*/
	.decl Links(label: Label, A: Node, B: Node)
	.printsize Links
	.input Links(filename="PotentialVulnGraph.csv")

	/**
	* 设置 LabelValue
	*/
	.decl LabelValue(label: Label)
	.printsize LabelValue

	/**
	* 设置 Nodes，并以 label 区分
	*/
	.decl Nodes(label: Label, node: Node)
	.printsize Nodes

	LabelValue(label),
	Nodes(label, node) :-
		Links(label, node, _);
		Links(label, _, node).

	/**
	* 查看 Nodes 之间的可达性
	*/
	.decl Reaches(label:Label, A: Node, B: Node)

	Reaches(label, A, B) :-
		Links(label, A, B).
	Reaches(label, A, B) :-
		Links(label, A, C), Reaches(label, C, B).

	/**
	* 查看 Nodes 之间的互相可达性
	*/
	.decl MutuallyReaching(label: Label, A: Node, B: Node)

	MutuallyReaching(label, A, B) :-
		Reaches(label, A, B), Reaches(label, B, A).
	MutuallyReaching(label, A, A) :-
		Nodes(label, A).

	/**
	* 对 MutuallyReaching 形成 SCC 节点，排序算法选择用 ord 进行比较
	*/
	.decl Chain(label: Label, A: Node, B: Node)

	Chain(label, A, B) :-
		MutuallyReaching(label, A, B),
		ord(A) < ord(B).

	/**
	* 表示 每一个 scc 中最小的值
	*/
	.decl Leader(label: Label, A: Node)
	Leader(label, A) :-
		Nodes(label, A), !Chain(label, _, A).

	/**
	* 表示 每一个 scc 中的节点数量
	*/
	.decl CountSCC(label: Label, A: Node, n: number)
	.output CountSCC

	CountSCC(label, A, n) :-
		Leader(label, A),
		n = count : {
			MutuallyReaching(label, A, _)
		}.
	
	/**
	* 表示 scc 指向的 d向量, d为不同的scc向量
	*/
	.decl ConnectSCC(label: Label, scc: Node, d: Node)

	ConnectSCC(label, scc, d) :-
		Leader(label, scc),
		Leader(label, d),
		MutuallyReaching(label, scc, scc_o),
		Links(label, scc_o, d),
		!MutuallyReaching(label, scc, d).

	.decl StartNode(node: Node)
	StartNode("<Start Method>").

	/**
	* 创建 DOT 图中的 Node 节点
	*/
	.decl MarkedNode(label: Label, scc: Node, marked_node: Node)

	MarkedNode(label, scc, marked_node) :-
		CountSCC(label, scc, n),
		(
			(
				n > 1,
				marked_node = cat(cat(scc, ":: SCC :: "), to_string(n))
			);
			(
				n = 1,
				marked_node = scc
			)
		).

	.decl SccCallGraph(label: Label, marked_node: Node, marked_next_node: Node)

	SccCallGraph(label, root, marked_node) :-
		StartNode(root),
		ConnectSCC(label, root, node),
		MarkedNode(label, node, marked_node).

	SccCallGraph(label, marked_node, marked_next_node) :-
		SccCallGraph(label, _, marked_node),
		MarkedNode(label, node, marked_node),
		ConnectSCC(label, node, next_node),
		MarkedNode(label, next_node, marked_next_node).

	SccCallGraph(label, marked_node, marked_next_node) :-
		SccCallGraph(label, _, marked_node),
		MarkedNode(label, node, marked_node),
		// node 不在 scc, 查询 scc，并补充 edge
		!Leader(label, node),
		MutuallyReaching(label, scc, node),
		ConnectSCC(label, scc, next_node),
		MarkedNode(label, next_node, marked_next_node).
}

.init call_graph = CallGraph
.printsize call_graph.SccCallGraph
<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>
<Start Method>
<java.util.EnumMap: void readObject(java.io.ObjectInputStream)>
<java.util.HashMap: void readObject(java.io.ObjectInputStream)>
<java.util.PriorityQueue: void readObject(java.io.ObjectInputStream)>
<java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>
<java.lang.invoke.InnerClassLambdaMetafactory: void <init>(java.lang.invoke.MethodHandles$Lookup,java.lang.invoke.MethodType,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType,boolean,java.lang.Class[],java.lang.invoke.MethodType[])>
<clojure.core$assert: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.core$seq__5479: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.lang.PersistentList$Primordial: java.lang.Object invokeStatic(clojure.lang.ISeq)>
<clojure.core.server$remote_prepl: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,clojure.lang.ISeq)>
<clojure.core$to_array: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.core$next__5463: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.lang.Numbers: char[] char_array(java.lang.Object)>
<clojure.lang.PersistentArrayMap: clojure.lang.PersistentArrayMap createAsIfByAssoc(java.lang.Object[])>
<clojure.core.server$resolve_fn: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.core$first__5461: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.lang.RT: java.lang.Object get(java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.lang.RT: int intCast(java.lang.Object)>
<clojure.test$testing: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object,clojure.lang.ISeq)>
<clojure.core$apply: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>
<clojure.core$generate_class$arg_types__7653: java.lang.Object invoke(java.lang.Object)>
<clojure.core$into_array: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.core$make_array: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>
<clojure.pprint$get_max_column: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.pprint$get_field: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>
<clojure.pprint$get_max_column: java.lang.Object invoke(java.lang.Object)>
<clojure.math$copy_sign__inliner__12578: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>
<clojure.core$parse_double: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.core$parsing_err: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.core$parse_double: java.lang.Object invoke(java.lang.Object)>
<clojure.math$copy_sign__inliner__12578: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.test$testing: java.lang.Object doInvoke(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.lang.Agent: java.lang.Object restart(java.lang.Object,boolean)>
<clojure.lang.ARef: void validate(java.lang.Object)>
<clojure.repl$root_cause: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.core$not_EQ_: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>
<clojure.core$implements_QMARK_: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>
<clojure.lang.KeywordLookupSite: clojure.lang.ILookupThunk fault(java.lang.Object)>
<clojure.lang.KeywordLookupSite: java.lang.Object get(java.lang.Object)>
<clojure.lang.ASeq: boolean equiv(java.lang.Object)>
<clojure.lang.Util: boolean equiv(java.lang.Object,java.lang.Object)>
<clojure.lang.RT: clojure.lang.ISeq seq(java.lang.Object)>
<clojure.reflect.Field: int count()>
<clojure.lang.PersistentStructMap: int count()>
<clojure.lang.APersistentSet: int count()>
<clojure.lang.Cons: clojure.lang.ISeq next()>
<clojure.core.proxy$clojure.lang.APersistentMap$ff19274a: int count()>
<clojure.lang.LazySeq: java.lang.Object first()>
<clojure.lang.LazySeq: clojure.lang.ISeq next()>
<clojure.lang.ChunkedCons: clojure.lang.ISeq next()>
<clojure.reflect.Method: int count()>
<clojure.lang.Range: clojure.lang.ISeq next()>
<clojure.lang.APersistentMap$KeySeq: java.lang.Object first()>
<clojure.lang.APersistentMap$KeySeq: clojure.lang.ISeq next()>
<clojure.lang.PersistentTreeMap$Seq: clojure.lang.ISeq next()>
<clojure.lang.PersistentStructMap$Seq: java.lang.Object first()>
<clojure.lang.PersistentStructMap$Seq: clojure.lang.ISeq next()>
<clojure.lang.Cycle: java.lang.Object first()>
<clojure.lang.Cycle: clojure.lang.ISeq next()>
<clojure.lang.Iterate: java.lang.Object first()>
<clojure.lang.Iterate: clojure.lang.ISeq next()>
<clojure.lang.PersistentQueue$Seq: java.lang.Object first()>
<clojure.lang.PersistentQueue$Seq: clojure.lang.ISeq next()>
<clojure.reflect.Constructor: int count()>
<clojure.repl$root_cause: java.lang.Object invoke(java.lang.Object)>
<clojure.core$ref_min_history: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>
<clojure.lang.ASeq: boolean equals(java.lang.Object)>
<clojure.lang.Util: boolean equals(java.lang.Object,java.lang.Object)>
<clojure.core$ref_min_history: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.core$implements_QMARK_: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.core$assert: java.lang.Object invoke(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.java.process$start$to_redirect__11912: java.lang.Object invoke(java.lang.Object)>
<clojure.core$deref: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.lang.Util: int hash(java.lang.Object)>
<clojure.core$assert: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.core$update_proxy: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>
<clojure.pprint.proxy$java.io.Writer$IDeref$e595a7c1: void __updateClojureFnMappings(clojure.lang.IPersistentMap)>
<clojure.core.proxy$clojure.lang.APersistentMap$ff19274a: void __updateClojureFnMappings(clojure.lang.IPersistentMap)>
<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: void __updateClojureFnMappings(clojure.lang.IPersistentMap)>
<clojure.core$update_proxy: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.core.server$remote_prepl: java.lang.Object doInvoke(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.walk$macroexpand_all: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.walk$prewalk: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>
<clojure.walk$macroexpand_all: java.lang.Object invoke(java.lang.Object)>
<clojure.core$defrecord: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,clojure.lang.ISeq)>
<clojure.core$str: java.lang.Object invokeStatic(java.lang.Object,clojure.lang.ISeq)>
<clojure.core$build_positional_factory: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.core$emit_defrecord: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.core$vec: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.core$validate_fields: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>
<clojure.core$namespace_munge: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.core$parse_opts_PLUS_specs: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.lang.RT: java.lang.Object nth(java.lang.Object,int,java.lang.Object)>
<clojure.core$vector: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,clojure.lang.ISeq)>
<clojure.core$cons__5453: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>
<clojure.lang.LazilyPersistentVector: clojure.lang.IPersistentVector create(java.lang.Object)>
<clojure.lang.ASeq: java.lang.Object[] toArray(java.lang.Object[])>
<clojure.lang.RT: java.lang.Object[] seqToPassedArray(clojure.lang.ISeq,java.lang.Object[])>
<clojure.core$vector: java.lang.Object doInvoke(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.core$generate_class$to_types__7651: java.lang.Object invoke(java.lang.Object)>
<clojure.lang.RT: int count(java.lang.Object)>
<clojure.core$assert: java.lang.Object invoke(java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.lang.ASeq: java.lang.Object get(int)>
<clojure.lang.RT: java.lang.Object nth(java.lang.Object,int)>
<clojure.core$map: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,clojure.lang.ISeq)>
<clojure.core$conj__5467: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,clojure.lang.ISeq)>
<clojure.core$amap: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.core$map: java.lang.Object doInvoke(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.test$testing_vars_str: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.lang.RT: java.lang.Object get(java.lang.Object,java.lang.Object)>
<clojure.core$reverse: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.test$testing_vars_str: java.lang.Object invoke(java.lang.Object)>
<clojure.repl.deps$sync_deps: java.lang.Object invokeStatic(clojure.lang.ISeq)>
<clojure.core$last__5505: java.lang.Object invoke(java.lang.Object)>
<clojure.core$push_thread_bindings: java.lang.Object invoke(java.lang.Object)>
<clojure.core$parse_boolean: java.lang.Object invoke(java.lang.Object)>
<clojure.core$boolean__inliner__5774: java.lang.Object invoke(java.lang.Object)>
<clojure.test$fn__9804: java.lang.Object invoke(java.lang.Object)>
<clojure.pprint$process_nesting: java.lang.Object invoke(java.lang.Object)>
<clojure.core$special_symbol_QMARK_: java.lang.Object invoke(java.lang.Object)>
<clojure.core$unchecked_negate__inliner__5670: java.lang.Object invoke(java.lang.Object)>
<clojure.pprint$process_directive_table_element: java.lang.Object invoke(java.lang.Object)>
<clojure.core$to_array: java.lang.Object invoke(java.lang.Object)>
<clojure.test$run_all_tests: java.lang.Object invoke(java.lang.Object)>
<clojure.inspector$inspect: java.lang.Object invoke(java.lang.Object)>
<clojure.test.tap$print_tap_pass: java.lang.Object invoke(java.lang.Object)>
<clojure.pprint$pprint_simple_list: java.lang.Object invoke(java.lang.Object)>
<clojure.pprint$pprint_vector: java.lang.Object invoke(java.lang.Object)>
<clojure.core$munge: java.lang.Object invoke(java.lang.Object)>
<clojure.java.io$as_relative_path: java.lang.Object invoke(java.lang.Object)>
<clojure.core$pr: java.lang.Object invoke(java.lang.Object)>
<clojure.core$_reset_methods: java.lang.Object invoke(java.lang.Object)>
<clojure.math$tan__inliner__12473: java.lang.Object invoke(java.lang.Object)>
<clojure.repl$set_break_handler_BANG_: java.lang.Object invoke(java.lang.Object)>
<clojure.core$shorts__6625: java.lang.Object invoke(java.lang.Object)>
<clojure.core$deref: java.lang.Object invoke(java.lang.Object)>
<clojure.reflect$internal_name__GT_class_symbol: java.lang.Object invoke(java.lang.Object)>
<clojure.core$int_array: java.lang.Object invoke(java.lang.Object)>
<clojure.core$str: java.lang.Object invoke(java.lang.Object)>
<clojure.core$await1: java.lang.Object invoke(java.lang.Object)>
<clojure.core$count__inliner__5598: java.lang.Object invoke(java.lang.Object)>
<clojure.data$as_set_value: java.lang.Object invoke(java.lang.Object)>
<clojure.test$fn__9794: java.lang.Object invoke(java.lang.Object)>
<clojure.java.io$encoding: java.lang.Object invoke(java.lang.Object)>
<clojure.pprint$pprint_ns: java.lang.Object invoke(java.lang.Object)>
<clojure.test$function_QMARK_: java.lang.Object invoke(java.lang.Object)>
<clojure.reflect$declared_methods: java.lang.Object invoke(java.lang.Object)>
<clojure.java.browse$browse_url: java.lang.Object invoke(java.lang.Object)>
<clojure.test.tap$fn__9961: java.lang.Object invoke(java.lang.Object)>
<clojure.math$acos__inliner__12479: java.lang.Object invoke(java.lang.Object)>
<clojure.core$dedupe: java.lang.Object invoke(java.lang.Object)>
<clojure.core$rest__5465: java.lang.Object invoke(java.lang.Object)>
<clojure.pprint$get_section: java.lang.Object invoke(java.lang.Object)>
<clojure.core$booleans__6604: java.lang.Object invoke(java.lang.Object)>
<clojure.core$inst_QMARK_: java.lang.Object invoke(java.lang.Object)>
<clojure.lang.APersistentSet: java.lang.Object invoke(java.lang.Object)>
<clojure.core$ns_imports: java.lang.Object invoke(java.lang.Object)>
<clojure.java.io$fn__11539: java.lang.Object invoke(java.lang.Object)>
<clojure.lang.FnLoaderThunk: java.lang.Object invoke(java.lang.Object)>
<clojure.pprint$add_core_ns: java.lang.Object invoke(java.lang.Object)>
<clojure.string$re_quote_replacement: java.lang.Object invoke(java.lang.Object)>
<clojure.zip$vector_zip: java.lang.Object invoke(java.lang.Object)>
<clojure.test.junit$fn__10034: java.lang.Object invoke(java.lang.Object)>
<clojure.pprint$pprint: java.lang.Object invoke(java.lang.Object)>
<clojure.core$eval: java.lang.Object invoke(java.lang.Object)>
<clojure.core$short_array: java.lang.Object invoke(java.lang.Object)>
<clojure.walk$prewalk_demo: java.lang.Object invoke(java.lang.Object)>
<clojure.xml$emit: java.lang.Object invoke(java.lang.Object)>
<clojure.math$negate_exact__inliner__12545: java.lang.Object invoke(java.lang.Object)>
<clojure.pprint$init_navigator: java.lang.Object invoke(java.lang.Object)>
<clojure.instant$read_instant_calendar: java.lang.Object invoke(java.lang.Object)>
<clojure.java.process$io_task: java.lang.Object invoke(java.lang.Object)>
<clojure.core$doubles__6646: java.lang.Object invoke(java.lang.Object)>
<clojure.core.server$start_servers: java.lang.Object invoke(java.lang.Object)>
<clojure.test.tap$fn__9959: java.lang.Object invoke(java.lang.Object)>
<clojure.reflect$field_descriptor__GT_class_symbol: java.lang.Object invoke(java.lang.Object)>
<clojure.core$nil_QMARK___inliner__5521: java.lang.Object invoke(java.lang.Object)>
<clojure.math$cbrt__inliner__12503: java.lang.Object invoke(java.lang.Object)>
<clojure.zip$xml_zip: java.lang.Object invoke(java.lang.Object)>
<clojure.core$float__inliner__6136: java.lang.Object invoke(java.lang.Object)>
<clojure.core$sigs: java.lang.Object invoke(java.lang.Object)>
<clojure.core$create_ns: java.lang.Object invoke(java.lang.Object)>
<clojure.core$set: java.lang.Object invoke(java.lang.Object)>
<clojure.core$object_array__inliner__6590: java.lang.Object invoke(java.lang.Object)>
<clojure.core$num__inliner__6130: java.lang.Object invoke(java.lang.Object)>
<clojure.core$destructure: java.lang.Object invoke(java.lang.Object)>
<clojure.core$rand_nth: java.lang.Object invoke(java.lang.Object)>
<clojure.core$update: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.math$log1p__inliner__12575: java.lang.Object invoke(java.lang.Object)>
<clojure.core$supers: java.lang.Object invoke(java.lang.Object)>
<clojure.pprint$format_simple_ordinal: java.lang.Object invoke(java.lang.Object)>
<clojure.core$frequencies: java.lang.Object invoke(java.lang.Object)>
<clojure.core$clear_agent_errors: java.lang.Object invoke(java.lang.Object)>
<clojure.core$hash_ordered_coll: java.lang.Object invoke(java.lang.Object)>
<clojure.reflect$constructor__GT_map: java.lang.Object invoke(java.lang.Object)>
<clojure.core$alength__inliner__6220: java.lang.Object invoke(java.lang.Object)>
<clojure.stacktrace$print_throwable: java.lang.Object invoke(java.lang.Object)>
<clojure.tools.deps.interop$invoke_tool: java.lang.Object invoke(java.lang.Object)>
<clojure.core$root_directory: java.lang.Object invoke(java.lang.Object)>
<clojure.test.tap$fn__9955: java.lang.Object invoke(java.lang.Object)>
<clojure.pprint$nl_t_QMARK_: java.lang.Object invoke(java.lang.Object)>
<clojure.inspector$fn__9640: java.lang.Object invoke(java.lang.Object)>
<clojure.datafy$sortmap: java.lang.Object invoke(java.lang.Object)>
<clojure.math$log__inliner__12494: java.lang.Object invoke(java.lang.Object)>
<clojure.core$int__inliner__5601: java.lang.Object invoke(java.lang.Object)>
<clojure.repl$stack_element_str: java.lang.Object invoke(java.lang.Object)>
<clojure.test.tap$fn__9949: java.lang.Object invoke(java.lang.Object)>
<clojure.pprint$pprint_simple_code_list: java.lang.Object invoke(java.lang.Object)>
<clojure.core$unchecked_short__inliner__6154: java.lang.Object invoke(java.lang.Object)>
<clojure.pprint$pprint_let: java.lang.Object invoke(java.lang.Object)>
<clojure.core$longs__6653: java.lang.Object invoke(java.lang.Object)>
<clojure.core$rseq: java.lang.Object invoke(java.lang.Object)>
<clojure.pprint$write_line: java.lang.Object invoke(java.lang.Object)>
<clojure.core$bound_fn_STAR_: java.lang.Object invoke(java.lang.Object)>
<clojure.pprint$get_pretty_writer: java.lang.Object invoke(java.lang.Object)>
<clojure.core$rand_int: java.lang.Object invoke(java.lang.Object)>
<clojure.core$Throwable__GT_map: java.lang.Object invoke(java.lang.Object)>
<clojure.core$find_var: java.lang.Object invoke(java.lang.Object)>
<clojure.math$signum__inliner__12557: java.lang.Object invoke(java.lang.Object)>
<clojure.java.io$file: java.lang.Object invoke(java.lang.Object)>
<clojure.string$upper_case: java.lang.Object invoke(java.lang.Object)>
<clojure.pprint$pr_with_base: java.lang.Object invoke(java.lang.Object)>
<clojure.core.reducers$flatten: java.lang.Object invoke(java.lang.Object)>
<clojure.core$find_ns: java.lang.Object invoke(java.lang.Object)>
<clojure.math$expm1__inliner__12572: java.lang.Object invoke(java.lang.Object)>
<clojure.math$increment_exact: java.lang.Object invoke(java.lang.Object)>
<clojure.core$byte: java.lang.Object invoke(java.lang.Object)>
<clojure.math$get_exponent__inliner__12581: java.lang.Object invoke(java.lang.Object)>
<clojure.datafy$fn__12143: java.lang.Object invoke(java.lang.Object)>
<clojure.core$seq_to_map_for_destructuring: java.lang.Object invoke(java.lang.Object)>
<clojure.zip$left: java.lang.Object invoke(java.lang.Object)>
<clojure.test$join_fixtures: java.lang.Object invoke(java.lang.Object)>
<clojure.zip$up: java.lang.Object invoke(java.lang.Object)>
<clojure.java.javadoc$add_local_javadoc: java.lang.Object invoke(java.lang.Object)>
<clojure.core$vector_of: java.lang.Object invoke(java.lang.Object)>
<clojure.pprint$unzip_map: java.lang.Object invoke(java.lang.Object)>
<clojure.core$float_array: java.lang.Object invoke(java.lang.Object)>
<clojure.lang.AFn: java.lang.Object invoke(java.lang.Object)>
<clojure.math$decrement_exact__inliner__12542: java.lang.Object invoke(java.lang.Object)>
<clojure.core$partitionv_all: java.lang.Object invoke(java.lang.Object)>
<clojure.pprint$pprint_code_list: java.lang.Object invoke(java.lang.Object)>
<clojure.core$char_array: java.lang.Object invoke(java.lang.Object)>
<clojure.core$trampoline: java.lang.Object invoke(java.lang.Object)>
<clojure.reflect$fn__12148: java.lang.Object invoke(java.lang.Object)>
<clojure.core$partition_all: java.lang.Object invoke(java.lang.Object)>
<clojure.test$fn__9798: java.lang.Object invoke(java.lang.Object)>
<clojure.instant$read_instant_timestamp: java.lang.Object invoke(java.lang.Object)>
<clojure.reflect$declared_fields: java.lang.Object invoke(java.lang.Object)>
<clojure.core$reduced_QMARK___inliner__5981: java.lang.Object invoke(java.lang.Object)>
<clojure.core$extenders: java.lang.Object invoke(java.lang.Object)>
<clojure.core$next__5463: java.lang.Object invoke(java.lang.Object)>
<clojure.edn$read_string: java.lang.Object invoke(java.lang.Object)>
<clojure.core$abs__inliner__5646: java.lang.Object invoke(java.lang.Object)>
<clojure.core$cycle: java.lang.Object invoke(java.lang.Object)>
<clojure.math$round__inliner__12524: java.lang.Object invoke(java.lang.Object)>
<clojure.xml$parse: java.lang.Object invoke(java.lang.Object)>
<clojure.core$chunk_next: java.lang.Object invoke(java.lang.Object)>
<clojure.core.reducers$fjinvoke: java.lang.Object invoke(java.lang.Object)>
<clojure.core$ffirst__5471: java.lang.Object invoke(java.lang.Object)>
<clojure.math$next_up__inliner__12587: java.lang.Object invoke(java.lang.Object)>
<clojure.core$dec_SINGLEQUOTE___inliner__5649: java.lang.Object invoke(java.lang.Object)>
<clojure.core$libspec_QMARK_: java.lang.Object invoke(java.lang.Object)>
<clojure.core$maybe_min_hash: java.lang.Object invoke(java.lang.Object)>
<clojure.core$NaN_QMARK___inliner__8981: java.lang.Object invoke(java.lang.Object)>
<clojure.pprint$buffer_length: java.lang.Object invoke(java.lang.Object)>
<clojure.pprint$map_ref_type: java.lang.Object invoke(java.lang.Object)>
<clojure.core.proxy$clojure.lang.APersistentMap$ff19274a: java.lang.Object invoke(java.lang.Object)>
<clojure.reflect$resource_name: java.lang.Object invoke(java.lang.Object)>
<clojure.core$descendants: java.lang.Object invoke(java.lang.Object)>
<clojure.pprint$separator_QMARK_: java.lang.Object invoke(java.lang.Object)>
<clojure.core$get_super_and_interfaces: java.lang.Object invoke(java.lang.Object)>
<clojure.repl$print_doc: java.lang.Object invoke(java.lang.Object)>
<clojure.pprint$float_parts_base: java.lang.Object invoke(java.lang.Object)>
<clojure.pprint$end_block: java.lang.Object invoke(java.lang.Object)>
<clojure.math$rint__inliner__12515: java.lang.Object invoke(java.lang.Object)>
<clojure.core$byte__inliner__6145: java.lang.Object invoke(java.lang.Object)>
<clojure.lang.RestFn: java.lang.Object invoke(java.lang.Object)>
<clojure.core$data_reader_var: java.lang.Object invoke(java.lang.Object)>
<clojure.test$default_fixture: java.lang.Object invoke(java.lang.Object)>
<clojure.core$ns_refers: java.lang.Object invoke(java.lang.Object)>
<clojure.core$unchecked_long__inliner__6163: java.lang.Object invoke(java.lang.Object)>
<clojure.pprint$pprint_anon_func: java.lang.Object invoke(java.lang.Object)>
<clojure.core.server$resolve_fn: java.lang.Object invoke(java.lang.Object)>
<clojure.math$sin__inliner__12467: java.lang.Object invoke(java.lang.Object)>
<clojure.core$unchecked_byte__inliner__6151: java.lang.Object invoke(java.lang.Object)>
<clojure.core$ns_map: java.lang.Object invoke(java.lang.Object)>
<clojure.test.junit$fn__10032: java.lang.Object invoke(java.lang.Object)>
<clojure.pprint$pprint_ns_reference: java.lang.Object invoke(java.lang.Object)>
<clojure.core$ns_name: java.lang.Object invoke(java.lang.Object)>
<clojure.core$line_seq: java.lang.Object invoke(java.lang.Object)>
<clojure.pprint$pprint_condp: java.lang.Object invoke(java.lang.Object)>
<clojure.pprint$get_column: java.lang.Object invoke(java.lang.Object)>
<clojure.core$fits_table_QMARK_: java.lang.Object invoke(java.lang.Object)>
<clojure.core$ns_interns: java.lang.Object invoke(java.lang.Object)>
<clojure.core$vals: java.lang.Object invoke(java.lang.Object)>
<clojure.pprint$split_at_newline: java.lang.Object invoke(java.lang.Object)>
<clojure.core$vec: java.lang.Object invoke(java.lang.Object)>
<clojure.repl$special_doc: java.lang.Object invoke(java.lang.Object)>
<clojure.test$do_report: java.lang.Object invoke(java.lang.Object)>
<clojure.core$inc__inliner__5613: java.lang.Object invoke(java.lang.Object)>
<clojure.core$macroexpand: java.lang.Object invoke(java.lang.Object)>
<clojure.core$sequence: java.lang.Object invoke(java.lang.Object)>
<clojure.core$bigint: java.lang.Object invoke(java.lang.Object)>
<clojure.zip$down: java.lang.Object invoke(java.lang.Object)>
<clojure.core$requiring_resolve: java.lang.Object invoke(java.lang.Object)>
<clojure.lang.Keyword: java.lang.Object invoke(java.lang.Object)>
<clojure.core.server$stop_server: java.lang.Object invoke(java.lang.Object)>
<clojure.core$add_classpath: java.lang.Object invoke(java.lang.Object)>
<clojure.test$file_position: java.lang.Object invoke(java.lang.Object)>
<clojure.java.io$escaped_utf8_urlstring__GT_str: java.lang.Object invoke(java.lang.Object)>
<clojure.inspector$list_model: java.lang.Object invoke(java.lang.Object)>
<clojure.pprint$pprint_code_symbol: java.lang.Object invoke(java.lang.Object)>
<clojure.pprint$downcase_writer: java.lang.Object invoke(java.lang.Object)>
<clojure.pprint$end_block_t_QMARK_: java.lang.Object invoke(java.lang.Object)>
<clojure.core$asm_type: java.lang.Object invoke(java.lang.Object)>
<clojure.core.reducers$foldcat: java.lang.Object invoke(java.lang.Object)>
<clojure.pprint$update_nl_state: java.lang.Object invoke(java.lang.Object)>
<clojure.pprint$translate_param: java.lang.Object invoke(java.lang.Object)>
<clojure.core$empty_QMARK_: java.lang.Object invoke(java.lang.Object)>
<clojure.core$unchecked_double__inliner__6169: java.lang.Object invoke(java.lang.Object)>
<clojure.core$parsing_err: java.lang.Object invoke(java.lang.Object)>
<clojure.pprint$print_table: java.lang.Object invoke(java.lang.Object)>
<clojure.core$not_empty: java.lang.Object invoke(java.lang.Object)>
<clojure.core$into_array: java.lang.Object invoke(java.lang.Object)>
<clojure.datafy$fn__12137: java.lang.Object invoke(java.lang.Object)>
<clojure.pprint$upcase_writer: java.lang.Object invoke(java.lang.Object)>
<clojure.reflect$access_flag: java.lang.Object invoke(java.lang.Object)>
<clojure.core$seq__5479: java.lang.Object invoke(java.lang.Object)>
<clojure.test$fn__9796: java.lang.Object invoke(java.lang.Object)>
<clojure.core$dorun: java.lang.Object invoke(java.lang.Object)>
<clojure.repl$demunge: java.lang.Object invoke(java.lang.Object)>
<clojure.core$sort: java.lang.Object invoke(java.lang.Object)>
<clojure.core$butlast__5507: java.lang.Object invoke(java.lang.Object)>
<clojure.zip$end_QMARK_: java.lang.Object invoke(java.lang.Object)>
<clojure.core$root_resource: java.lang.Object invoke(java.lang.Object)>
<clojure.test.tap$print_tap_plan: java.lang.Object invoke(java.lang.Object)>
<clojure.core$byte_array: java.lang.Object invoke(java.lang.Object)>
<clojure.pprint$pprint_list: java.lang.Object invoke(java.lang.Object)>
<clojure.test$inc_report_counter: java.lang.Object invoke(java.lang.Object)>
<clojure.edn$read: java.lang.Object invoke(java.lang.Object)>
<clojure.core$ancestors: java.lang.Object invoke(java.lang.Object)>
<clojure.core$ns_publics: java.lang.Object invoke(java.lang.Object)>
<clojure.core$empty: java.lang.Object invoke(java.lang.Object)>
<clojure.test.junit$fn__10024: java.lang.Object invoke(java.lang.Object)>
<clojure.core$read_string: java.lang.Object invoke(java.lang.Object)>
<clojure.pprint$pprint_defn: java.lang.Object invoke(java.lang.Object)>
<clojure.java.basis.impl$read_basis: java.lang.Object invoke(java.lang.Object)>
<clojure.core$bit_not: java.lang.Object invoke(java.lang.Object)>
<clojure.pprint$indent_t_QMARK_: java.lang.Object invoke(java.lang.Object)>
<clojure.stacktrace$print_trace_element: java.lang.Object invoke(java.lang.Object)>
<clojure.math$floor__inliner__12512: java.lang.Object invoke(java.lang.Object)>
<clojure.core.server$parse_props: java.lang.Object invoke(java.lang.Object)>
<clojure.inspector$old_table_model: java.lang.Object invoke(java.lang.Object)>
<clojure.core$nnext__5477: java.lang.Object invoke(java.lang.Object)>
<clojure.test.junit$fn__10022: java.lang.Object invoke(java.lang.Object)>
<clojure.core$parse_opts: java.lang.Object invoke(java.lang.Object)>
<clojure.core$bytes__6611: java.lang.Object invoke(java.lang.Object)>
<clojure.core$method_sig: java.lang.Object invoke(java.lang.Object)>
<clojure.zip$next: java.lang.Object invoke(java.lang.Object)>
<clojure.pprint$next_arg: java.lang.Object invoke(java.lang.Object)>
<clojure.core$ints__6639: java.lang.Object invoke(java.lang.Object)>
<clojure.zip$lefts: java.lang.Object invoke(java.lang.Object)>
<clojure.core$object_array: java.lang.Object invoke(java.lang.Object)>
<clojure.pprint$fn__10296: java.lang.Object invoke(java.lang.Object)>
<clojure.math$sqrt__inliner__12500: java.lang.Object invoke(java.lang.Object)>
<clojure.repl$namespace_doc: java.lang.Object invoke(java.lang.Object)>
<clojure.walk$postwalk_demo: java.lang.Object invoke(java.lang.Object)>
<clojure.core$char__inliner__6148: java.lang.Object invoke(java.lang.Object)>
<clojure.stacktrace$print_cause_trace: java.lang.Object invoke(java.lang.Object)>
<clojure.java.shell$stream_to_bytes: java.lang.Object invoke(java.lang.Object)>
<clojure.java.browse$open_url_in_swing: java.lang.Object invoke(java.lang.Object)>
<clojure.core$long_array: java.lang.Object invoke(java.lang.Object)>
<clojure.pprint$write_out: java.lang.Object invoke(java.lang.Object)>
<clojure.core$fnext__5475: java.lang.Object invoke(java.lang.Object)>
<clojure.core$unchecked_inc_int__inliner__5655: java.lang.Object invoke(java.lang.Object)>
<clojure.core$hash: java.lang.Object invoke(java.lang.Object)>
<clojure.inspector$inspect_table: java.lang.Object invoke(java.lang.Object)>
<clojure.test.tap$print_diagnostics: java.lang.Object invoke(java.lang.Object)>
<clojure.test$test_vars: java.lang.Object invoke(java.lang.Object)>
<clojure.inspector$fn__9646: java.lang.Object invoke(java.lang.Object)>
<clojure.math$decrement_exact: java.lang.Object invoke(java.lang.Object)>
<clojure.zip$rightmost: java.lang.Object invoke(java.lang.Object)>
<clojure.test$test_var: java.lang.Object invoke(java.lang.Object)>
<clojure.core$super_chain: java.lang.Object invoke(java.lang.Object)>
<clojure.core$seque: java.lang.Object invoke(java.lang.Object)>
<clojure.walk$stringify_keys: java.lang.Object invoke(java.lang.Object)>
<clojure.core$find_keyword: java.lang.Object invoke(java.lang.Object)>
<clojure.zip$root: java.lang.Object invoke(java.lang.Object)>
<clojure.java.process$from_file: java.lang.Object invoke(java.lang.Object)>
<clojure.core$agent_errors: java.lang.Object invoke(java.lang.Object)>
<clojure.core$most_specific: java.lang.Object invoke(java.lang.Object)>
<clojure.pprint$column_writer: java.lang.Object invoke(java.lang.Object)>
<clojure.repl$apropos: java.lang.Object invoke(java.lang.Object)>
<clojure.core$bases: java.lang.Object invoke(java.lang.Object)>
<clojure.repl.deps$add_libs: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.zip$prev: java.lang.Object invoke(java.lang.Object)>
<clojure.repl.deps$add_libs: java.lang.Object invoke(java.lang.Object)>
<clojure.core$double_array: java.lang.Object invoke(java.lang.Object)>
<clojure.core$even_QMARK_: java.lang.Object invoke(java.lang.Object)>
<clojure.math$tanh__inliner__12566: java.lang.Object invoke(java.lang.Object)>
<clojure.string$join: java.lang.Object invoke(java.lang.Object)>
<clojure.core$bigdec: java.lang.Object invoke(java.lang.Object)>
<clojure.pprint$pprint_reader_macro: java.lang.Object invoke(java.lang.Object)>
<clojure.pprint$start_block_t_QMARK_: java.lang.Object invoke(java.lang.Object)>
<clojure.reflect$method__GT_map: java.lang.Object invoke(java.lang.Object)>
<clojure.core$biginteger: java.lang.Object invoke(java.lang.Object)>
<clojure.inspector$fn__9582: java.lang.Object invoke(java.lang.Object)>
<clojure.pprint$else_separator_QMARK_: java.lang.Object invoke(java.lang.Object)>
<clojure.core$long: java.lang.Object invoke(java.lang.Object)>
<clojure.pprint$write_buffered_output: java.lang.Object invoke(java.lang.Object)>
<clojure.core$type: java.lang.Object invoke(java.lang.Object)>
<clojure.pprint$extract_param: java.lang.Object invoke(java.lang.Object)>
<clojure.java.javadoc$javadoc_url: java.lang.Object invoke(java.lang.Object)>
<clojure.test$run_test_var: java.lang.Object invoke(java.lang.Object)>
<clojure.java.process$ok_QMARK_: java.lang.Object invoke(java.lang.Object)>
<clojure.core$unchecked_char__inliner__6157: java.lang.Object invoke(java.lang.Object)>
<clojure.core$normalize_slurp_opts: java.lang.Object invoke(java.lang.Object)>
<clojure.pprint$convert_ratio: java.lang.Object invoke(java.lang.Object)>
<clojure.reflect$typesym: java.lang.Object invoke(java.lang.Object)>
<clojure.core$boolean_array: java.lang.Object invoke(java.lang.Object)>
<clojure.core$double__inliner__6139: java.lang.Object invoke(java.lang.Object)>
<clojure.core$parse_long: java.lang.Object invoke(java.lang.Object)>
<clojure.java.browse_ui$open_url_in_swing: java.lang.Object invoke(java.lang.Object)>
<clojure.core$the_ns: java.lang.Object invoke(java.lang.Object)>
<clojure.math$exp__inliner__12491: java.lang.Object invoke(java.lang.Object)>
<clojure.math$increment_exact__inliner__12539: java.lang.Object invoke(java.lang.Object)>
<clojure.core$unchecked_dec_int__inliner__5661: java.lang.Object invoke(java.lang.Object)>
<clojure.test$fn__9801: java.lang.Object invoke(java.lang.Object)>
<clojure.math$negate_exact: java.lang.Object invoke(java.lang.Object)>
<clojure.pprint$pprint_ideref: java.lang.Object invoke(java.lang.Object)>
<clojure.datafy$fn__12139: java.lang.Object invoke(java.lang.Object)>
<clojure.pprint$pretty_writer_QMARK_: java.lang.Object invoke(java.lang.Object)>
<clojure.math$atan__inliner__12482: java.lang.Object invoke(java.lang.Object)>
<clojure.test.junit$escape_xml: java.lang.Object invoke(java.lang.Object)>
<clojure.core$odd_QMARK_: java.lang.Object invoke(java.lang.Object)>
<clojure.zip$right: java.lang.Object invoke(java.lang.Object)>
<clojure.core$pos_QMARK___inliner__5697: java.lang.Object invoke(java.lang.Object)>
<clojure.test.tap$fn__9957: java.lang.Object invoke(java.lang.Object)>
<clojure.core$bean: java.lang.Object invoke(java.lang.Object)>
<clojure.pprint$get_line: java.lang.Object invoke(java.lang.Object)>
<clojure.core$unchecked_int__inliner__6160: java.lang.Object invoke(java.lang.Object)>
<clojure.inspector$tree_model: java.lang.Object invoke(java.lang.Object)>
<clojure.core$int: java.lang.Object invoke(java.lang.Object)>
<clojure.datafy$datafy: java.lang.Object invoke(java.lang.Object)>
<clojure.pprint$next_arg_or_nil: java.lang.Object invoke(java.lang.Object)>
<clojure.pprint$needs_pretty: java.lang.Object invoke(java.lang.Object)>
<clojure.java.io$append_QMARK_: java.lang.Object invoke(java.lang.Object)>
<clojure.string$lower_case: java.lang.Object invoke(java.lang.Object)>
<clojure.core$floats__6632: java.lang.Object invoke(java.lang.Object)>
<clojure.core$nfirst__5473: java.lang.Object invoke(java.lang.Object)>
<clojure.core$parse_impls: java.lang.Object invoke(java.lang.Object)>
<clojure.core$flatten: java.lang.Object invoke(java.lang.Object)>
<clojure.core$ns_aliases: java.lang.Object invoke(java.lang.Object)>
<clojure.reflect$field__GT_map: java.lang.Object invoke(java.lang.Object)>
<clojure.core$keys: java.lang.Object invoke(java.lang.Object)>
<clojure.core$range: java.lang.Object invoke(java.lang.Object)>
<clojure.lang.Symbol: java.lang.Object invoke(java.lang.Object)>
<clojure.pprint$pprint_simple_default: java.lang.Object invoke(java.lang.Object)>
<clojure.zip$remove: java.lang.Object invoke(java.lang.Object)>
<clojure.pprint$get_sub_section: java.lang.Object invoke(java.lang.Object)>
<clojure.pprint$buffer_blob_QMARK_: java.lang.Object invoke(java.lang.Object)>
<clojure.test.junit$test_name: java.lang.Object invoke(java.lang.Object)>
<clojure.test$test_all_vars: java.lang.Object invoke(java.lang.Object)>
<clojure.core$re_find: java.lang.Object invoke(java.lang.Object)>
<clojure.test.tap$print_tap_fail: java.lang.Object invoke(java.lang.Object)>
<clojure.core$non_private_methods: java.lang.Object invoke(java.lang.Object)>
<clojure.core$first__5461: java.lang.Object invoke(java.lang.Object)>
<clojure.core$infinite_QMARK___inliner__8984: java.lang.Object invoke(java.lang.Object)>
<clojure.core$short: java.lang.Object invoke(java.lang.Object)>
<clojure.core$compile: java.lang.Object invoke(java.lang.Object)>
<clojure.math$cosh__inliner__12563: java.lang.Object invoke(java.lang.Object)>
<clojure.pprint$right_bracket: java.lang.Object invoke(java.lang.Object)>
<clojure.core$chars__6618: java.lang.Object invoke(java.lang.Object)>
<clojure.core$aclone__inliner__6223: java.lang.Object invoke(java.lang.Object)>
<clojure.zip$children: java.lang.Object invoke(java.lang.Object)>
<clojure.core$hash_unordered_coll: java.lang.Object invoke(java.lang.Object)>
<clojure.pprint$get_miser_width: java.lang.Object invoke(java.lang.Object)>
<clojure.test.junit$element_content: java.lang.Object invoke(java.lang.Object)>
<clojure.core$lift_ns: java.lang.Object invoke(java.lang.Object)>
<clojure.core$re_groups: java.lang.Object invoke(java.lang.Object)>
<clojure.pprint$pprint_map: java.lang.Object invoke(java.lang.Object)>
<clojure.test.tap$print_tap_diagnostic: java.lang.Object invoke(java.lang.Object)>
<clojure.java.shell$parse_args: java.lang.Object invoke(java.lang.Object)>
<clojure.core$protected_final_methods: java.lang.Object invoke(java.lang.Object)>
<clojure.test.junit$fn__10028: java.lang.Object invoke(java.lang.Object)>
<clojure.pprint$get_writer: java.lang.Object invoke(java.lang.Object)>
<clojure.java.browse$open_url_in_browser: java.lang.Object invoke(java.lang.Object)>
<clojure.core$is_runtime_annotation_QMARK_: java.lang.Object invoke(java.lang.Object)>
<clojure.walk$keywordize_keys: java.lang.Object invoke(java.lang.Object)>
<clojure.reflect$fn__12146: java.lang.Object invoke(java.lang.Object)>
<clojure.core$alength: java.lang.Object invoke(java.lang.Object)>
<clojure.core$chunk_buffer: java.lang.Object invoke(java.lang.Object)>
<clojure.core$neg_QMARK___inliner__5700: java.lang.Object invoke(java.lang.Object)>
<clojure.set$map_invert: java.lang.Object invoke(java.lang.Object)>
<clojure.core$macroexpand_1: java.lang.Object invoke(java.lang.Object)>
<clojure.repl.deps$add_lib: java.lang.Object invoke(java.lang.Object)>
<clojure.core$unchecked_negate_int: java.lang.Object invoke(java.lang.Object)>
<clojure.zip$path: java.lang.Object invoke(java.lang.Object)>
<clojure.repl$find_doc: java.lang.Object invoke(java.lang.Object)>
<clojure.math$sinh__inliner__12560: java.lang.Object invoke(java.lang.Object)>
<clojure.pprint$pprint_cond: java.lang.Object invoke(java.lang.Object)>
<clojure.zip$branch_QMARK_: java.lang.Object invoke(java.lang.Object)>
<clojure.core$valid_java_method_name: java.lang.Object invoke(java.lang.Object)>
<clojure.datafy$fn__12141: java.lang.Object invoke(java.lang.Object)>
<clojure.core$test: java.lang.Object invoke(java.lang.Object)>
<clojure.instant$read_instant_date: java.lang.Object invoke(java.lang.Object)>
<clojure.reflect$declared_constructors: java.lang.Object invoke(java.lang.Object)>
<clojure.core$list_STAR_: java.lang.Object invoke(java.lang.Object)>
<clojure.core$parents: java.lang.Object invoke(java.lang.Object)>
<clojure.pprint$two_forms: java.lang.Object invoke(java.lang.Object)>
<clojure.inspector$fn__9652: java.lang.Object invoke(java.lang.Object)>
<clojure.core$group_by_sig: java.lang.Object invoke(java.lang.Object)>
<clojure.core$unchecked_inc_int: java.lang.Object invoke(java.lang.Object)>
<clojure.core$unchecked_inc__inliner__5658: java.lang.Object invoke(java.lang.Object)>
<clojure.java.shell$as_env_strings: java.lang.Object invoke(java.lang.Object)>
<clojure.core$bit_not__inliner__5710: java.lang.Object invoke(java.lang.Object)>
<clojure.pprint$pprint_binding_form: java.lang.Object invoke(java.lang.Object)>
<clojure.math$log10__inliner__12497: java.lang.Object invoke(java.lang.Object)>
<clojure.math$next_down__inliner__12590: java.lang.Object invoke(java.lang.Object)>
<clojure.pprint$pprint_newline: java.lang.Object invoke(java.lang.Object)>
<clojure.pprint$format_simple_cardinal: java.lang.Object invoke(java.lang.Object)>
<clojure.core$char: java.lang.Object invoke(java.lang.Object)>
<clojure.pprint$pprint_meta: java.lang.Object invoke(java.lang.Object)>
<clojure.java.shell$stream_to_string: java.lang.Object invoke(java.lang.Object)>
<clojure.java.io$buffer_size: java.lang.Object invoke(java.lang.Object)>
<clojure.math$ulp__inliner__12554: java.lang.Object invoke(java.lang.Object)>
<clojure.lang.APersistentMap: java.lang.Object invoke(java.lang.Object)>
<clojure.test.junit$fn__9969: java.lang.Object invoke(java.lang.Object)>
<clojure.core$load_string: java.lang.Object invoke(java.lang.Object)>
<clojure.zip$leftmost: java.lang.Object invoke(java.lang.Object)>
<clojure.test$fn__9806: java.lang.Object invoke(java.lang.Object)>
<clojure.repl$pst: java.lang.Object invoke(java.lang.Object)>
<clojure.core$second__5469: java.lang.Object invoke(java.lang.Object)>
<clojure.zip$rights: java.lang.Object invoke(java.lang.Object)>
<clojure.pprint$get_format_arg: java.lang.Object invoke(java.lang.Object)>
<clojure.pprint$capitalize_word_writer: java.lang.Object invoke(java.lang.Object)>
<clojure.core$spread: java.lang.Object invoke(java.lang.Object)>
<clojure.repl$dir_fn: java.lang.Object invoke(java.lang.Object)>
<clojure.test$test_ns: java.lang.Object invoke(java.lang.Object)>
<clojure.core$remove_ns: java.lang.Object invoke(java.lang.Object)>
<clojure.core$generate_interface: java.lang.Object invoke(java.lang.Object)>
<clojure.core$namespace_munge: java.lang.Object invoke(java.lang.Object)>
<clojure.core$zero_QMARK___inliner__5595: java.lang.Object invoke(java.lang.Object)>
<clojure.core$parse_opts_PLUS_specs: java.lang.Object invoke(java.lang.Object)>
<clojure.inspector$fn__9584: java.lang.Object invoke(java.lang.Object)>
<clojure.pprint$set_pprint_dispatch: java.lang.Object invoke(java.lang.Object)>
<clojure.test.junit$start_suite: java.lang.Object invoke(java.lang.Object)>
<clojure.pprint$format_simple_number: java.lang.Object invoke(java.lang.Object)>
<clojure.core$inc_SINGLEQUOTE___inliner__5610: java.lang.Object invoke(java.lang.Object)>
<clojure.pprint$fn__10292: java.lang.Object invoke(java.lang.Object)>
<clojure.pprint$compile_format: java.lang.Object invoke(java.lang.Object)>
<clojure.math$cos__inliner__12470: java.lang.Object invoke(java.lang.Object)>
<clojure.java.io$fn__11535: java.lang.Object invoke(java.lang.Object)>
<clojure.core$protocol_QMARK_: java.lang.Object invoke(java.lang.Object)>
<clojure.core$deref_as_map: java.lang.Object invoke(java.lang.Object)>
<clojure.inspector$fn__9588: java.lang.Object invoke(java.lang.Object)>
<clojure.core$unchecked_negate_int__inliner__5667: java.lang.Object invoke(java.lang.Object)>
<clojure.pprint$init_cap_writer: java.lang.Object invoke(java.lang.Object)>
<clojure.pprint$inc_s: java.lang.Object invoke(java.lang.Object)>
<clojure.core$drop_last: java.lang.Object invoke(java.lang.Object)>
<clojure.core$resolve: java.lang.Object invoke(java.lang.Object)>
<clojure.math$ceil__inliner__12509: java.lang.Object invoke(java.lang.Object)>
<clojure.core$unreduced: java.lang.Object invoke(java.lang.Object)>
<clojure.java.basis.impl$read_edn: java.lang.Object invoke(java.lang.Object)>
<clojure.pprint$float_parts: java.lang.Object invoke(java.lang.Object)>
<clojure.core$float: java.lang.Object invoke(java.lang.Object)>
<clojure.inspector$inspect_tree: java.lang.Object invoke(java.lang.Object)>
<clojure.zip$seq_zip: java.lang.Object invoke(java.lang.Object)>
<clojure.pprint$write_white_space: java.lang.Object invoke(java.lang.Object)>
<clojure.core$dec__inliner__5652: java.lang.Object invoke(java.lang.Object)>
<clojure.test.junit$fn__10026: java.lang.Object invoke(java.lang.Object)>
<clojure.pprint$fn__10294: java.lang.Object invoke(java.lang.Object)>
<clojure.inspector$fn__9594: java.lang.Object invoke(java.lang.Object)>
<clojure.zip$node: java.lang.Object invoke(java.lang.Object)>
<clojure.string$capitalize: java.lang.Object invoke(java.lang.Object)>
<clojure.core$unchecked_float__inliner__6166: java.lang.Object invoke(java.lang.Object)>
<clojure.lang.Var: java.lang.Object invoke(java.lang.Object)>
<clojure.core$doall: java.lang.Object invoke(java.lang.Object)>
<clojure.xml$emit_element: java.lang.Object invoke(java.lang.Object)>
<clojure.core$check_cyclic_dependency: java.lang.Object invoke(java.lang.Object)>
<clojure.data$vectorize: java.lang.Object invoke(java.lang.Object)>
<clojure.inspector$fn__9677: java.lang.Object invoke(java.lang.Object)>
<clojure.test$stacktrace_file_and_line: java.lang.Object invoke(java.lang.Object)>
<clojure.core$bytes_QMARK_: java.lang.Object invoke(java.lang.Object)>
<clojure.core$long__inliner__6133: java.lang.Object invoke(java.lang.Object)>
<clojure.lang.RT: clojure.lang.IPersistentMap mapUniqueKeys(java.lang.Object[])>
<clojure.core$assert_valid_fdecl: java.lang.Object invoke(java.lang.Object)>
<clojure.core$unchecked_dec__inliner__5664: java.lang.Object invoke(java.lang.Object)>
<clojure.core$inst_ms: java.lang.Object invoke(java.lang.Object)>
<clojure.core$strip_ns: java.lang.Object invoke(java.lang.Object)>
<clojure.test.junit$package_class: java.lang.Object invoke(java.lang.Object)>
<clojure.math$to_radians__inliner__12485: java.lang.Object invoke(java.lang.Object)>
<clojure.java.javadoc$javadoc: java.lang.Object invoke(java.lang.Object)>
<clojure.core.server$validate_opts: java.lang.Object invoke(java.lang.Object)>
<clojure.core$gensym: java.lang.Object invoke(java.lang.Object)>
<clojure.core$count: java.lang.Object invoke(java.lang.Object)>
<clojure.stacktrace$print_stack_trace: java.lang.Object invoke(java.lang.Object)>
<clojure.pprint$pprint_set: java.lang.Object invoke(java.lang.Object)>
<clojure.core$keyword: java.lang.Object invoke(java.lang.Object)>
<clojure.core$resultset_seq: java.lang.Object invoke(java.lang.Object)>
<clojure.core$validate_generate_class_options: java.lang.Object invoke(java.lang.Object)>
<clojure.math$to_degrees__inliner__12488: java.lang.Object invoke(java.lang.Object)>
<clojure.pprint$abort_QMARK_: java.lang.Object invoke(java.lang.Object)>
<clojure.reflect$parse_method_descriptor: java.lang.Object invoke(java.lang.Object)>
<clojure.core.server$start_server: java.lang.Object invoke(java.lang.Object)>
<clojure.core$reverse: java.lang.Object invoke(java.lang.Object)>
<clojure.core$short__inliner__6142: java.lang.Object invoke(java.lang.Object)>
<clojure.math$asin__inliner__12476: java.lang.Object invoke(java.lang.Object)>
<clojure.core$generate_class: java.lang.Object invoke(java.lang.Object)>
<clojure.core$unchecked_dec_int: java.lang.Object invoke(java.lang.Object)>
<clojure.core$load_reader: java.lang.Object invoke(java.lang.Object)>
<clojure.core$shuffle: java.lang.Object invoke(java.lang.Object)>
<clojure.core$emit_impl: java.lang.Object invoke(java.lang.Object)>
<clojure.core$peek: java.lang.Object invoke(java.lang.Object)>
<clojure.test$successful_QMARK_: java.lang.Object invoke(java.lang.Object)>
<clojure.core$to_array_2d: java.lang.Object invoke(java.lang.Object)>
<clojure.repl$source_fn: java.lang.Object invoke(java.lang.Object)>
<clojure.core$aclone: java.lang.Object invoke(java.lang.Object)>
<clojure.core$iterator_seq: java.lang.Object invoke(java.lang.Object)>
<clojure.test.junit$fn__10030: java.lang.Object invoke(java.lang.Object)>
<clojure.core$the_class: java.lang.Object invoke(java.lang.Object)>
<clojure.pprint$integral_QMARK_: java.lang.Object invoke(java.lang.Object)>
<clojure.java.basis$current_basis: java.lang.Object invokeStatic()>
<clojure.core$print_sequential: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.core$push_thread_bindings: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.core$hash_map: java.lang.Object invokeStatic(clojure.lang.ISeq)>
<clojure.core$print_prefix_map$fn__7428: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.core$last__5505: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.instant$construct_calendar: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.core$format: java.lang.Object invokeStatic(java.lang.Object,clojure.lang.ISeq)>
<clojure.core$fnil$fn__6981: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.walk$prewalk_replace: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.java.io$fn__11661: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.set$intersection: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.java.io$fn__11659: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.core$cons__5453: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.core$update_keys: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.core$fn__7403: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.test$fn__9830: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.core$replace: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.core$aget__inliner__6226: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.core$subs: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.instant$fn__8489: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.zip$replace: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.pprint$fn__10961: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.core$nth: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.core$int_array: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.core$fn__7493: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.core$bit_and: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.core$pmap: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.core$unchecked_subtract_int__inliner__5679: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.core$_LT___inliner__5607: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.core.protocols$fn__8246: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.core$sort_by: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.math$subtract_exact__inliner__12533: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.core$extends_QMARK_: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.core$unchecked_remainder_int__inliner__5694: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.pprint$realize_parameter: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.core$fn__7375: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.pprint$fn__10925: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.core$fn__7491: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.core$alias: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.core$read_PLUS_string: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.core$fn__7584: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.core$aget: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.lang.FnLoaderThunk: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.core$fn__7476: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.core$_GT__EQ___inliner__5638: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.set$rename: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.pprint$pprint: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.core$fn__7509: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.core$fn__7401: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.instant$fn__8476: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.core$short_array: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.core$fn__7383: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.java.io$fn__11647: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.math$next_after__inliner__12584: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.test$assert_predicate: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.pprint$p_write_char: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.core$PrintWriter_on: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.core$nthrest: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.core$fn__7457: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.set$rename_keys: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.pprint$write_initial_lines: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.math$floor_div__inliner__12548: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.core$fn__7499: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.core$emit_hinted_impl: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.core$fn__7423: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.set$bubble_max_key: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.math$scalb: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.core$unchecked_subtract__inliner__5682: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.core$find: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.pprint$compile_raw_string: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.math$floor_mod: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.instant$print_calendar: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.data$diff_sequential: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.core$bit_shift_left: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.set$project: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.core$fn__7417: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.test$assert_any: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.core$intern: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.pprint$set_logical_block_callback: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.core$fn__7405: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.core$identical_QMARK___inliner__5581: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.zip$insert_left: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.math$multiply_exact__inliner__12536: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.pprint$extract_flags: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.pprint$parse_lb_options: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.core$print_object: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.core$fn__7530: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.core$elide_top_frames: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.core$setup_reference: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.core$split_at: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.core$_EQ_: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.pprint$pp: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.java.io$file: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.string$last_index_of: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.core$filterv: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.core.protocols$fn__8254: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.core$get: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.core$fn__7580: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.core$_GT___inliner__5635: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.pprint$fn__10219: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.core$fn__7480: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.pprint$add_to_buffer: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.core$fn__7413: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.core$vector_of: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.core$not_EQ_: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.core$float_array: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.lang.AFn: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.inspector$fn__9580: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.math$IEEE_remainder__inliner__12506: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.pprint$execute_format: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.string$escape: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.core$char_array: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.core$load_data_reader_file: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.inspector$fn__9586: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.pprint$pll_mod_body: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.core.server$repl_read: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.core$find_field: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.math$scalb__inliner__12593: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.core$underive: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.core$fn__7503: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.string$ends_with_QMARK_: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.reflect$fn__12300: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.edn$read_string: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.xml$parse: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.core$fn__7389: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.core.reducers$take_while: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.math$add_exact: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.pprint$fn__10200: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.core$generate_proxy: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.core$_LT__EQ___inliner__5632: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.pprint$fn__10983: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.set$union: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.core$unsigned_bit_shift_right__inliner__5727: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.core.proxy$clojure.lang.APersistentMap$ff19274a: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.pprint$add_english_scales: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.core.reducers$filter: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.core$print_throwable: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.core$descendants: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.core.protocols$fn__8250: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.lang.RestFn: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.test$fn__9838: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.core$process_annotation: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.pprint$process_bracket: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.pprint$single_defn: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.core$get_in: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.core$set_validator_BANG_: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.core$accessor: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.instant$fn__8487: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.core$bounded_count: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.core$emit_protocol: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.core.reducers$drop: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.java.shell$stream_to_enc: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.core$bit_xor: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.math$pow__inliner__12521: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.core$fn__7497: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.core$fn__7545: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.core.reducers$mapcat: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.core.reducers$reducer: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.math$multiply_exact: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.core$fn__7397: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.pprint$consume: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.core.reducers$map: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.pprint$check_flags: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.pprint$insert_scaled_decimal: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.pprint$relative_reposition: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.core$mix_collection_hash: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.core$add_annotations: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.core$bit_flip: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.pprint$set_miser_width: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.core$bit_and_not: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.core$unchecked_divide_int__inliner__5691: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.core$sequence: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.pprint$ltrim: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.walk$prewalk: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.pprint$ancestor_QMARK_: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.core$unchecked_divide_int: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.java.io$fn__11613: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.math$floor_mod__inliner__12551: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.core$read: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.lang.Keyword: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.data$fn__12064: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.core$fn__7407: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.java.io$fn__11665: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.core$find_protocol_impl: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.core$fn__7489: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.pprint$print_table: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.set$difference: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.core$into_array: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.core$dorun: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.test$fn__9845: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.java.io$fn__11655: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.core$fn__7468: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.java.io$fn__11653: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.set$superset_QMARK_: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.core$sort: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.string$starts_with_QMARK_: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.pprint$fn__10212: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.walk$postwalk_replace: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.java.io$fn__11649: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.core$ns_unmap: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.java.io$fn__11643: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.core$byte_array: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.instant$parse_timestamp: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.core.reducers$take: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.core$overload_name: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.core.server$ex__GT_data: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.edn$read: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.core$ancestors: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.test$file_and_line: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.core$fn__7362: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.java.io$fn__11639: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.core.protocols$seq_reduce: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.core.protocols$fn__8242: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.pprint$base_str: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.core$read_string: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.core$distinct_QMARK_: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.pprint$pprint_indent: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.core$pr_on: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.core$map_indexed: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.core$take_last: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.core$zipmap: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.pprint$extract_params: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.core$disj: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.core$unchecked_add__inliner__5676: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.pprint$fn__10872: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.pprint$prefix_count: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.core$fn__7513: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.data$fn__12077: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.core$bit_or: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.zip$append_child: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.pprint$consume_while: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.core$fn__7532: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.core$get_method: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.set$join: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.pprint$get_field: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.pprint$remainders: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.stacktrace$print_cause_trace: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.java.javadoc$add_remote_javadoc: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.core$fn__7478: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.core$long_array: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.instant$fn__8478: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.math$subtract_exact: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.pprint$opt_base_str: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.pprint$multi_defn: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.core$seque: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.java.io$fn__11657: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.core$find_keyword: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.core$bit_test: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.core.protocols$fn__8252: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.core$compare__inliner__5588: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.zip$insert_child: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.pprint$fn__10931: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.core$rem__inliner__5706: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.core$fn__8362: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.core$update_vals: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.core$fn__7379: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.pprint$column_writer: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.core$reduce: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.core$double_array: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.core$fn__7474: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.string$join: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.java.io$fn__11645: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.pprint$format_error: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.java.io$fn__11615: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.core$fn__7425: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.core$keep_indexed: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.java.io$fn__11651: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.core$fn__7543: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.core$re_matches: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.data$fn__12081: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.core$hash_combine: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.core$every_QMARK_: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.core$fn__7511: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.core$fn__7419: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.core$satisfies_QMARK_: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.core$filter_methods: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.core$fn__7368: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.pprint$c_write_char: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.core$with_meta__5497: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.pprint$fn__10207: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.core$boolean_array: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.core$fn__8902: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.java.io$fn__11619: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.test.junit$start_case: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.set$select: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.core$some: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.core$bit_set: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.core$fn__7470: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.core.protocols$fn__8238: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.core$unchecked_multiply_int__inliner__5685: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.core$with_redefs_fn: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.core$fn__7393: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.core$into1: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.pprint$rtrim: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.pprint$compile_directive: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.core$dissoc: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.java.javadoc$fill_in_module_name: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.core$subvec: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.data$diff: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.core$nthnext: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.core$apply: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.set$subset_QMARK_: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.pprint$check_enumerated_arg: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.core$fn__7495: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.core$assert_same_protocol: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.core$select_keys: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.uuid$fn__8528: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.core$range: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.lang.Symbol: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.core$fn__7409: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.core$bit_shift_right__inliner__5724: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.core.reducers$cat: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.core$bit_shift_left__inliner__5721: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.core$re_find: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.reflect$parse_flags: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.string$includes_QMARK_: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.xml$startparse_sax_safe: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.core$repeat: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.core.reducers$remove: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.core$var_set: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.pprint$tuple_map: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.core$unchecked_add_int: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.core.server$required: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.core$emit_extend_type: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.string$index_of: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.core$splitv_at: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.pprint$fn__10954: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.java.io$fn__11617: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.core$unchecked_multiply_int: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.java.io$outputstream__GT_writer: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.core.protocols$fn__8248: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.core$fn__7515: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.core.protocols$fn__8240: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.core$bit_clear: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.core$fn__7464: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.core$fn__7399: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.zip$insert_right: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.core$fn__7505: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.repl.deps$add_lib: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.core$mapv: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.core$fn__8397: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.core$contains_QMARK_: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.java.io$fn__11663: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.core$print_simple: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.core$_EQ__EQ___inliner__5641: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.pprint$realize_parameter_list: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.core$imap_cons: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.core$list_STAR_: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.pprint$group_by_STAR_: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.core$unchecked_add_int__inliner__5673: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.core$parents: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.core$print_meta: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.core$derive: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.reflect$typeref__GT_class: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.core$fn__7385: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.walk$postwalk: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.core$chunk_cons: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.math$floor_div: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.core$validate_fields: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.core$fn__7487: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.core$drop: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.core$conj__5467: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.pprint$insert_decimal: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.java.shell$stream_to_string: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.pprint$capitalize_string: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.core$proxy_name: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.core$ex_info: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.pprint$fn__10892: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.lang.APersistentMap: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.pprint$emit_nl: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.repl$pst: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.instant$zero_fill_right: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.core$nary_inline$fn__5618: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.core$fn__7501: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.test.junit$finish_element: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.core$fn__7582: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.math$add_exact__inliner__12530: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.core$_EQ___inliner__5584: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.core$maybe_destructured: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.core$fn__7381: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.pprint$fn__10216: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.core.protocols$iter_reduce: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.reflect$fn__12298: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.core$make_array: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.core$run_BANG_: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.core$reduce1: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.core$drop_last: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.core$resolve: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.test$fn__9832: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.core$group_by: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.core.reducers$folder: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.test$add_ns_meta: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.core$re_seq: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.data$atom_diff: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.test.junit$suite_attrs: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.core$fn__7484: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.core$fn__7373: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.math$atan2__inliner__12518: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.core.reducers$reduce: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.uuid$fn__8526: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.math$hypot__inliner__12569: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.java.io$inputstream__GT_reader: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.core$unchecked_subtract_int: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.core$ns_unalias: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.pprint$absolute_reposition: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.core$deliver: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.core$doall: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.lang.Var: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.core$into: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.core.protocols$fn__8244: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.core$isa_QMARK_: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.test$fn__9841: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.core$prependss: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.xml$startparse_sax: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.pprint$fn__10939: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.inspector$fn__9592: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.core$emit_extend_protocol: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.core$fn__7377: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.core$fn__7395: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.core$ref_max_history: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.pprint$table_ize: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.core.reducers$fold: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.stacktrace$print_stack_trace: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.pprint$write_token_string: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.set$index: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.core$fn__7482: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.core$keyword: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.java.io$fn__11641: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.core$prep_ints: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.core$interpose: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.pprint$tokens_fit_QMARK_: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.core$ns_resolve: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.instant$print_timestamp: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.core$unchecked_remainder_int: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.core$fn__7472: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.core$unchecked_multiply__inliner__5688: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.data$fn__12079: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.pprint$set_max_column: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.core$quot__inliner__5703: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.pprint$nl: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.core$unsigned_bit_shift_right: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.pprint$fn__10967: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.core$bit_shift_right: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.core$fnil$fn__6981: java.lang.Object invoke(java.lang.Object)>
<clojure.core.Vec: java.lang.Object invoke(java.lang.Object)>
<clojure.core$every_pred$ep2__8705: java.lang.Object invoke(java.lang.Object)>
<clojure.core$partial$fn__5920: java.lang.Object invoke(java.lang.Object)>
<clojure.core$juxt$fn__5903: java.lang.Object invoke(java.lang.Object)>
<clojure.test$compose_fixtures$fn__9872: java.lang.Object invoke(java.lang.Object)>
<clojure.core$some_fn$sp2__8769: java.lang.Object invoke(java.lang.Object)>
<clojure.core$nary_inline$fn__5618: java.lang.Object invoke(java.lang.Object)>
<clojure.core$comp$fn__5888: java.lang.Object invoke(java.lang.Object)>
<clojure.core$completing$fn__8542: java.lang.Object invoke(java.lang.Object)>
<clojure.pprint$format_ascii: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.pprint$next_arg: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.core$repeat: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>
<clojure.pprint$format_simple_number: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.core$print: java.lang.Object invokeStatic(clojure.lang.ISeq)>
<clojure.walk$prewalk_replace: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>
<clojure.repl.deps$sync_deps: java.lang.Object doInvoke(java.lang.Object)>
<clojure.instant$construct_calendar: java.lang.Object invoke(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.lang.Var: void pushThreadBindings(clojure.lang.Associative)>
<clojure.core$parse_boolean: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.core$boolean__inliner__5774: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.test$fn__9804: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.core$println: java.lang.Object invokeStatic(clojure.lang.ISeq)>
<clojure.core$restart_agent: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,clojure.lang.ISeq)>
<clojure.pprint$format_ascii: java.lang.Object invoke(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.core$restart_agent: java.lang.Object doInvoke(java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.java.io$fn__11661: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>
<clojure.core$alter: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,clojure.lang.ISeq)>
<clojure.lang.Ref: java.lang.Object alter(clojure.lang.IFn,clojure.lang.ISeq)>
<clojure.core$alter: java.lang.Object doInvoke(java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.pprint$process_nesting: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.pprint$consume: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>
<clojure.core$print_sequential: java.lang.Object invoke(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.pprint$set_field: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.pprint$set_field: java.lang.Object invoke(java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.core$get_proxy_class: java.lang.Object invokeStatic(clojure.lang.ISeq)>
<clojure.core$generate_proxy: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>
<clojure.core$get_super_and_interfaces: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.core$proxy_name: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>
<clojure.lang.RT: java.lang.Class loadClassForName(java.lang.String)>
<clojure.core$special_symbol_QMARK_: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.core$contains_QMARK_: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>
<clojure.core$defrecord: java.lang.Object doInvoke(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.set$intersection: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,clojure.lang.ISeq)>
<clojure.core$rest__5465: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.set$bubble_max_key: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>
<clojure.core$reduce: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.core$unchecked_negate__inliner__5670: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.core$get_proxy_class: java.lang.Object doInvoke(java.lang.Object)>
<clojure.set$intersection: java.lang.Object doInvoke(java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.set$intersection: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>
<clojure.pprint$process_directive_table_element: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.test$deftest_: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object,clojure.lang.ISeq)>
<clojure.core$vary_meta: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,clojure.lang.ISeq)>
<clojure.lang.RT: java.lang.Object[] toArray(java.lang.Object)>
<clojure.core$amap: java.lang.Object invoke(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.inspector$inspect: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.inspector$list_model: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.core$defn_: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object,clojure.lang.ISeq)>
<clojure.core$with_meta__5497: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>
<clojure.core$list_STAR_: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.core$assoc__5493: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.core$defn_: java.lang.Object doInvoke(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.pprint$make_pretty_writer: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.pprint$pretty_writer: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.pprint$make_pretty_writer: java.lang.Object invoke(java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.test$deftest_: java.lang.Object doInvoke(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.test$run_all_tests: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.core$all_ns: java.lang.Object invokeStatic()>
<clojure.java.io$fn__11659: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>
<clojure.core$with_in_str: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object,clojure.lang.ISeq)>
<clojure.core$prep_hashes: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.core$merge_hash_collisions: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.core$case_map: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.core$maybe_min_hash: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.core$fits_table_QMARK_: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.core$into1: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>
<clojure.core$aset_short: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object,clojure.lang.ISeq)>
<clojure.lang.Reflector: java.lang.Object invokeStaticMethod(java.lang.Class,java.lang.String,java.lang.Object[])>
<clojure.core$apply: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.lang.RT: java.lang.Class classForName(java.lang.String)>
<clojure.core$aset_short: java.lang.Object doInvoke(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.core$aset_short: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.lang.RT: short shortCast(java.lang.Object)>
<clojure.core$generate_class$emit_get_var__7682: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.core$generate_class$var_name__7655: java.lang.Object invoke(java.lang.Object)>
<clojure.asm.commons.Method: clojure.asm.commons.Method getMethod(java.lang.String)>
<clojure.core$aset_short: java.lang.Object invoke(java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.lang.RT: clojure.lang.ISeq cons(java.lang.Object,java.lang.Object)>
<clojure.core$with_in_str: java.lang.Object doInvoke(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.core$prep_hashes: java.lang.Object invoke(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.core$update_keys: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>
<clojure.core$reduce_kv: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.core.protocols$fn__8261: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.test.tap$print_tap_pass: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.core$group_by$fn__8611: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.core$conj__5467: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>
<clojure.core$fn__7403: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>
<clojure.core.protocols$fn__8261: java.lang.Object invoke(java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.test$fn__9830: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>
<clojure.core$aget__inliner__6226: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>
<clojure.core$replace: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>
<clojure.core$range: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.core$reduce1: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.java.process$to_file: java.lang.Object invokeStatic(java.lang.Object,clojure.lang.ISeq)>
<clojure.java.io$file: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.pprint$pprint_simple_list: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.pprint$pprint_meta: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.lang.RT: clojure.lang.IPersistentMap map(java.lang.Object[])>
<clojure.pprint$pprint_simple_list$fn__11152: java.lang.Object invoke()>
<clojure.lang.Var: java.lang.Object invoke()>
<clojure.java.process$to_file: java.lang.Object doInvoke(java.lang.Object,java.lang.Object)>
<clojure.java.io$fn__11681: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.java.io$buffer_size: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.core$subs: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.java.io$fn__11681: java.lang.Object invoke(java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.core$subs: java.lang.Object invoke(java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.core$subs: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>
<clojure.core$generate_class$fn__7716: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.core$method_sig: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.repl$source: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.pprint$pprint_vector: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.pprint$pprint_vector$fn__11158: java.lang.Object invoke()>
<clojure.core$serialized_require: java.lang.Object invokeStatic(clojure.lang.ISeq)>
<clojure.core$serialized_require: java.lang.Object doInvoke(java.lang.Object)>
<clojure.repl$source: java.lang.Object invoke(java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.instant$fn__8489: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>
<clojure.instant$print_timestamp: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>
<clojure.core$munge: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.core$str: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.lang.Compiler: java.lang.String munge(java.lang.String)>
<clojure.reflect$type_reflect$make_ancestor_map__12124: java.lang.Object invoke(java.lang.Object)>
<clojure.core$zipmap: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>
<clojure.core$_reset_methods: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.lang.Var: void bindRoot(java.lang.Object)>
<clojure.core$keyword: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.java.io$as_relative_path: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.core$pr: java.lang.Object invokeStatic(java.lang.Object,clojure.lang.ISeq)>
<clojure.core$pr: java.lang.Object doInvoke(java.lang.Object,java.lang.Object)>
<clojure.core$pr: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.core$pr_on: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>
<clojure.zip$replace: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>
<clojure.pprint$fn__10961: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>
<clojure.math$tan__inliner__12473: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.repl$set_break_handler_BANG_: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.core$shorts__6625: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.core$deref: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.core$deref_future: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.lang.RT: long longCast(java.lang.Object)>
<clojure.core$deref: java.lang.Object invoke(java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.pprint.proxy$java.io.Writer$IDeref$e595a7c1: java.lang.Object deref()>
<clojure.core$nth: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.core$nth: java.lang.Object invoke(java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.core$nth: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>
<clojure.reflect$internal_name__GT_class_symbol: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.core$pr_str: java.lang.Object invokeStatic(clojure.lang.ISeq)>
<java.lang.AssertionError: void <init>(java.lang.Object)>
<clojure.reflect$typesym: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.core$int_array: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>
<clojure.lang.Numbers: int[] int_array(int,java.lang.Object)>
<clojure.core$bit_and: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,clojure.lang.ISeq)>
<clojure.lang.Numbers: long and(java.lang.Object,java.lang.Object)>
<clojure.core$int_array: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.lang.Numbers: int[] int_array(java.lang.Object)>
<clojure.core$bit_and: java.lang.Object doInvoke(java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.core$bit_and: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>
<clojure.core$fn__7493: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>
<clojure.core$pmap: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,clojure.lang.ISeq)>
<clojure.core$pmap: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>
<clojure.core$pmap: java.lang.Object doInvoke(java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.core$pmap$step__8571: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.core$drop: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>
<clojure.core$str$fn__5543: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.core$unchecked_subtract_int__inliner__5679: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>
<clojure.core$str: java.lang.Object doInvoke(java.lang.Object,java.lang.Object)>
<clojure.lang.ASeq: java.lang.String toString()>
<clojure.lang.APersistentSet: java.lang.String toString()>
<clojure.pprint.proxy$java.io.Writer$IDeref$e595a7c1: java.lang.String toString()>
<clojure.core.proxy$java.io.Writer$ff19274a: java.lang.String toString()>
<clojure.core.proxy$clojure.lang.APersistentMap$ff19274a: java.lang.String toString()>
<clojure.lang.Keyword: java.lang.String toString()>
<clojure.lang.APersistentVector: java.lang.String toString()>
<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: java.lang.String toString()>
<clojure.lang.APersistentMap: java.lang.String toString()>
<clojure.lang.ExceptionInfo: java.lang.String toString()>
<java.lang.Object: java.lang.String toString()>
<clojure.lang.Var: java.lang.String toString()>
<clojure.core$await1: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.core$await: java.lang.Object invokeStatic(clojure.lang.ISeq)>
<clojure.java.io$writer: java.lang.Object invokeStatic(java.lang.Object,clojure.lang.ISeq)>
<clojure.core$count__inliner__5598: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.java.io$writer: java.lang.Object doInvoke(java.lang.Object,java.lang.Object)>
<clojure.core.server$accept_connection: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.core$require: java.lang.Object invokeStatic(clojure.lang.ISeq)>
<clojure.core$resolve: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.core$_LT___inliner__5607: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>
<clojure.data$as_set_value: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.core$into: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>
<clojure.core$_PLUS_: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,clojure.lang.ISeq)>
<clojure.core$_PLUS_: java.lang.Object doInvoke(java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.test$fn__9794: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.core$prn: java.lang.Object invokeStatic(clojure.lang.ISeq)>
<clojure.core.server$accept_connection: java.lang.Object invoke(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.pprint$pprint_ns: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.pprint$write_out: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.pprint$pprint_ns$fn__11271: java.lang.Object invoke()>
<clojure.java.io$encoding: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.core$defonce: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.math$subtract_exact__inliner__12533: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>
<clojure.core$long_array__inliner__6596: java.lang.Object invokeStatic(clojure.lang.ISeq)>
<clojure.core$sort_by: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.core$sort: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>
<clojure.core$sort_by: java.lang.Object invoke(java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.core.protocols$fn__8246: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>
<clojure.lang.LongRange: java.lang.Object reduce(clojure.lang.IFn)>
<clojure.lang.PersistentList: java.lang.Object reduce(clojure.lang.IFn)>
<clojure.lang.PersistentVector: java.lang.Object reduce(clojure.lang.IFn)>
<clojure.lang.Range: java.lang.Object reduce(clojure.lang.IFn)>
<clojure.lang.Cycle: java.lang.Object reduce(clojure.lang.IFn)>
<clojure.lang.Iterate: java.lang.Object reduce(clojure.lang.IFn)>
<clojure.lang.ArraySeq: java.lang.Object reduce(clojure.lang.IFn)>
<clojure.lang.Repeat: java.lang.Object reduce(clojure.lang.IFn)>
<clojure.core$sort_by: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>
<clojure.core$unchecked_remainder_int__inliner__5694: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>
<clojure.core$long_array__inliner__6596: java.lang.Object doInvoke(java.lang.Object)>
<clojure.core$extends_QMARK_: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>
<clojure.pprint$conditional_newline: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.pprint$pprint_newline: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.test$function_QMARK_: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.pprint$realize_parameter: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>
<clojure.core$_PLUS__SINGLEQUOTE_: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,clojure.lang.ISeq)>
<clojure.core$_PLUS__SINGLEQUOTE_: java.lang.Object doInvoke(java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.pprint$conditional_newline: java.lang.Object invoke(java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.core$defonce: java.lang.Object invoke(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.reflect$declared_methods: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.core$set: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.test.junit$failure_el: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.test.junit$message_el: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.test.junit$failure_el: java.lang.Object invoke(java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.core$fn__7375: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>
<clojure.core$merge_with: java.lang.Object invokeStatic(java.lang.Object,clojure.lang.ISeq)>
<clojure.core$some: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>
<clojure.core$reduce1: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>
<clojure.core$merge_with: java.lang.Object doInvoke(java.lang.Object,java.lang.Object)>
<clojure.pprint$fn__10925: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>
<clojure.core$fn__7491: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>
<clojure.reflect.Field: boolean equals(java.lang.Object)>
<clojure.lang.APersistentMap: boolean mapEquals(clojure.lang.IPersistentMap,java.lang.Object)>
<clojure.core$defmulti: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object,clojure.lang.ISeq)>
<clojure.core$check_valid_options: java.lang.Object invokeStatic(java.lang.Object,clojure.lang.ISeq)>
<clojure.reflect.Field: java.lang.Object valAt(java.lang.Object)>
<clojure.reflect.Field: java.lang.Object valAt(java.lang.Object,java.lang.Object)>
<clojure.lang.PersistentStructMap: java.lang.Object valAt(java.lang.Object,java.lang.Object)>
<clojure.lang.PersistentHashMap: java.lang.Object valAt(java.lang.Object,java.lang.Object)>
<clojure.core.proxy$clojure.lang.APersistentMap$ff19274a: java.lang.Object valAt(java.lang.Object,java.lang.Object)>
<clojure.lang.PersistentArrayMap: java.lang.Object valAt(java.lang.Object,java.lang.Object)>
<clojure.reflect.Method: java.lang.Object valAt(java.lang.Object,java.lang.Object)>
<clojure.lang.PersistentTreeMap: java.lang.Object valAt(java.lang.Object,java.lang.Object)>
<clojure.reflect.Constructor: java.lang.Object valAt(java.lang.Object,java.lang.Object)>
<clojure.reflect.Field: clojure.lang.ILookupThunk getLookupThunk(clojure.lang.Keyword)>
<clojure.pprint$with_pprint_dispatch: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object,clojure.lang.ISeq)>
<clojure.java.browse$browse_url: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.java.browse$open_url_in_swing: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.java.browse$open_url_in_browser: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.java.browse$open_url_script_val: java.lang.Object invokeStatic()>
<clojure.java.browse$browse_url$fn__11861: java.lang.Object invoke()>
<clojure.pprint$with_pprint_dispatch: java.lang.Object doInvoke(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.reflect.Field: clojure.lang.IPersistentCollection cons(java.lang.Object)>
<clojure.reflect.Field: boolean equiv(java.lang.Object)>
<clojure.core$send_via: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object,clojure.lang.ISeq)>
<clojure.reflect.Field: boolean containsKey(java.lang.Object)>
<clojure.reflect.Field: clojure.lang.IMapEntry entryAt(java.lang.Object)>
<clojure.core$send_via: java.lang.Object doInvoke(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.reflect.Field: clojure.lang.IPersistentMap assoc(java.lang.Object,java.lang.Object)>
<clojure.walk$walk: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.pprint$pll_mod_body$inner__10434: java.lang.Object invoke(java.lang.Object)>
<clojure.walk$postwalk_replace$fn__9727: java.lang.Object invoke(java.lang.Object)>
<clojure.core$empty: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.core$doall: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.reflect.Field: clojure.lang.IPersistentMap without(java.lang.Object)>
<clojure.core$not_empty: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.core$dissoc: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>
<clojure.core$aset_float: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object,clojure.lang.ISeq)>
<clojure.core$aset_float: java.lang.Object doInvoke(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.walk$walk: java.lang.Object invoke(java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.core$aset_float: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.lang.RT: float floatCast(java.lang.Object)>
<clojure.reflect.Field: java.lang.Object get(java.lang.Object)>
<clojure.lang.PersistentStructMap: java.lang.Object valAt(java.lang.Object)>
<clojure.lang.PersistentHashMap: java.lang.Object valAt(java.lang.Object)>
<clojure.core.proxy$clojure.lang.APersistentMap$ff19274a: java.lang.Object valAt(java.lang.Object)>
<clojure.lang.PersistentArrayMap: java.lang.Object valAt(java.lang.Object)>
<clojure.reflect.Method: java.lang.Object valAt(java.lang.Object)>
<clojure.lang.PersistentTreeMap: java.lang.Object valAt(java.lang.Object)>
<clojure.reflect.Constructor: java.lang.Object valAt(java.lang.Object)>
<clojure.core$defmulti: java.lang.Object doInvoke(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.core$aset_float: java.lang.Object invoke(java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.pprint$execute_format$fn__11123: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.pprint$unzip_map: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.pprint$realize_parameter_list: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>
<clojure.pprint$abort_QMARK_: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.core$defprotocol: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object,clojure.lang.ISeq)>
<clojure.core$emit_protocol: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>
<clojure.core$defprotocol: java.lang.Object doInvoke(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.test.tap$fn__9961: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.test.tap$print_tap_plan: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.java.javadoc$javadoc_url$fn__11888: java.lang.Object invoke(java.lang.Object)>
<clojure.java.javadoc$fill_in_module_name: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>
<clojure.math$acos__inliner__12479: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.core$await_for: java.lang.Object invokeStatic(java.lang.Object,clojure.lang.ISeq)>
<clojure.core$await_for: java.lang.Object doInvoke(java.lang.Object,java.lang.Object)>
<clojure.core$dedupe: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.core$sequence: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>
<clojure.lang.RT: clojure.lang.ISeq more(java.lang.Object)>
<clojure.pprint$get_section: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.lang.PersistentStructMap: clojure.lang.PersistentStructMap$Def createSlotMap(clojure.lang.ISeq)>
<clojure.core$macroexpand: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.lang.PersistentStructMap: clojure.lang.PersistentStructMap create(clojure.lang.PersistentStructMap$Def,clojure.lang.ISeq)>
<clojure.lang.PersistentStructMap: clojure.lang.IMapEntry entryAt(java.lang.Object)>
<clojure.lang.PersistentStructMap: clojure.lang.IPersistentMap assoc(java.lang.Object,java.lang.Object)>
<clojure.lang.PersistentHashMap: clojure.lang.IMapEntry entryAt(java.lang.Object)>
<clojure.lang.PersistentHashMap: clojure.lang.IPersistentMap assoc(java.lang.Object,java.lang.Object)>
<clojure.core.proxy$clojure.lang.APersistentMap$ff19274a: clojure.lang.IMapEntry entryAt(java.lang.Object)>
<clojure.core.proxy$clojure.lang.APersistentMap$ff19274a: clojure.lang.IPersistentMap assoc(java.lang.Object,java.lang.Object)>
<clojure.lang.PersistentArrayMap: clojure.lang.IMapEntry entryAt(java.lang.Object)>
<clojure.lang.PersistentArrayMap: clojure.lang.IPersistentMap assoc(java.lang.Object,java.lang.Object)>
<clojure.reflect.Method: clojure.lang.IMapEntry entryAt(java.lang.Object)>
<clojure.reflect.Method: clojure.lang.IPersistentMap assoc(java.lang.Object,java.lang.Object)>
<clojure.lang.PersistentTreeMap: clojure.lang.IMapEntry entryAt(java.lang.Object)>
<clojure.reflect.Constructor: clojure.lang.IMapEntry entryAt(java.lang.Object)>
<clojure.reflect.Constructor: clojure.lang.IPersistentMap assoc(java.lang.Object,java.lang.Object)>
<clojure.lang.RT: java.lang.Object second(java.lang.Object)>
<clojure.pprint$format_ordinal_english: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.pprint$init_navigator: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.pprint$format_simple_ordinal: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.pprint$add_english_scales: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>
<clojure.pprint$format_integer: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.core$empty_QMARK_: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.pprint$remainders: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>
<clojure.lang.Util: boolean equiv(long,java.lang.Object)>
<clojure.core$drop_last: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.lang.PersistentStructMap: clojure.lang.PersistentStructMap construct(clojure.lang.PersistentStructMap$Def,clojure.lang.ISeq)>
<clojure.core$alias: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>
<clojure.core$the_ns: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.lang.PersistentStructMap: clojure.lang.IFn getAccessor(clojure.lang.PersistentStructMap$Def,java.lang.Object)>
<clojure.lang.PersistentStructMap: boolean containsKey(java.lang.Object)>
<clojure.lang.PersistentHashMap: boolean containsKey(java.lang.Object)>
<clojure.core.proxy$clojure.lang.APersistentMap$ff19274a: boolean containsKey(java.lang.Object)>
<clojure.lang.PersistentArrayMap: boolean containsKey(java.lang.Object)>
<clojure.reflect.Method: boolean containsKey(java.lang.Object)>
<clojure.lang.PersistentTreeMap: boolean containsKey(java.lang.Object)>
<clojure.reflect.Constructor: boolean containsKey(java.lang.Object)>
<clojure.lang.PersistentStructMap: clojure.lang.IPersistentMap without(java.lang.Object)>
<clojure.lang.PersistentHashMap: clojure.lang.IPersistentMap without(java.lang.Object)>
<clojure.core.proxy$clojure.lang.APersistentMap$ff19274a: clojure.lang.IPersistentMap without(java.lang.Object)>
<clojure.lang.PersistentArrayMap: clojure.lang.IPersistentMap without(java.lang.Object)>
<clojure.reflect.Method: clojure.lang.IPersistentMap without(java.lang.Object)>
<clojure.reflect.Constructor: clojure.lang.IPersistentMap without(java.lang.Object)>
<clojure.core$booleans__6604: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.pprint$format_ordinal_english: java.lang.Object invoke(java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.core$inst_QMARK_: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.core$satisfies_QMARK_: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>
<clojure.lang.APersistentSet: boolean contains(java.lang.Object)>
<clojure.core$read_PLUS_string: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>
<clojure.core$read: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>
<clojure.lang.APersistentSet: java.lang.Object get(java.lang.Object)>
<clojure.core$prn: java.lang.Object doInvoke(java.lang.Object)>
<clojure.core$fn__7584: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>
<clojure.core$vals: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.core$keys: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.java.io$fn__11539: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.lang.APersistentSet: boolean equals(java.lang.Object)>
<clojure.lang.APersistentSet: boolean setEquals(clojure.lang.IPersistentSet,java.lang.Object)>
<clojure.core$ns_imports: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.core$ns_map: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.core$filter_key: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.lang.APersistentSet: int size()>
<clojure.instant$construct_timestamp: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.lang.APersistentSet: boolean equiv(java.lang.Object)>
<clojure.core$merge_hash_collisions: java.lang.Object invoke(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.instant$construct_timestamp: java.lang.Object invoke(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.core$aget: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,clojure.lang.ISeq)>
<clojure.core$apply: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.core$aget: java.lang.Object doInvoke(java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.core$aget: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>
<clojure.pprint$add_core_ns: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.lang.FnLoaderThunk: java.lang.Object invoke(java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.core$load_one: java.lang.Object invoke(java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.template$apply_template: java.lang.Object invoke(java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.core$build_positional_factory: java.lang.Object invoke(java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.pprint$collect_clauses: java.lang.Object invoke(java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.core$aset_byte: java.lang.Object invoke(java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.core$print_map: java.lang.Object invoke(java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.core.reducers$do_rfn: java.lang.Object invoke(java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.core$reductions: java.lang.Object invoke(java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.pprint$fixed_float: java.lang.Object invoke(java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.core$update: java.lang.Object invoke(java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.core$aset: java.lang.Object invoke(java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.core$subseq: java.lang.Object invoke(java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.core$time: java.lang.Object invoke(java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.data$diff_associative_key: java.lang.Object invoke(java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.test$run_test: java.lang.Object invoke(java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.core$intern: java.lang.Object invoke(java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.core$deref_future: java.lang.Object invoke(java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.test.junit$error_el: java.lang.Object invoke(java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.java.io$fn__11673: java.lang.Object invoke(java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.core$ams_check: java.lang.Object invoke(java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.string$last_index_of: java.lang.Object invoke(java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.core.protocols$fn__8254: java.lang.Object invoke(java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.core$get: java.lang.Object invoke(java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.core$print_ctor: java.lang.Object invoke(java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.instant$verify: java.lang.Object invoke(java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.core$reduce_kv: java.lang.Object invoke(java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.core$load_all: java.lang.Object invoke(java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.core$vector_of: java.lang.Object invoke(java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.pprint$iterate_sublist: java.lang.Object invoke(java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.lang.AFn: java.lang.Object invoke(java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.pprint$choice_conditional: java.lang.Object invoke(java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.pprint$execute_format: java.lang.Object invoke(java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.core$mk_am: java.lang.Object invoke(java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.pprint$get_fixed: java.lang.Object invoke(java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.core$underive: java.lang.Object invoke(java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.core$aset_int: java.lang.Object invoke(java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.core$aset__inliner__6229: java.lang.Object invoke(java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.pprint$exponential_float: java.lang.Object invoke(java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.core.proxy$clojure.lang.APersistentMap$ff19274a: java.lang.Object invoke(java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.pprint$getf: java.lang.Object invoke(java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.core.protocols$fn__8258: java.lang.Object invoke(java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.core.protocols$fn__8250: java.lang.Object invoke(java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.lang.RestFn: java.lang.Object invoke(java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.pprint$plain_character: java.lang.Object invoke(java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.core$get_in: java.lang.Object invoke(java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.string$replace_by: java.lang.Object invoke(java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.core$add_annotations: java.lang.Object invoke(java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.core$print_tagged_object: java.lang.Object invoke(java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.lang.Keyword: java.lang.Object invoke(java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.string$replace_first_char: java.lang.Object invoke(java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.pprint$formatter_out: java.lang.Object invoke(java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.core$aset_long: java.lang.Object invoke(java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.core$fn__8535: java.lang.Object invoke(java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.pprint$format_logical_block: java.lang.Object invoke(java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.data$diff_associative: java.lang.Object invoke(java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.java.io$fn__11679: java.lang.Object invoke(java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.core$transduce: java.lang.Object invoke(java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.pprint$readable_character: java.lang.Object invoke(java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.repl$dir: java.lang.Object invoke(java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.core.protocols$seq_reduce: java.lang.Object invoke(java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.core.protocols$fn__8242: java.lang.Object invoke(java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.pprint$pretty_character: java.lang.Object invoke(java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.core.protocols$interface_or_naive_reduce: java.lang.Object invoke(java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.pprint$iterate_main_sublists: java.lang.Object invoke(java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.set$join: java.lang.Object invoke(java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.core.protocols$naive_seq_reduce: java.lang.Object invoke(java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.pprint$pprint_tab: java.lang.Object invoke(java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.core$filter_key: java.lang.Object invoke(java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.core$expand_method_impl_cache: java.lang.Object invoke(java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.core.protocols$fn__8252: java.lang.Object invoke(java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.java.io$fn__11675: java.lang.Object invoke(java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.core$aset_boolean: java.lang.Object invoke(java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.pprint$miser_nl_QMARK_: java.lang.Object invoke(java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.core$reduce: java.lang.Object invoke(java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.test$is: java.lang.Object invoke(java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.pprint$format_cardinal_english: java.lang.Object invoke(java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.pprint$relative_tabulation: java.lang.Object invoke(java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.pprint$execute_sub_format: java.lang.Object invoke(java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.pprint$general_float: java.lang.Object invoke(java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.pprint$format_new_roman: java.lang.Object invoke(java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.core$subvec: java.lang.Object invoke(java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.core$apply: java.lang.Object invoke(java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.pprint$absolute_tabulation: java.lang.Object invoke(java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.core$rsubseq: java.lang.Object invoke(java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.pprint$justify_clauses: java.lang.Object invoke(java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.core$aset_double: java.lang.Object invoke(java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.core$range: java.lang.Object invoke(java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.pprint$indent: java.lang.Object invoke(java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.pprint$format_old_roman: java.lang.Object invoke(java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.core$aset_char: java.lang.Object invoke(java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.pprint$map_passing_context: java.lang.Object invoke(java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.zip$make_node: java.lang.Object invoke(java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.pprint$process_clause: java.lang.Object invoke(java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.string$index_of: java.lang.Object invoke(java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.core.protocols$fn__8248: java.lang.Object invoke(java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.core.protocols$fn__8240: java.lang.Object invoke(java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.pprint$boolean_conditional: java.lang.Object invoke(java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.pprint$linear_nl_QMARK_: java.lang.Object invoke(java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.core$mapv: java.lang.Object invoke(java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.core.protocols$fn__8263: java.lang.Object invoke(java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.pprint$check_arg_conditional: java.lang.Object invoke(java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.core$assoc_in: java.lang.Object invoke(java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.core$list_STAR_: java.lang.Object invoke(java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.pprint$formatter: java.lang.Object invoke(java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.core$derive: java.lang.Object invoke(java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.string$split: java.lang.Object invoke(java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.string$replace_first_str: java.lang.Object invoke(java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.core$ex_info: java.lang.Object invoke(java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.core$add_annotation: java.lang.Object invoke(java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.core$proxy_call_with_super: java.lang.Object invoke(java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.pprint$iterate_main_list: java.lang.Object invoke(java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.pprint$write_tokens: java.lang.Object invoke(java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.core.protocols$iter_reduce: java.lang.Object invoke(java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.pprint$set_indent: java.lang.Object invoke(java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.core$reduce1: java.lang.Object invoke(java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.core$find_protocol_method: java.lang.Object invoke(java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.pprint$expand_fixed: java.lang.Object invoke(java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.core$assoc__5493: java.lang.Object invoke(java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.lang.Var: java.lang.Object invoke(java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.core$into: java.lang.Object invoke(java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.string$replace_first: java.lang.Object invoke(java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.core.protocols$fn__8244: java.lang.Object invoke(java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.repl$doc: java.lang.Object invoke(java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.core$isa_QMARK_: java.lang.Object invoke(java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.string$replace: java.lang.Object invoke(java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.pprint$render_clauses: java.lang.Object invoke(java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.pprint$iterate_list_of_sublists: java.lang.Object invoke(java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.core.reducers$fold: java.lang.Object invoke(java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.string$replace_first_by: java.lang.Object invoke(java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.pprint$pretty_writer: java.lang.Object invoke(java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.core$shift_mask: java.lang.Object invoke(java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.pprint$dollar_float: java.lang.Object invoke(java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.core$ns_resolve: java.lang.Object invoke(java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.instant$fail: java.lang.Object invoke(java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.lang.FnLoaderThunk: java.lang.Object doInvoke(java.lang.Object)>
<clojure.lang.AFn: java.lang.Object applyTo(clojure.lang.ISeq)>
<clojure.core.proxy$clojure.lang.APersistentMap$ff19274a: java.lang.Object applyTo(clojure.lang.ISeq)>
<clojure.lang.RestFn: java.lang.Object applyTo(clojure.lang.ISeq)>
<clojure.lang.Keyword: java.lang.Object applyTo(clojure.lang.ISeq)>
<clojure.lang.Var: java.lang.Object applyTo(clojure.lang.ISeq)>
<clojure.core$_STAR_: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,clojure.lang.ISeq)>
<clojure.core$_STAR_: java.lang.Object doInvoke(java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.string$re_quote_replacement: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.core.Vec: java.lang.Object valAt(java.lang.Object,java.lang.Object)>
<clojure.core$__SINGLEQUOTE_: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,clojure.lang.ISeq)>
<clojure.core$__SINGLEQUOTE_: java.lang.Object doInvoke(java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.core$fn__7476: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>
<clojure.core$print_object: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>
<clojure.core$print_meta: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>
<clojure.core.Vec: boolean equals(java.lang.Object)>
<clojure.core$future: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,clojure.lang.ISeq)>
<clojure.core$future: java.lang.Object doInvoke(java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.lang.PersistentHashMap: clojure.lang.PersistentHashMap create(clojure.lang.ISeq)>
<clojure.core$hash_map: java.lang.Object doInvoke(java.lang.Object)>
<clojure.core.Vec: clojure.lang.IMapEntry entryAt(java.lang.Object)>
<clojure.core.Vec: boolean containsKey(java.lang.Object)>
<clojure.zip$vector_zip: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.zip$zipper: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.core$fn__7464$fn__7465: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.core$print_map: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.pprint$extract_flags$fn__11015: java.lang.Object invoke(java.lang.Object)>
<clojure.pprint$format_error: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>
<clojure.test.junit$fn__10034: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.test.junit$error_el: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.test$inc_report_counter: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.core$_GT__EQ___inliner__5638: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>
<clojure.pprint$pprint: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>
<clojure.pprint$get_column: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.pprint$pretty_writer_QMARK_: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.test.junit$loading__6803__auto____9964: java.lang.Object invoke()>
<clojure.test$loading__6803__auto____9763: java.lang.Object invoke()>
<clojure.core$fn__8896: java.lang.Object invoke()>
<clojure.repl$loading__6803__auto____11722: java.lang.Object invoke()>
<clojure.java.browse$loading__6803__auto____11817: java.lang.Object invoke()>
<clojure.java.io$loading__6803__auto____11487: java.lang.Object invoke()>
<clojure.core.protocols$fn__8288: java.lang.Object invoke()>
<clojure.walk$fn__9693: java.lang.Object invoke()>
<clojure.test$run_all_tests: java.lang.Object invoke()>
<clojure.test.junit$indent: java.lang.Object invoke()>
<clojure.repl$set_break_handler_BANG_: java.lang.Object invoke()>
<clojure.java.browse_ui$loading__6803__auto____11944: java.lang.Object invoke()>
<clojure.core.protocols$loading__6803__auto____8183: java.lang.Object invoke()>
<clojure.string$loading__6803__auto____11971: java.lang.Object invoke()>
<clojure.math$random__inliner__12527: java.lang.Object invoke()>
<clojure.pprint$fn__10248: java.lang.Object invoke()>
<clojure.pprint$fn__10194: java.lang.Object invoke()>
<clojure.stacktrace$loading__6803__auto____9733: java.lang.Object invoke()>
<clojure.core.protocols$fn__8189: java.lang.Object invoke()>
<clojure.java.javadoc$fn__11869: java.lang.Object invoke()>
<clojure.java.shell$fn__11821: java.lang.Object invoke()>
<clojure.data$fn__12048: java.lang.Object invoke()>
<clojure.java.browse$xdg_open_loc: java.lang.Object invoke()>
<clojure.java.shell$loading__6803__auto____11819: java.lang.Object invoke()>
<clojure.reflect$fn__12204: java.lang.Object invoke()>
<clojure.test.junit$fn__10018: java.lang.Object invoke()>
<clojure.zip$loading__6803__auto____9460: java.lang.Object invoke()>
<clojure.uuid$loading__6803__auto____8521: java.lang.Object invoke()>
<clojure.inspector$fn__9574: java.lang.Object invoke()>
<clojure.java.io$fn__11549: java.lang.Object invoke()>
<clojure.test.junit$fn__9966: java.lang.Object invoke()>
<clojure.core$loaded_libs: java.lang.Object invoke()>
<clojure.java.javadoc$loading__6803__auto____11867: java.lang.Object invoke()>
<clojure.java.process$loading__6803__auto____11898: java.lang.Object invoke()>
<clojure.core.server$repl_init: java.lang.Object invoke()>
<clojure.core$fn__8942: java.lang.Object invoke()>
<clojure.core$loading__1609__auto____5449: java.lang.Object invoke()>
<clojure.reflect$loading__6803__auto____12084: java.lang.Object invoke()>
<clojure.core$fn__8924: java.lang.Object invoke()>
<clojure.java.basis.impl$fn__11960: java.lang.Object invoke()>
<clojure.core$fn__8366: java.lang.Object invoke()>
<clojure.core$fn__8350: java.lang.Object invoke()>
<clojure.java.basis$loading__6803__auto____11965: java.lang.Object invoke()>
<clojure.lang.AFn: java.lang.Object invoke()>
<clojure.stacktrace$e: java.lang.Object invoke()>
<clojure.inspector$fn__9564: java.lang.Object invoke()>
<clojure.core$fn__8945: java.lang.Object invoke()>
<clojure.core$get_thread_bindings: java.lang.Object invoke()>
<clojure.core$fn__8948: java.lang.Object invoke()>
<clojure.java.basis.impl$fn__11962: java.lang.Object invoke()>
<clojure.core$fn__5451: java.lang.Object invoke()>
<clojure.core.proxy$clojure.lang.APersistentMap$ff19274a: java.lang.Object invoke()>
<clojure.core$fn__8336: java.lang.Object invoke()>
<clojure.pprint$fn__10142: java.lang.Object invoke()>
<clojure.test$fn__9765: java.lang.Object invoke()>
<clojure.edn$fn__9397: java.lang.Object invoke()>
<clojure.lang.RestFn: java.lang.Object invoke()>
<clojure.core.protocols$fn__8268: java.lang.Object invoke()>
<clojure.java.browse$open_url_script_val: java.lang.Object invoke()>
<clojure.inspector$fn__9568: java.lang.Object invoke()>
<clojure.java.browse_ui$fn__11946: java.lang.Object invoke()>
<clojure.test$testing_contexts_str: java.lang.Object invoke()>
<clojure.test.tap$loading__6803__auto____9931: java.lang.Object invoke()>
<clojure.java.io$fn__11495: java.lang.Object invoke()>
<clojure.core.reducers$loading__6803__auto____12324: java.lang.Object invoke()>
<clojure.datafy$loading__6803__auto____12130: java.lang.Object invoke()>
<clojure.pprint$fn__10042: java.lang.Object invoke()>
<clojure.core.reducers$fn__12326: java.lang.Object invoke()>
<clojure.java.process$fn__11932: java.lang.Object invoke()>
<clojure.lang.Keyword: java.lang.Object invoke()>
<clojure.core.server$stop_server: java.lang.Object invoke()>
<clojure.java.process$fn__11900: java.lang.Object invoke()>
<clojure.instant$fn__8480: java.lang.Object invoke()>
<clojure.core.protocols$fn__8215: java.lang.Object invoke()>
<clojure.java.process$fn__11902: java.lang.Object invoke()>
<clojure.core.server$fn__8989: java.lang.Object invoke()>
<clojure.pprint$loading__6803__auto____10040: java.lang.Object invoke()>
<clojure.edn$read: java.lang.Object invoke()>
<clojure.java.process$fn__11926: java.lang.Object invoke()>
<clojure.core$clojure_version: java.lang.Object invoke()>
<clojure.reflect$fn__12108: java.lang.Object invoke()>
<clojure.core$fn__8437: java.lang.Object invoke()>
<clojure.inspector$fn__9560: java.lang.Object invoke()>
<clojure.pprint$fn__11440: java.lang.Object invoke()>
<clojure.edn$loading__6803__auto____9395: java.lang.Object invoke()>
<clojure.pprint$fn__11163: java.lang.Object invoke()>
<clojure.test$fn__9781: java.lang.Object invoke()>
<clojure.repl$thread_stopper: java.lang.Object invoke()>
<clojure.pprint$fn__11372: java.lang.Object invoke()>
<clojure.inspector$fn__9636: java.lang.Object invoke()>
<clojure.test.junit$finish_case: java.lang.Object invoke()>
<clojure.reflect$fn__12169: java.lang.Object invoke()>
<clojure.instant$fn__8441: java.lang.Object invoke()>
<clojure.core$fn__6834: java.lang.Object invoke()>
<clojure.instant$loading__6803__auto____8439: java.lang.Object invoke()>
<clojure.data$fn__12032: java.lang.Object invoke()>
<clojure.pprint$fn__11293: java.lang.Object invoke()>
<clojure.inspector$fn__9673: java.lang.Object invoke()>
<clojure.instant$fn__8464: java.lang.Object invoke()>
<clojure.reflect$fn__12242: java.lang.Object invoke()>
<clojure.pprint$pprint$fn__10414: java.lang.Object invoke()>
<clojure.inspector$loading__6803__auto____9558: java.lang.Object invoke()>
<clojure.zip$fn__9462: java.lang.Object invoke()>
<clojure.math$fn__12465: java.lang.Object invoke()>
<clojure.string$fn__11973: java.lang.Object invoke()>
<clojure.core$fn__6831: java.lang.Object invoke()>
<clojure.core$fn__6187: java.lang.Object invoke()>
<clojure.java.io$fn__11667: java.lang.Object invoke()>
<clojure.core$fn__8341: java.lang.Object invoke()>
<clojure.test.tap$fn__9945: java.lang.Object invoke()>
<clojure.test.tap$fn__9933: java.lang.Object invoke()>
<clojure.set$fn__9325: java.lang.Object invoke()>
<clojure.math$loading__6803__auto____12463: java.lang.Object invoke()>
<clojure.java.basis$initial_basis: java.lang.Object invoke()>
<clojure.core.server$fn__8991: java.lang.Object invoke()>
<clojure.core$fn__8345: java.lang.Object invoke()>
<clojure.uuid$fn__8523: java.lang.Object invoke()>
<clojure.repl.deps$fn__12620: java.lang.Object invoke()>
<clojure.tools.deps.interop$loading__6803__auto____12596: java.lang.Object invoke()>
<clojure.datafy$fn__12132: java.lang.Object invoke()>
<clojure.pprint$fn__10288: java.lang.Object invoke()>
<clojure.pprint$fresh_line: java.lang.Object invoke()>
<clojure.core$fn__8343: java.lang.Object invoke()>
<clojure.core$all_ns: java.lang.Object invoke()>
<clojure.xml$fn__9406: java.lang.Object invoke()>
<clojure.java.basis.impl$fn__11955: java.lang.Object invoke()>
<clojure.core.server$loading__6803__auto____8987: java.lang.Object invoke()>
<clojure.stacktrace$fn__9735: java.lang.Object invoke()>
<clojure.core$make_hierarchy: java.lang.Object invoke()>
<clojure.core$fn__8597: java.lang.Object invoke()>
<clojure.reflect$fn__12282: java.lang.Object invoke()>
<clojure.repl$fn__11724: java.lang.Object invoke()>
<clojure.test$run_tests: java.lang.Object invoke()>
<clojure.core$fn__6828: java.lang.Object invoke()>
<clojure.java.javadoc$fn__11872: java.lang.Object invoke()>
<clojure.pprint$fn__11204: java.lang.Object invoke()>
<clojure.core$fn__8501: java.lang.Object invoke()>
<clojure.repl$pst: java.lang.Object invoke()>
<clojure.xml$fn__9403: java.lang.Object invoke()>
<clojure.test$fn__9767: java.lang.Object invoke()>
<clojure.test$fn__9824: java.lang.Object invoke()>
<clojure.test$fn__9861: java.lang.Object invoke()>
<clojure.core$load_data_readers: java.lang.Object invoke()>
<clojure.data$fn__12004: java.lang.Object invoke()>
<clojure.core$fn__8939: java.lang.Object invoke()>
<clojure.core.protocols$fn__8185: java.lang.Object invoke()>
<clojure.core.server$repl: java.lang.Object invoke()>
<clojure.java.basis.impl$loading__6803__auto____11953: java.lang.Object invoke()>
<clojure.core.protocols$fn__8312: java.lang.Object invoke()>
<clojure.core$fn__6193: java.lang.Object invoke()>
<clojure.repl.deps$loading__6803__auto____12618: java.lang.Object invoke()>
<clojure.walk$loading__6803__auto____9691: java.lang.Object invoke()>
<clojure.reflect$fn__12090: java.lang.Object invoke()>
<clojure.pprint$fn__11195: java.lang.Object invoke()>
<clojure.java.basis$current_basis: java.lang.Object invoke()>
<clojure.xml$loading__6803__auto____9401: java.lang.Object invoke()>
<clojure.set$loading__6803__auto____9323: java.lang.Object invoke()>
<clojure.core.reducers$fn__12430: java.lang.Object invoke()>
<clojure.reflect$fn__12302: java.lang.Object invoke()>
<clojure.reflect$fn__12274: java.lang.Object invoke()>
<clojure.core$gensym: java.lang.Object invoke()>
<clojure.data$loading__6803__auto____12002: java.lang.Object invoke()>
<clojure.pprint$fn__10384: java.lang.Object invoke()>
<clojure.core.reducers$fn__12337: java.lang.Object invoke()>
<clojure.template$loading__6803__auto____9755: java.lang.Object invoke()>
<clojure.reflect$fn__12086: java.lang.Object invoke()>
<clojure.core.server$stop_servers: java.lang.Object invoke()>
<clojure.test.junit$finish_suite: java.lang.Object invoke()>
<clojure.tools.deps.interop$fn__12598: java.lang.Object invoke()>
<clojure.template$fn__9757: java.lang.Object invoke()>
<clojure.core.server$fn__8994: java.lang.Object invoke()>
<clojure.java.browse$fn__11852: java.lang.Object invoke()>
<clojure.java.basis$fn__11967: java.lang.Object invoke()>
<clojure.java.io$fn__11489: java.lang.Object invoke()>
<clojure.set$rename: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>
<clojure.core$fn__7509: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>
<clojure.core$split_at: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>
<clojure.core$range: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>
<clojure.pprint$pprint: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.core$fn__7401: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>
<clojure.core$print_simple: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>
<clojure.instant$fn__8476: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>
<clojure.instant$print_calendar: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>
<clojure.core$and: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object,clojure.lang.ISeq)>
<clojure.core$and: java.lang.Object doInvoke(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.core$load_one: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.lang.LockingTransaction: java.lang.Object runInTransaction(java.util.concurrent.Callable)>
<clojure.core$throw_if: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,clojure.lang.ISeq)>
<clojure.core$find_ns: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.core$root_resource: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.template$apply_template: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.walk$postwalk_replace: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>
<clojure.core$every_QMARK_: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>
<clojure.core$ns_publics$fn__6270: java.lang.Object invoke(java.lang.Object)>
<clojure.core$eval: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.lang.Compiler: java.lang.Object eval(java.lang.Object)>
<clojure.core$short_array: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>
<clojure.lang.Numbers: short[] short_array(int,java.lang.Object)>
<clojure.core$short_array: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.lang.Numbers: short[] short_array(java.lang.Object)>
<clojure.core$fn__7383: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>
<clojure.lang.Util: boolean equiv(double,java.lang.Object)>
<clojure.java.io$fn__11647: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>
<clojure.lang.LockingTransaction: void releaseIfEnsured(clojure.lang.Ref)>
<java.util.HashSet: boolean contains(java.lang.Object)>
<clojure.test$assert_predicate: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>
<clojure.lang.LockingTransaction: java.lang.Object run(java.util.concurrent.Callable)>
<clojure.lang.AFn: java.lang.Object call()>
<clojure.core.proxy$clojure.lang.APersistentMap$ff19274a: java.lang.Object call()>
<java.util.HashMap: java.lang.Object get(java.lang.Object)>
<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
<clojure.walk$prewalk_demo: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.lang.Compiler$LocalBindingExpr: void <init>(clojure.lang.Compiler$LocalBinding,clojure.lang.Symbol)>
<clojure.lang.Var: java.lang.Object set(java.lang.Object)>
<clojure.lang.RT: clojure.lang.IPersistentCollection conj(clojure.lang.IPersistentCollection,java.lang.Object)>
<clojure.lang.RT: clojure.lang.Associative assoc(java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.lang.Compiler: clojure.lang.Compiler$PathNode commonPath(clojure.lang.Compiler$PathNode,clojure.lang.Compiler$PathNode)>
<clojure.lang.Compiler: java.lang.Class tagClass(java.lang.Object)>
<clojure.reflect.Field: clojure.lang.ISeq seq()>
<clojure.lang.APersistentSet: clojure.lang.ISeq seq()>
<clojure.lang.PersistentQueue: clojure.lang.ISeq seq()>
<clojure.core.proxy$clojure.lang.APersistentMap$ff19274a: clojure.lang.ISeq seq()>
<clojure.lang.LazySeq: clojure.lang.ISeq seq()>
<clojure.reflect.Method: clojure.lang.ISeq seq()>
<clojure.lang.PersistentTreeMap: clojure.lang.ISeq seq()>
<clojure.reflect.Constructor: clojure.lang.ISeq seq()>
<clojure.math$next_after__inliner__12584: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>
<clojure.xml$emit: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.xml$emit_element: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.pprint$prlabel: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,clojure.lang.ISeq)>
<clojure.core$mapcat: java.lang.Object invokeStatic(java.lang.Object,clojure.lang.ISeq)>
<clojure.pprint$prlabel: java.lang.Object doInvoke(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.core$extend: java.lang.Object invokeStatic(java.lang.Object,clojure.lang.ISeq)>
<clojure.core$alter_var_root: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,clojure.lang.ISeq)>
<clojure.core$protocol_QMARK_: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.core$extend: java.lang.Object doInvoke(java.lang.Object,java.lang.Object)>
<clojure.pprint$p_write_char: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>
<clojure.pprint$write_initial_lines: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>
<clojure.pprint$write_white_space: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.pprint$collect_clauses: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.core$second__5469: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.math$negate_exact__inliner__12545: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.lang.PersistentTreeSet: clojure.lang.IPersistentCollection cons(java.lang.Object)>
<clojure.core.proxy$clojure.lang.APersistentMap$ff19274a: clojure.lang.IPersistentCollection cons(java.lang.Object)>
<clojure.lang.LazySeq: clojure.lang.IPersistentCollection cons(java.lang.Object)>
<clojure.reflect.Method: clojure.lang.IPersistentCollection cons(java.lang.Object)>
<clojure.lang.PersistentHashSet: clojure.lang.IPersistentCollection cons(java.lang.Object)>
<clojure.lang.APersistentMap: clojure.lang.IPersistentCollection cons(java.lang.Object)>
<clojure.reflect.Constructor: clojure.lang.IPersistentCollection cons(java.lang.Object)>
<clojure.core$struct: java.lang.Object invokeStatic(java.lang.Object,clojure.lang.ISeq)>
<clojure.set$index$fn__9359: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.core$select_keys: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>
<clojure.pprint.proxy$java.io.Writer$IDeref$e595a7c1: boolean equals(java.lang.Object)>
<clojure.instant$read_instant_calendar: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.instant$parse_timestamp: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>
<clojure.java.process$io_task: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.core$bound_fn_STAR_: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.core$aset_byte: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object,clojure.lang.ISeq)>
<clojure.core$aset_byte: java.lang.Object doInvoke(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.core$aset_byte: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.lang.RT: byte byteCast(java.lang.Object)>
<clojure.core$print_prefix_map: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.core$doubles__6646: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.core.server$start_servers: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.core.server$parse_props: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.core.server$start_server: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.core$PrintWriter_on: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>
<clojure.core$assoc_BANG_: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object,clojure.lang.ISeq)>
<clojure.core$nnext__5477: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.core$assoc_BANG_: java.lang.Object doInvoke(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.test.tap$fn__9959: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.test.tap$print_diagnostics: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.test.tap$print_tap_fail: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.lang.ArityException: void <init>(int,java.lang.String)>
<clojure.lang.ArityException: void <init>(int,java.lang.String,java.lang.Throwable)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<clojure.lang.Compiler: java.lang.String demunge(java.lang.String)>
<clojure.core$generate_class$emit_forwarding_method__7686: java.lang.Object invoke(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.core$add_annotations: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.core$add_annotations: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>
<clojure.core$overload_name: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>
<clojure.lang.Compiler$HostExpr: void emitBoxReturn(clojure.lang.Compiler$ObjExpr,clojure.asm.commons.GeneratorAdapter,java.lang.Class)>
<clojure.core$the_class: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.core$nthrest: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>
<clojure.pprint$fixed_float: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.pprint$get_fixed: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.pprint$convert_ratio: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.pprint$round_str: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.pprint$float_parts: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.core.reducers$do_rfn: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.walk$postwalk: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>
<clojure.reflect$field_descriptor__GT_class_symbol: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.core$nil_QMARK___inliner__5521: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.core$fn__7457: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>
<clojure.core$lift_ns: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.set$rename_keys: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>
<clojure.math$cbrt__inliner__12503: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.core$every_pred: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object,clojure.lang.ISeq)>
<clojure.core$list_STAR_: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.zip$xml_zip: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.core$every_pred: java.lang.Object doInvoke(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.core$reductions: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.core$float__inliner__6136: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.core$sigs: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.core$sigs$resolve_tag__5502: java.lang.Object invoke(java.lang.Object)>
<clojure.core$sigs$asig__5500: java.lang.Object invoke(java.lang.Object)>
<clojure.core$create_ns: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.lang.Namespace: clojure.lang.Namespace findOrCreate(clojure.lang.Symbol)>
<clojure.lang.PersistentQueue: boolean equiv(java.lang.Object)>
<java.lang.String: java.lang.String[] split(java.lang.String,int)>
<clojure.lang.LongRange: java.lang.Object reduce(clojure.lang.IFn,java.lang.Object)>
<clojure.lang.PersistentList: java.lang.Object reduce(clojure.lang.IFn,java.lang.Object)>
<clojure.lang.PersistentVector: java.lang.Object reduce(clojure.lang.IFn,java.lang.Object)>
<clojure.lang.StringSeq: java.lang.Object reduce(clojure.lang.IFn,java.lang.Object)>
<clojure.lang.Range: java.lang.Object reduce(clojure.lang.IFn,java.lang.Object)>
<clojure.lang.Cycle: java.lang.Object reduce(clojure.lang.IFn,java.lang.Object)>
<clojure.lang.Iterate: java.lang.Object reduce(clojure.lang.IFn,java.lang.Object)>
<clojure.lang.ArraySeq: java.lang.Object reduce(clojure.lang.IFn,java.lang.Object)>
<clojure.lang.Repeat: java.lang.Object reduce(clojure.lang.IFn,java.lang.Object)>
<clojure.lang.PersistentQueue: boolean equals(java.lang.Object)>
<clojure.lang.Compiler$VectorExpr: clojure.lang.Compiler$Expr parse(clojure.lang.Compiler$C,clojure.lang.IPersistentVector)>
<clojure.lang.Compiler$MapExpr: clojure.lang.Compiler$Expr parse(clojure.lang.Compiler$C,clojure.lang.IPersistentMap)>
<clojure.lang.Compiler$ConstantExpr: void <init>(java.lang.Object)>
<clojure.lang.Compiler: clojure.lang.Compiler$Expr analyze(clojure.lang.Compiler$C,java.lang.Object)>
<clojure.lang.PersistentHashMap$BitmapIndexedNode: clojure.lang.PersistentHashMap$INode assoc(int,int,java.lang.Object,java.lang.Object,clojure.lang.Box)>
<clojure.lang.PersistentHashMap: int hash(java.lang.Object)>
<clojure.math$floor_div__inliner__12548: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>
<clojure.core$cond__GT__GT_: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object,clojure.lang.ISeq)>
<clojure.core$butlast__5507: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.core$even_QMARK_: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.core$gensym: java.lang.Object invokeStatic()>
<clojure.core$object_array__inliner__6590: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.core$cond__GT__GT_: java.lang.Object doInvoke(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.core$fn__7499: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>
<clojure.core$num__inliner__6130: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.core$emit_hinted_impl: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>
<clojure.set$subset_QMARK_$fn__9386: java.lang.Object invoke(java.lang.Object)>
<clojure.core$fn__7423: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>
<clojure.core$with_open: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object,clojure.lang.ISeq)>
<clojure.core$subvec: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.core$subvec: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>
<clojure.lang.PersistentHashMap$BitmapIndexedNode: clojure.lang.PersistentHashMap$INode assoc(java.util.concurrent.atomic.AtomicReference,int,int,java.lang.Object,java.lang.Object,clojure.lang.Box)>
<clojure.core$if_not: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.lang.Reflector: java.lang.Object invokeInstanceMethod(java.lang.Object,java.lang.String,java.lang.Object[])>
<clojure.lang.Reflector: java.lang.Object invokeMatchingMethod(java.lang.String,java.util.List,java.lang.Object,java.lang.Object[])>
<clojure.lang.Compiler$CompilerException: void <init>(java.lang.String,int,int,java.lang.Throwable)>
<clojure.lang.Compiler$CompilerException: void <init>(java.lang.String,int,int,clojure.lang.Symbol,java.lang.Throwable)>
<clojure.core$if_not: java.lang.Object invoke(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.lang.Compiler$CompilerException: void <init>(java.lang.String,int,int,clojure.lang.Symbol,clojure.lang.Keyword,java.lang.Throwable)>
<clojure.core$if_not: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.lang.Compiler$CompilerException: java.lang.String makeMsg(java.lang.String,int,int,clojure.lang.Symbol,clojure.lang.Keyword,java.lang.Throwable)>
<clojure.lang.Reflector: java.lang.String noMethodReport(java.lang.String,java.lang.Object,java.lang.Object[])>
<clojure.core$if_not: java.lang.Object invoke(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.lang.Reflector: java.lang.Object[] boxArgs(java.lang.Class[],java.lang.Object[])>
<clojure.core$generate_interface$fn__7794: java.lang.Object invoke(java.lang.Object)>
<clojure.core$destructure: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.core$rand_nth: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.core$rand_int: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.core$with_open: java.lang.Object doInvoke(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.zip$zipper: java.lang.Object invoke(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.lang.Reflector: java.lang.Object invokeConstructor(java.lang.Class,java.lang.Object[])>
<clojure.core$update: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,clojure.lang.ISeq)>
<clojure.core$apply: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,clojure.lang.ISeq)>
<clojure.lang.Reflector: java.lang.Object invokeStaticMethod(java.lang.String,java.lang.String,java.lang.Object[])>
<clojure.core$update: java.lang.Object doInvoke(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.core$update: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.core$update: java.lang.Object invoke(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.core$update: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.core$update: java.lang.Object invoke(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.lang.Reflector: java.lang.Object getInstanceField(java.lang.Object,java.lang.String)>
<clojure.core$update: java.lang.Object invoke(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.core$time: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.core$update: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.math$log1p__inliner__12575: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.lang.Reflector: java.lang.Object invokeNoArgInstanceMember(java.lang.Object,java.lang.String,boolean)>
<clojure.core$subseq: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.core$subseq: java.lang.Object invoke(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.core$subseq: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.lang.RT: clojure.lang.IPersistentSet set(java.lang.Object[])>
<clojure.core$aset: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object,clojure.lang.ISeq)>
<clojure.core$aset: java.lang.Object doInvoke(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.core$aset: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.core$supers: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.core$disj: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>
<clojure.core$bases: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.lang.Reflector: java.lang.Object boxArg(java.lang.Class,java.lang.Object)>
<clojure.core$println: java.lang.Object doInvoke(java.lang.Object)>
<clojure.core$when_let: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object,clojure.lang.ISeq)>
<clojure.core$with_redefs: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object,clojure.lang.ISeq)>
<clojure.data$diff_associative$fn__12026: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.core$with_redefs: java.lang.Object doInvoke(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.core$frequencies: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.core$clear_agent_errors: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.core.server$thread: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,clojure.lang.ISeq)>
<clojure.core$when_let: java.lang.Object doInvoke(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.core$hash_ordered_coll: long invokeStatic(java.lang.Object)>
<clojure.lang.Murmur3: int hashOrdered(java.lang.Iterable)>
<clojure.core$alength__inliner__6220: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.math$scalb: double invokeStatic(double,java.lang.Object)>
<clojure.reflect$constructor__GT_map: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.reflect$parse_flags: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>
<clojure.java.io$reader: java.lang.Object invokeStatic(java.lang.Object,clojure.lang.ISeq)>
<clojure.core.server$thread: java.lang.Object doInvoke(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.java.io$reader: java.lang.Object doInvoke(java.lang.Object,java.lang.Object)>
<clojure.test$try_expr: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.tools.deps.interop$invoke_tool: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.edn$read_string: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.core$ex_info: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>
<clojure.core$ns_name: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.core$hash: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.test$try_expr: java.lang.Object invoke(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.stacktrace$print_throwable: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.core$printf: java.lang.Object invokeStatic(java.lang.Object,clojure.lang.ISeq)>
<clojure.core$unchecked_subtract__inliner__5682: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>
<clojure.core$use: java.lang.Object invokeStatic(clojure.lang.ISeq)>
<clojure.core$use: java.lang.Object doInvoke(java.lang.Object)>
<java.lang.invoke.MethodType$ConcurrentWeakInternSet: java.lang.Object get(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>
<java.lang.invoke.MethodType$ConcurrentWeakInternSet: void expungeStaleElements()>
<java.lang.invoke.MethodType$ConcurrentWeakInternSet: java.lang.Object add(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>
<clojure.set$rename_keys$fn__9349: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.data$diff_associative_key: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.core$emit_defrecord: java.lang.Object invoke(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.core$find: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>
<clojure.lang.RT: java.lang.Object find(java.lang.Object,java.lang.Object)>
<clojure.pprint$compile_raw_string: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>
<clojure.core$root_directory: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.test.tap$fn__9955: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.pprint$nl_t_QMARK_: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.test$assert_any: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>
<clojure.data$diff_sequential: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>
<clojure.data$diff_associative: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.core$bit_shift_left: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>
<clojure.lang.Numbers: long shiftLeft(java.lang.Object,java.lang.Object)>
<clojure.inspector$fn__9640: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.datafy$sortmap: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.math$log__inliner__12494: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.core$int__inliner__5601: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.repl$stack_element_str: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.repl$demunge: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.set$project: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>
<clojure.core$fn__7417: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>
<java.util.EnumMap: java.lang.Object put(java.lang.Enum,java.lang.Object)>
<java.util.EnumMap: void typeCheck(java.lang.Enum)>
<clojure.test.tap$fn__9949: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.test.tap$print_tap_diagnostic: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.test$run_test: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.pprint$pprint_simple_code_list: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.pprint$pprint_simple_code_list$fn__11408: java.lang.Object invoke()>
<clojure.core$vswap_BANG_: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,clojure.lang.ISeq)>
<clojure.core$vswap_BANG_: java.lang.Object doInvoke(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.core$intern: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.lang.Var: clojure.lang.Var intern(clojure.lang.Namespace,clojure.lang.Symbol,java.lang.Object)>
<clojure.core$intern: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>
<clojure.lang.Var: clojure.lang.Var intern(clojure.lang.Namespace,clojure.lang.Symbol)>
<clojure.lang.Var: void setMeta(clojure.lang.IPersistentMap)>
<clojure.core$unchecked_short__inliner__6154: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.pprint$set_logical_block_callback: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>
<clojure.pprint$pprint_let: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.pprint$pprint_let$fn__11358: java.lang.Object invoke()>
<clojure.core$longs__6653: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.core$fn__7405: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>
<clojure.core$rseq: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.lang.PersistentTreeMap: clojure.lang.ISeq rseq()>
<clojure.core$identical_QMARK___inliner__5581: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>
<clojure.core$memfn: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object,clojure.lang.ISeq)>
<clojure.core$gensym: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.zip$insert_left: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>
<clojure.core$assoc__5493: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object,clojure.lang.ISeq)>
<clojure.core$memfn: java.lang.Object doInvoke(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.pprint$write_line: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.core$get_thread_bindings: java.lang.Object invokeStatic()>
<clojure.math$multiply_exact__inliner__12536: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>
<clojure.pprint$defdirectives: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,clojure.lang.ISeq)>
<clojure.pprint$defdirectives: java.lang.Object doInvoke(java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.pprint$parse_lb_options: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>
<clojure.core$into_array: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>
<clojure.pprint$extract_flags: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>
<java.util.Arrays: void sort(java.lang.Object[],java.util.Comparator)>
<java.util.Arrays: void legacyMergeSort(java.lang.Object[],java.util.Comparator)>
<clojure.core$throw_if: java.lang.Object doInvoke(java.lang.Object,java.lang.Object,java.lang.Object)>
<java.util.Arrays: void mergeSort(java.lang.Object[],java.lang.Object[],int,int,int,java.util.Comparator)>
<clojure.lang.AFunction: int compare(java.lang.Object,java.lang.Object)>
<clojure.pprint$get_pretty_writer: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.core$format: java.lang.Object doInvoke(java.lang.Object,java.lang.Object)>
<clojure.core$print_tagged_object: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.core$when_class: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object,clojure.lang.ISeq)>
<clojure.core$fn__7530: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>
<clojure.core$when_class: java.lang.Object doInvoke(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.core$Throwable__GT_map: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.core$merge: java.lang.Object invokeStatic(clojure.lang.ISeq)>
<clojure.core$peek: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.core$Throwable__GT_map$fn__7552: java.lang.Object invoke()>
<clojure.core$char_array__inliner__6581: java.lang.Object invokeStatic(clojure.lang.ISeq)>
<clojure.core$emit_method_builder: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.core$char_array__inliner__6581: java.lang.Object doInvoke(java.lang.Object)>
<clojure.lang.Util$2: boolean equiv(java.lang.Object,java.lang.Object)>
<clojure.lang.PersistentTreeSet: boolean equals(java.lang.Object)>
<clojure.core.proxy$clojure.lang.APersistentMap$ff19274a: boolean equals(java.lang.Object)>
<clojure.lang.LazySeq: boolean equals(java.lang.Object)>
<clojure.lang.APersistentVector: boolean equals(java.lang.Object)>
<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: boolean equals(java.lang.Object)>
<clojure.reflect.Method: boolean equals(java.lang.Object)>
<clojure.lang.Symbol: boolean equals(java.lang.Object)>
<clojure.lang.PersistentTreeMap: boolean equals(java.lang.Object)>
<clojure.lang.APersistentMap: boolean equals(java.lang.Object)>
<clojure.reflect.Constructor: boolean equals(java.lang.Object)>
<java.util.AbstractMap: boolean equals(java.lang.Object)>
<clojure.core$elide_top_frames: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>
<clojure.asm.commons.Method: clojure.asm.commons.Method getMethod(java.lang.String,boolean)>
<clojure.asm.commons.Method: java.lang.String getDescriptor(java.lang.String,boolean)>
<clojure.core$emit_method_builder: java.lang.Object invoke(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.core.proxy$clojure.lang.APersistentMap$ff19274a: java.lang.Object get(java.lang.Object)>
<clojure.reflect.Method: java.lang.Object get(java.lang.Object)>
<clojure.lang.APersistentMap: java.lang.Object get(java.lang.Object)>
<clojure.reflect.Constructor: java.lang.Object get(java.lang.Object)>
<clojure.core$setup_reference: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>
<clojure.lang.Var: void setValidator(clojure.lang.IFn)>
<clojure.lang.ARef: void setValidator(clojure.lang.IFn)>
<clojure.core$find_var: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.lang.Var: clojure.lang.Var find(clojure.lang.Symbol)>
<clojure.main$skip_if_eol: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.lang.Util: boolean equiv(java.lang.Object,long)>
<clojure.core$mapcat: java.lang.Object doInvoke(java.lang.Object,java.lang.Object)>
<clojure.lang.Util: int hasheq(java.lang.Object)>
<clojure.core$send_off: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,clojure.lang.ISeq)>
<clojure.core$apply: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.core$send_off: java.lang.Object doInvoke(java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.lang.Murmur3: int hashUnordered(java.lang.Iterable)>
<clojure.core$_EQ_: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,clojure.lang.ISeq)>
<clojure.core$_EQ_: java.lang.Object doInvoke(java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.core$_EQ_: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>
<clojure.pprint$pp: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>
<clojure.core$ams_check: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object)>
<java.lang.invoke.MethodType: java.lang.invoke.MethodType changeReturnType(java.lang.Class)>
<clojure.lang.PersistentTreeSet: clojure.lang.PersistentTreeSet create(clojure.lang.ISeq)>
<clojure.lang.PersistentTreeSet: clojure.lang.IPersistentSet cons(java.lang.Object)>
<clojure.lang.PersistentTreeSet: clojure.lang.PersistentTreeSet create(java.util.Comparator,clojure.lang.ISeq)>
<clojure.lang.PersistentTreeSet: boolean equiv(java.lang.Object)>
<clojure.math$signum__inliner__12557: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.lang.PersistentTreeSet: clojure.lang.IPersistentSet disjoin(java.lang.Object)>
<clojure.lang.LispReader$ListReader: java.lang.Object invoke(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.lang.PersistentList: clojure.lang.IPersistentList create(java.util.List)>
<clojure.lang.LispReader: java.util.List readDelimitedList(char,java.io.PushbackReader,boolean,java.lang.Object,java.lang.Object)>
<clojure.java.io$fn__11673: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.string$last_index_of: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,long)>
<clojure.java.io$file: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,clojure.lang.ISeq)>
<clojure.java.io$file: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>
<clojure.java.io$file: java.lang.Object doInvoke(java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.string$last_index_of: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>
<clojure.core$filterv: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>
<clojure.string$upper_case: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.core$doto: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object,clojure.lang.ISeq)>
<clojure.core$doto: java.lang.Object doInvoke(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.core.protocols$fn__8254: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.core.protocols$seq_reduce: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.core.protocols$fn__8254: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>
<clojure.core.protocols$seq_reduce: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>
<clojure.core$get: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.pprint$pr_with_base: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.core$get: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>
<clojure.core$short_array__inliner__6584: java.lang.Object invokeStatic(clojure.lang.ISeq)>
<clojure.core$short_array__inliner__6584: java.lang.Object doInvoke(java.lang.Object)>
<clojure.core.reducers$flatten: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.core.reducers$folder: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>
<clojure.lang.Namespace: clojure.lang.Namespace find(clojure.lang.Symbol)>
<clojure.core$print_ctor: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.core$fn__7385$fn__7386: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.core$fn__7413$fn__7414: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.math$expm1__inliner__12572: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.instant$verify: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.instant$verify: java.lang.Object invoke(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.instant$verify: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.math$get_exponent__inliner__12581: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.core$byte: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.core$fn__7580: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>
<clojure.core$print_throwable: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>
<clojure.datafy$fn__12143: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.core$requiring_resolve: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.core$group_by: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>
<clojure.lang.Compiler$HostExpr: java.lang.Class maybeClass(java.lang.Object,boolean)>
<clojure.zip$left: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.core$seq_to_map_for_destructuring: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.test$join_fixtures: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.core$case_map: java.lang.Object invoke(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.core$min: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,clojure.lang.ISeq)>
<clojure.core$min: java.lang.Object doInvoke(java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.core$merge$fn__6040: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.core$_GT___inliner__5635: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>
<clojure.pprint$fn__10219: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>
<clojure.walk$walk$fn__9695: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.reflect$parse_flags$fn__12164: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.core$run_BANG_$fn__8906: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.set$intersection$fn__9333: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.core$filterv$fn__8552: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.pprint$map_params$fn__11060: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.core$load_data_reader_file$fn__8929: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.set$join$fn__9372: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.set$select$fn__9341: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.core$mapv$fn__8549: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.set$difference$fn__9338: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.core$declare: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,clojure.lang.ISeq)>
<clojure.core$fn__7480: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>
<clojure.core$declare: java.lang.Object doInvoke(java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.core$load_all: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.lang.LispReader$UnquoteReader: java.lang.Object invoke(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.lang.RT: clojure.lang.ISeq list(java.lang.Object,java.lang.Object)>
<clojure.pprint$add_to_buffer: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>
<clojure.core.server$io_prepl: java.lang.Object invokeStatic(clojure.lang.ISeq)>
<clojure.core.server$io_prepl: java.lang.Object doInvoke(java.lang.Object)>
<clojure.core$fn__7413: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>
<clojure.core$vector_of: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,clojure.lang.ISeq)>
<clojure.core$vector_of: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.pprint$iterate_sublist: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.pprint$execute_sub_format: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.pprint$get_format_arg: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.core$vector_of: java.lang.Object doInvoke(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.core$vector_of: java.lang.Object invoke(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.core$vector_of: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.core$pr_str: java.lang.Object doInvoke(java.lang.Object)>
<clojure.core$vector_of: java.lang.Object invoke(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.core$vector_of: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.core$juxt: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object,clojure.lang.ISeq)>
<clojure.core$juxt: java.lang.Object doInvoke(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.zip$up: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.zip$make_node: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.core$vector_of: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>
<clojure.core$vector_of: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.java.javadoc$add_local_javadoc: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.core$mk_am: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.core$not_EQ_: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,clojure.lang.ISeq)>
<clojure.core$not_EQ_: java.lang.Object doInvoke(java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.core$float_array: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>
<clojure.lang.Numbers: float[] float_array(int,java.lang.Object)>
<clojure.core$float_array: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.lang.Numbers: float[] float_array(java.lang.Object)>
<clojure.math$decrement_exact__inliner__12542: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.lang.AFn: java.lang.Object throwArity(int)>
<clojure.core.proxy$clojure.lang.APersistentMap$ff19274a: java.lang.Object throwArity(int)>
<clojure.lang.AFn: java.lang.Object invoke(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.lang.AFn: java.lang.Object invoke(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.lang.AFn: java.lang.Object invoke(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.lang.AFn: java.lang.Object invoke(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.lang.AFn: java.lang.Object invoke(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.lang.AFn: java.lang.Object invoke(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.lang.AFn: java.lang.Object invoke(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.lang.AFn: java.lang.Object invoke(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.test.junit$start_element: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,clojure.lang.ISeq)>
<clojure.test.junit$escape_xml: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.test.junit$indent: java.lang.Object invokeStatic()>
<clojure.lang.AFn: java.lang.Object invoke(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.inspector$fn__9580: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>
<clojure.lang.AFn: java.lang.Object invoke(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.lang.AFn: java.lang.Object invoke(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.lang.AFn: java.lang.Object invoke(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.lang.AFn: java.lang.Object invoke(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.lang.AFn: java.lang.Object invoke(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.lang.AFn: java.lang.Object invoke(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.lang.AFn: java.lang.Object invoke(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.lang.AFn: java.lang.Object invoke(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.test.junit$start_element: java.lang.Object doInvoke(java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.lang.AFn: java.lang.Object invoke(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object[])>
<clojure.lang.AFn: java.lang.Object applyToHelper(clojure.lang.IFn,clojure.lang.ISeq)>
<clojure.core.reducers$foldvec: java.lang.Object invoke(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.pprint$map_params: java.lang.Object invoke(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.pprint$group_by_STAR_$fn__10486: java.lang.Object invoke(java.lang.Object)>
<clojure.core.proxy$clojure.lang.APersistentMap$ff19274a: java.lang.Object invoke(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.core$_DOT__DOT_: java.lang.Object invoke(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.core.proxy$clojure.lang.APersistentMap$ff19274a: java.lang.Object invoke(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.core.proxy$clojure.lang.APersistentMap$ff19274a: java.lang.Object invoke(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.core.proxy$clojure.lang.APersistentMap$ff19274a: java.lang.Object invoke(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.core.proxy$clojure.lang.APersistentMap$ff19274a: java.lang.Object invoke(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.core.proxy$clojure.lang.APersistentMap$ff19274a: java.lang.Object invoke(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.core.proxy$clojure.lang.APersistentMap$ff19274a: java.lang.Object invoke(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.core.proxy$clojure.lang.APersistentMap$ff19274a: java.lang.Object invoke(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.core.proxy$clojure.lang.APersistentMap$ff19274a: java.lang.Object invoke(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.core.proxy$clojure.lang.APersistentMap$ff19274a: java.lang.Object invoke(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.core.proxy$clojure.lang.APersistentMap$ff19274a: java.lang.Object invoke(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.core.proxy$clojure.lang.APersistentMap$ff19274a: java.lang.Object invoke(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.core.proxy$clojure.lang.APersistentMap$ff19274a: java.lang.Object invoke(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.core.proxy$clojure.lang.APersistentMap$ff19274a: java.lang.Object invoke(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.core.proxy$clojure.lang.APersistentMap$ff19274a: java.lang.Object invoke(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.core.proxy$clojure.lang.APersistentMap$ff19274a: java.lang.Object invoke(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.core.proxy$clojure.lang.APersistentMap$ff19274a: java.lang.Object invoke(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.core.proxy$clojure.lang.APersistentMap$ff19274a: java.lang.Object invoke(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object[])>
<clojure.core$def_aset: java.lang.Object invoke(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.lang.RestFn: java.lang.Object invoke(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.lang.RestFn: java.lang.Object invoke(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.lang.RestFn: java.lang.Object invoke(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.lang.RestFn: java.lang.Object invoke(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.pprint$start_block: java.lang.Object invoke(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.lang.RestFn: java.lang.Object invoke(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.lang.RestFn: java.lang.Object invoke(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.pprint$format_integer: java.lang.Object invoke(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.lang.RestFn: java.lang.Object invoke(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.core.reducers$fn__12461: java.lang.Object invoke(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.lang.RestFn: java.lang.Object invoke(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.lang.RestFn: java.lang.Object invoke(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.lang.RestFn: java.lang.Object invoke(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.lang.RestFn: java.lang.Object invoke(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.core.reducers$fn__12459: java.lang.Object invoke(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.lang.RestFn: java.lang.Object invoke(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.lang.RestFn: java.lang.Object invoke(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.lang.Keyword: java.lang.Object invoke(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.lang.Keyword: java.lang.Object invoke(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.lang.Keyword: java.lang.Object invoke(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.lang.Keyword: java.lang.Object invoke(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.lang.Keyword: java.lang.Object invoke(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.lang.Keyword: java.lang.Object invoke(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.lang.Keyword: java.lang.Object invoke(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.lang.Keyword: java.lang.Object invoke(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.lang.Keyword: java.lang.Object invoke(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.lang.Keyword: java.lang.Object invoke(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.lang.Keyword: java.lang.Object invoke(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.lang.Keyword: java.lang.Object invoke(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.core$emit_deftype_STAR_: java.lang.Object invoke(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.lang.Keyword: java.lang.Object invoke(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.lang.Keyword: java.lang.Object invoke(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.lang.Keyword: java.lang.Object invoke(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.lang.Keyword: java.lang.Object invoke(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.lang.Keyword: java.lang.Object invoke(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.lang.Keyword: java.lang.Object invoke(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object[])>
<clojure.lang.RestFn: java.lang.Object invoke(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.lang.RestFn: java.lang.Object invoke(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.lang.RestFn: java.lang.Object invoke(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.core.reducers$do_curried: java.lang.Object invoke(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.core$transduce: java.lang.Object invoke(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.lang.RestFn: java.lang.Object invoke(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.pprint$fn__10256: java.lang.Object invoke(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.core$for: java.lang.Object invoke(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.core$print_prefix_map: java.lang.Object invoke(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.lang.RestFn: java.lang.Object invoke(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object[])>
<clojure.core$_cache_protocol_fn: java.lang.Object invoke(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.test$is: java.lang.Object invoke(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.pprint$format_roman: java.lang.Object invoke(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.core$apply: java.lang.Object invoke(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.core$apply: java.lang.Object invoke(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.core$rsubseq: java.lang.Object invoke(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.pprint$modify_case: java.lang.Object invoke(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.core$areduce: java.lang.Object invoke(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.core$if_let: java.lang.Object invoke(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.pprint$round_str: java.lang.Object invoke(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.test.junit$message_el: java.lang.Object invoke(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.pprint$fn__10258: java.lang.Object invoke(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.pprint$setf: java.lang.Object invoke(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.core$mapv: java.lang.Object invoke(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.pprint$fn__10254: java.lang.Object invoke(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.core$list_STAR_: java.lang.Object invoke(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.core$if_some: java.lang.Object invoke(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.core$add_doc_and_meta: java.lang.Object invoke(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.lang.Var: java.lang.Object invoke(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.lang.Var: java.lang.Object invoke(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.lang.Var: java.lang.Object invoke(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.lang.RT: java.lang.Object[] seqToArray(clojure.lang.ISeq)>
<clojure.lang.RT: int boundedLength(clojure.lang.ISeq,int)>
<clojure.core.reducers$rfn: java.lang.Object invoke(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.instant$construct_date: java.lang.Object invoke(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.pprint$capitalize_string$fn__10751: java.lang.Object invoke(java.lang.Object)>
<clojure.core$partial$fn__5920: java.lang.Object invoke()>
<clojure.core$juxt$fn__5903: java.lang.Object invoke()>
<clojure.core$comp$fn__5888: java.lang.Object invoke()>
<clojure.core$completing$fn__8542: java.lang.Object invoke()>
<clojure.core.reducers$monoid$m__12445: java.lang.Object invoke()>
<clojure.core$partitionv_all: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.math$IEEE_remainder__inliner__12506: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>
<clojure.pprint$choice_conditional: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.core$eduction: java.lang.Object invokeStatic(clojure.lang.ISeq)>
<clojure.pprint$execute_format: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.pprint$needs_pretty: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.core$eduction: java.lang.Object doInvoke(java.lang.Object)>
<clojure.pprint$execute_format: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>
<clojure.pprint$map_passing_context: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.string$escape: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>
<clojure.pprint$pprint_code_list: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.pprint$pprint_reader_macro: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.core$trampoline: java.lang.Object invokeStatic(java.lang.Object,clojure.lang.ISeq)>
<clojure.core$trampoline: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.reflect$fn__12148: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.core$char_array: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>
<clojure.lang.Numbers: char[] char_array(int,java.lang.Object)>
<clojure.core$trampoline: java.lang.Object doInvoke(java.lang.Object,java.lang.Object)>
<clojure.core$trampoline$fn__6955: java.lang.Object invoke()>
<clojure.core$char_array: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.core$load_data_reader_file: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>
<clojure.core.reducers$foldvec: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.core.reducers$fjinvoke: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.inspector$fn__9586: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>
<clojure.lang.PersistentHashMap: clojure.lang.PersistentHashMap create(java.lang.Object[])>
<clojure.lang.ATransientMap: clojure.lang.ITransientMap assoc(java.lang.Object,java.lang.Object)>
<clojure.lang.PersistentHashMap: clojure.lang.PersistentHashMap createWithCheck(java.lang.Object[])>
<clojure.pprint$pll_mod_body: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>
<clojure.test$fn__9798: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.test$testing_contexts_str: java.lang.Object invokeStatic()>
<clojure.lang.PersistentHashMap: clojure.lang.PersistentHashMap create(clojure.lang.IPersistentMap,java.lang.Object[])>
<clojure.core.server$repl_read: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>
<clojure.main$skip_whitespace: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.asm.commons.GeneratorAdapter: void throwException(clojure.asm.Type,java.lang.String)>
<clojure.core$generate_proxy$to_types__7134: java.lang.Object invoke(java.lang.Object)>
<clojure.core$group_by_sig: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.core$generate_proxy$gen_bridge__7136: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.core$generate_proxy$gen_method__7139: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.core$generate_proxy$fn__7154: java.lang.Object invoke()>
<clojure.pprint$with_pretty_writer: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object,clojure.lang.ISeq)>
<clojure.instant$read_instant_timestamp: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.core$some__GT__GT_: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object,clojure.lang.ISeq)>
<clojure.core$some__GT__GT_: java.lang.Object doInvoke(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.core$find_field: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>
<clojure.pprint$insert_decimal: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>
<clojure.pprint$expand_fixed: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.pprint$with_pretty_writer: java.lang.Object doInvoke(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.test$are: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,clojure.lang.ISeq)>
<clojure.core$definline: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object,clojure.lang.ISeq)>
<clojure.reflect$declared_fields: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.core$reduced_QMARK___inliner__5981: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.test$are: java.lang.Object doInvoke(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.core$defmacro: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object,clojure.lang.ISeq)>
<clojure.walk$macroexpand_all$fn__9730: java.lang.Object invoke(java.lang.Object)>
<clojure.math$scalb__inliner__12593: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>
<clojure.core$defmacro: java.lang.Object doInvoke(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.core$definline: java.lang.Object doInvoke(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.core$underive: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.core$flatten: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.core$make_hierarchy: java.lang.Object invokeStatic()>
<clojure.pprint$map_params: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.pprint$check_flags: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>
<clojure.pprint$cl_format: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,clojure.lang.ISeq)>
<clojure.core$underive: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>
<clojure.core$fn__7503: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>
<clojure.core$check_valid_options: java.lang.Object doInvoke(java.lang.Object,java.lang.Object)>
<clojure.core$extenders: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.core$aset_int: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object,clojure.lang.ISeq)>
<clojure.core$aset_int: java.lang.Object doInvoke(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.core$aset_int: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.core$aset__inliner__6229: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.pprint$exponential_float: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.pprint$insert_scaled_decimal: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>
<clojure.lang.Numbers: long bitOpsCast(java.lang.Object)>
<clojure.lang.Numbers: long shiftRight(java.lang.Object,java.lang.Object)>
<clojure.lang.Numbers: long unsignedShiftRight(java.lang.Object,java.lang.Object)>
<clojure.string$ends_with_QMARK_: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>
<clojure.reflect$fn__12300: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>
<clojure.reflect$resource_name: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.lang.Numbers: double[] double_array(int,java.lang.Object)>
<clojure.lang.RT: clojure.lang.ISeq next(java.lang.Object)>
<clojure.lang.Numbers: double[] double_array(java.lang.Object)>
<clojure.edn$read_string: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>
<clojure.lang.EdnReader: java.lang.Object readString(java.lang.String,clojure.lang.IPersistentMap)>
<clojure.lang.Numbers: long[] long_array(int,java.lang.Object)>
<clojure.lang.Numbers: long[] long_array(java.lang.Object)>
<clojure.core$abs__inliner__5646: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.lang.Numbers: byte[] byte_array(int,java.lang.Object)>
<clojure.lang.Numbers: byte[] byte_array(java.lang.Object)>
<clojure.lang.Numbers: boolean[] boolean_array(int,java.lang.Object)>
<clojure.lang.Numbers: boolean[] boolean_array(java.lang.Object)>
<clojure.core$cycle: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.math$round__inliner__12524: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.lang.Numbers: long not(java.lang.Object)>
<clojure.xml$parse: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>
<clojure.lang.Numbers: long or(java.lang.Object,java.lang.Object)>
<clojure.lang.Numbers: long xor(java.lang.Object,java.lang.Object)>
<clojure.lang.Numbers: long andNot(java.lang.Object,java.lang.Object)>
<clojure.lang.Numbers: long clearBit(java.lang.Object,java.lang.Object)>
<clojure.lang.Numbers: long setBit(java.lang.Object,java.lang.Object)>
<clojure.xml$parse: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.lang.Numbers: long flipBit(java.lang.Object,java.lang.Object)>
<clojure.lang.Numbers: boolean testBit(java.lang.Object,java.lang.Object)>
<clojure.core$chunk_next: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.lang.ChunkedCons: clojure.lang.ISeq chunkedNext()>
<clojure.lang.Range: clojure.lang.ISeq chunkedNext()>
<clojure.core$fn__7389: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>
<clojure.core.reducers$take_while: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>
<clojure.core.reducers$reducer: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>
<clojure.pprint$fn__10200: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>
<java.util.HashMap: int hash(java.lang.Object)>
<clojure.lang.ASeq: int hashCode()>
<clojure.reflect.Field: int hashCode()>
<clojure.lang.APersistentSet: int hashCode()>
<clojure.lang.PersistentQueue: int hashCode()>
<clojure.core.proxy$clojure.lang.APersistentMap$ff19274a: int hashCode()>
<clojure.lang.LazySeq: int hashCode()>
<clojure.lang.Keyword: int hashCode()>
<clojure.lang.APersistentVector: int hashCode()>
<clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a: int hashCode()>
<clojure.reflect.Method: int hashCode()>
<clojure.lang.Symbol: int hashCode()>
<clojure.lang.APersistentMap: int hashCode()>
<clojure.reflect.Constructor: int hashCode()>
<java.util.AbstractMap: int hashCode()>
<clojure.core$ffirst__5471: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.core$alter_meta_BANG_: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,clojure.lang.ISeq)>
<clojure.lang.AReference: clojure.lang.IPersistentMap alterMeta(clojure.lang.IFn,clojure.lang.ISeq)>
<java.util.HashMap: java.util.HashMap$Node getNode(int,java.lang.Object)>
<clojure.core$_LT__EQ___inliner__5632: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>
<clojure.core$alter_meta_BANG_: java.lang.Object doInvoke(java.lang.Object,java.lang.Object,java.lang.Object)>
<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode getTreeNode(int,java.lang.Object)>
<clojure.set$superset_QMARK_$fn__9391: java.lang.Object invoke(java.lang.Object)>
<clojure.math$next_up__inliner__12587: java.lang.Object invokeStatic(java.lang.Object)>
<java.util.HashMap: boolean containsKey(java.lang.Object)>
<java.util.HashMap: java.lang.Object putVal(int,java.lang.Object,java.lang.Object,boolean,boolean)>
<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode putTreeVal(java.util.HashMap,java.util.HashMap$Node[],int,java.lang.Object,java.lang.Object)>
<clojure.core$dec_SINGLEQUOTE___inliner__5649: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.pprint$single_defn$fn__11300: java.lang.Object doInvoke(java.lang.Object)>
<clojure.core$libspec_QMARK_: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.core$NaN_QMARK___inliner__8981: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.pprint$fn__10983: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>
<clojure.pprint$buffer_length: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.pprint$print_table$fmt_row__11456: java.lang.Object invoke(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.core$interpose: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>
<clojure.set$union: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,clojure.lang.ISeq)>
<clojure.core$unsigned_bit_shift_right__inliner__5727: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>
<clojure.set$union: java.lang.Object doInvoke(java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.set$union: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>
<clojure.pprint$map_ref_type: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.core$re_find: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>
<clojure.core.proxy$clojure.lang.APersistentMap$ff19274a: boolean equiv(java.lang.Object)>
<clojure.lang.APersistentMap: boolean equiv(java.lang.Object)>
<clojure.core$printf: java.lang.Object doInvoke(java.lang.Object,java.lang.Object)>
<clojure.core$print_throwable$print_via__7561: java.lang.Object invoke(java.lang.Object)>
<clojure.string$replace: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.core$_DOT__DOT_: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,clojure.lang.ISeq)>
<clojure.core$_DOT__DOT_: java.lang.Object doInvoke(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.core$_DOT__DOT_: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.pprint$getf: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.core.reducers$filter: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>
<clojure.core$definterface: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object,clojure.lang.ISeq)>
<clojure.core$definterface: java.lang.Object doInvoke(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.core$iteration: java.lang.Object doInvoke(java.lang.Object,java.lang.Object)>
<clojure.pprint$make_nl_t: java.lang.Object doInvoke(java.lang.Object)>
<clojure.core$condp: java.lang.Object doInvoke(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.java.process$start: java.lang.Object doInvoke(java.lang.Object)>
<clojure.core$_SLASH_: java.lang.Object doInvoke(java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.core$sorted_set: java.lang.Object doInvoke(java.lang.Object)>
<clojure.core$sorted_map_by: java.lang.Object doInvoke(java.lang.Object,java.lang.Object)>
<clojure.core$print_str: java.lang.Object doInvoke(java.lang.Object)>
<clojure.core$agent: java.lang.Object doInvoke(java.lang.Object,java.lang.Object)>
<clojure.core$bit_xor: java.lang.Object doInvoke(java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.core$when_first: java.lang.Object doInvoke(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.java.io$make_parents: java.lang.Object doInvoke(java.lang.Object,java.lang.Object)>
<clojure.core$refer: java.lang.Object doInvoke(java.lang.Object,java.lang.Object)>
<clojure.core$assert_args: java.lang.Object doInvoke(java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.core$ref: java.lang.Object doInvoke(java.lang.Object,java.lang.Object)>
<clojure.core$bit_and_not: java.lang.Object doInvoke(java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.core$atom: java.lang.Object doInvoke(java.lang.Object,java.lang.Object)>
<clojure.core$sequence: java.lang.Object doInvoke(java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.core$when: java.lang.Object doInvoke(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.core$lazy_cat: java.lang.Object doInvoke(java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.java.process$capture: java.lang.Object doInvoke(java.lang.Object,java.lang.Object)>
<clojure.core$pvalues: java.lang.Object doInvoke(java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.core$case: java.lang.Object doInvoke(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.set$difference: java.lang.Object doInvoke(java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.core$aset_long: java.lang.Object doInvoke(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.pprint$make_start_block_t: java.lang.Object doInvoke(java.lang.Object)>
<clojure.core$comp: java.lang.Object doInvoke(java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.core$cond: java.lang.Object doInvoke(java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.pprint$cl_format: java.lang.Object doInvoke(java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.core$loop: java.lang.Object doInvoke(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.core$nth__inliner__5604: java.lang.Object doInvoke(java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.core$extend_type: java.lang.Object doInvoke(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.core.server$prepl: java.lang.Object doInvoke(java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.core$distinct_QMARK_: java.lang.Object doInvoke(java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.core$prn_str: java.lang.Object doInvoke(java.lang.Object)>
<clojure.java.shell$with_sh_env: java.lang.Object doInvoke(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.core$some_fn: java.lang.Object doInvoke(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.core$disj: java.lang.Object doInvoke(java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.core$struct: java.lang.Object doInvoke(java.lang.Object,java.lang.Object)>
<clojure.core$bit_or: java.lang.Object doInvoke(java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.test$with_test: java.lang.Object doInvoke(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.core$_GT__EQ_: java.lang.Object doInvoke(java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.core$_EQ__EQ_: java.lang.Object doInvoke(java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.core$await: java.lang.Object doInvoke(java.lang.Object)>
<clojure.core$println_str: java.lang.Object doInvoke(java.lang.Object)>
<clojure.core$_GT_: java.lang.Object doInvoke(java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.core$binding: java.lang.Object doInvoke(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.core$float_array__inliner__6572: java.lang.Object doInvoke(java.lang.Object)>
<clojure.core$sync: java.lang.Object doInvoke(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.java.io$copy: java.lang.Object doInvoke(java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.core$gen_class: java.lang.Object doInvoke(java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.core$defstruct: java.lang.Object doInvoke(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.core$aset_boolean: java.lang.Object doInvoke(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.core$with_precision: java.lang.Object doInvoke(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.core$cond__GT_: java.lang.Object doInvoke(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.core$double_array__inliner__6587: java.lang.Object doInvoke(java.lang.Object)>
<clojure.core$sorted_set_by: java.lang.Object doInvoke(java.lang.Object,java.lang.Object)>
<clojure.core$with_bindings_STAR_: java.lang.Object doInvoke(java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.core$max_key: java.lang.Object doInvoke(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.core$bound_QMARK_: java.lang.Object doInvoke(java.lang.Object)>
<clojure.core$import: java.lang.Object doInvoke(java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.test$with_test_out: java.lang.Object doInvoke(java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.core$proxy_super: java.lang.Object doInvoke(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.core$doseq: java.lang.Object doInvoke(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.core$sorted_map: java.lang.Object doInvoke(java.lang.Object)>
<clojure.core$while: java.lang.Object doInvoke(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.test.tap$with_tap_output: java.lang.Object doInvoke(java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.pprint$make_indent_t: java.lang.Object doInvoke(java.lang.Object)>
<clojure.core$locking: java.lang.Object doInvoke(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.core$with_bindings: java.lang.Object doInvoke(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.core$thread_bound_QMARK_: java.lang.Object doInvoke(java.lang.Object)>
<clojure.core$letfn: java.lang.Object doInvoke(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.core$gen_interface: java.lang.Object doInvoke(java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.pprint$write_to_base: java.lang.Object doInvoke(java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.core$get__inliner__5760: java.lang.Object doInvoke(java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.core$fn__5459: java.lang.Object doInvoke(java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.pprint$deftype: java.lang.Object doInvoke(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.core$construct_proxy: java.lang.Object doInvoke(java.lang.Object,java.lang.Object)>
<clojure.pprint$write: java.lang.Object doInvoke(java.lang.Object,java.lang.Object)>
<clojure.test$set_test: java.lang.Object doInvoke(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.core$when_not: java.lang.Object doInvoke(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.core$dissoc: java.lang.Object doInvoke(java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.core$apply: java.lang.Object doInvoke(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.java.shell$aconcat: java.lang.Object doInvoke(java.lang.Object,java.lang.Object)>
<clojure.core$aset_double: java.lang.Object doInvoke(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.core$min_key: java.lang.Object doInvoke(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.core$dotimes: java.lang.Object doInvoke(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.core$ns: java.lang.Object doInvoke(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.test$fn__9869: java.lang.Object doInvoke(java.lang.Object,java.lang.Object)>
<clojure.pprint$binding_map: java.lang.Object doInvoke(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.core$with_loading_context: java.lang.Object doInvoke(java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.core$some__GT_: java.lang.Object doInvoke(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.core$aset_char: java.lang.Object doInvoke(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.core$if_let: java.lang.Object doInvoke(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.core$deftype: java.lang.Object doInvoke(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.core$extend_protocol: java.lang.Object doInvoke(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.core$__GT__GT_: java.lang.Object doInvoke(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.core$when_some: java.lang.Object doInvoke(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.core$_LT_: java.lang.Object doInvoke(java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.core$delay: java.lang.Object doInvoke(java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.core$vary_meta: java.lang.Object doInvoke(java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.test$fn__9867: java.lang.Object doInvoke(java.lang.Object,java.lang.Object)>
<clojure.core$pcalls: java.lang.Object doInvoke(java.lang.Object)>
<clojure.core$mapv: java.lang.Object doInvoke(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.core$_: java.lang.Object doInvoke(java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.reflect$reflect: java.lang.Object doInvoke(java.lang.Object,java.lang.Object)>
<clojure.core$fn: java.lang.Object doInvoke(java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.test$deftest: java.lang.Object doInvoke(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.pprint$prerr: java.lang.Object doInvoke(java.lang.Object)>
<clojure.java.io$output_stream: java.lang.Object doInvoke(java.lang.Object,java.lang.Object)>
<clojure.test.junit$with_junit_output: java.lang.Object doInvoke(java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.core$merge: java.lang.Object doInvoke(java.lang.Object)>
<clojure.core$byte_array__inliner__6578: java.lang.Object doInvoke(java.lang.Object)>
<clojure.core$list_STAR_: java.lang.Object doInvoke(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.core$as__GT_: java.lang.Object doInvoke(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.zip$edit: java.lang.Object doInvoke(java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.core$with_out_str: java.lang.Object doInvoke(java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.core$or: java.lang.Object doInvoke(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.test$run_tests: java.lang.Object doInvoke(java.lang.Object)>
<clojure.java.shell$with_sh_dir: java.lang.Object doInvoke(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.core$loop__5457: java.lang.Object doInvoke(java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.pprint$make_end_block_t: java.lang.Object doInvoke(java.lang.Object)>
<clojure.core$conj__5467: java.lang.Object doInvoke(java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.core$int_array__inliner__6593: java.lang.Object doInvoke(java.lang.Object)>
<clojure.core$with_local_vars: java.lang.Object doInvoke(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.core$require: java.lang.Object doInvoke(java.lang.Object)>
<clojure.core$boolean_array__inliner__6575: java.lang.Object doInvoke(java.lang.Object)>
<clojure.core$max: java.lang.Object doInvoke(java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.core$if_some: java.lang.Object doInvoke(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.java.basis.impl$update_basis_BANG_: java.lang.Object doInvoke(java.lang.Object,java.lang.Object)>
<clojure.core$spit: java.lang.Object doInvoke(java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.core.server$with_lock: java.lang.Object doInvoke(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.pprint$print_length_loop: java.lang.Object doInvoke(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.java.shell$sh: java.lang.Object doInvoke(java.lang.Object)>
<clojure.core$defmethod: java.lang.Object doInvoke(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.core$_STAR__SINGLEQUOTE_: java.lang.Object doInvoke(java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.core$alter_var_root: java.lang.Object doInvoke(java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.core$array_map: java.lang.Object doInvoke(java.lang.Object)>
<clojure.core$make_array: java.lang.Object doInvoke(java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.core$let__5455: java.lang.Object doInvoke(java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.java.process$exec: java.lang.Object doInvoke(java.lang.Object)>
<clojure.core$bound_fn: java.lang.Object doInvoke(java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.core$refer_clojure: java.lang.Object doInvoke(java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.core$disj_BANG_: java.lang.Object doInvoke(java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.core$assoc__5493: java.lang.Object doInvoke(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.core$create_struct: java.lang.Object doInvoke(java.lang.Object)>
<clojure.core$__GT_: java.lang.Object doInvoke(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.core$hash_set: java.lang.Object doInvoke(java.lang.Object)>
<clojure.core$load_libs: java.lang.Object doInvoke(java.lang.Object)>
<clojure.core$defn__5509: java.lang.Object doInvoke(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.core$send: java.lang.Object doInvoke(java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.template$do_template: java.lang.Object doInvoke(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.reflect$type_reflect: java.lang.Object doInvoke(java.lang.Object,java.lang.Object)>
<clojure.core$array: java.lang.Object doInvoke(java.lang.Object)>
<clojure.core$_LT__EQ_: java.lang.Object doInvoke(java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.core$load: java.lang.Object doInvoke(java.lang.Object)>
<clojure.core$print: java.lang.Object doInvoke(java.lang.Object)>
<clojure.core$struct_map: java.lang.Object doInvoke(java.lang.Object,java.lang.Object)>
<clojure.pprint$pprint_logical_block: java.lang.Object doInvoke(java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.core$load_lib: java.lang.Object doInvoke(java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.core$lazy_seq: java.lang.Object doInvoke(java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.core$let: java.lang.Object doInvoke(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.pprint$make_buffer_blob: java.lang.Object doInvoke(java.lang.Object)>
<clojure.core$dissoc_BANG_: java.lang.Object doInvoke(java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.java.io$input_stream: java.lang.Object doInvoke(java.lang.Object,java.lang.Object)>
<clojure.core$reify: java.lang.Object doInvoke(java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.java.io$delete_file: java.lang.Object doInvoke(java.lang.Object,java.lang.Object)>
<clojure.core$io_BANG_: java.lang.Object doInvoke(java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.core$dosync: java.lang.Object doInvoke(java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.core.reducers$defcurried: java.lang.Object doInvoke(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.core$slurp: java.lang.Object doInvoke(java.lang.Object,java.lang.Object)>
<clojure.core$proxy: java.lang.Object doInvoke(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.core.protocols$fn__8258: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.core.protocols$interface_or_naive_reduce: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.core$def_aset: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.core$descendants: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>
<clojure.core$descendants: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.test$fn__9838: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>
<clojure.repl$print_doc: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.spec.alpha$get_spec: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.core$iteration: java.lang.Object invokeStatic(java.lang.Object,clojure.lang.ISeq)>
<clojure.lang.LazySeq: clojure.lang.IObj withMeta(clojure.lang.IPersistentMap)>
<clojure.lang.Obj: clojure.lang.IObj withMeta(clojure.lang.IPersistentMap)>
<clojure.pprint$separator_QMARK_: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.pprint$float_parts_base: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.pprint$end_block: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.math$rint__inliner__12515: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.lang.LazySeq: clojure.lang.Obj withMeta(clojure.lang.IPersistentMap)>
<clojure.core$byte__inliner__6145: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.lang.LazySeq: clojure.lang.ISeq cons(java.lang.Object)>
<clojure.lang.LazySeq: boolean equiv(java.lang.Object)>
<clojure.core.protocols$fn__8250: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.lang.LazySeq: java.lang.Object[] toArray(java.lang.Object[])>
<clojure.core.protocols$fn__8250: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>
<clojure.pprint$make_nl_t: java.lang.Object invokeStatic(clojure.lang.ISeq)>
<clojure.core$most_specific$fn__7105: java.lang.Object invoke(java.lang.Object)>
<clojure.lang.LazySeq: java.lang.Object get(int)>
<clojure.core$data_reader_var: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.core$process_annotation: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>
<clojure.core$add_annotation: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.pprint$single_defn$fn__11306: java.lang.Object doInvoke(java.lang.Object)>
<clojure.pprint$multi_defn$fn__11316: java.lang.Object doInvoke(java.lang.Object)>
<clojure.pprint$process_bracket: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>
<clojure.pprint$tuple_map: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>
<clojure.pprint$plain_character: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.pprint$single_defn: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>
<clojure.core$condp: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,clojure.lang.ISeq)>
<clojure.pprint$start_block: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.java.process$start: java.lang.Object invokeStatic(clojure.lang.ISeq)>
<clojure.core$run_BANG_: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>
<clojure.lang.PersistentArrayMap: clojure.lang.IPersistentMap create(java.util.Map)>
<clojure.reflect.Field: java.util.Set entrySet()>
<clojure.core.proxy$clojure.lang.APersistentMap$ff19274a: java.util.Set entrySet()>
<clojure.reflect.Method: java.util.Set entrySet()>
<clojure.reflect.Constructor: java.util.Set entrySet()>
<clojure.lang.PersistentArrayMap: clojure.lang.IPersistentMap createHT(java.lang.Object[])>
<clojure.lang.PersistentArrayMap: clojure.lang.PersistentArrayMap createWithCheck(java.lang.Object[])>
<clojure.lang.PersistentArrayMap: boolean equalKey(java.lang.Object,java.lang.Object)>
<clojure.core$emit_protocol$fn__8096: java.lang.Object invoke()>
<clojure.pprint$opt_base_str: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>
<clojure.pprint$group_by_STAR_: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>
<clojure.pprint$integral_QMARK_: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.core$get_in: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.test$default_fixture: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.lang.PersistentArrayMap: clojure.lang.PersistentArrayMap createAsIfByAssocComplexPath(java.lang.Object[],boolean)>
<clojure.core$get_in: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>
<clojure.lang.PersistentArrayMap: java.lang.Object[] growSeedArray(java.lang.Object[],clojure.lang.IPersistentCollection)>
<clojure.lang.ASeq: int count()>
<clojure.lang.Cons: int count()>
<clojure.lang.LazySeq: int count()>
<clojure.lang.PersistentArrayMap: int indexOf(java.lang.Object)>
<clojure.core$ns_refers: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.core$set_validator_BANG_: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>
<clojure.lang.PersistentHashMap$TransientHashMap: clojure.lang.ITransientMap doAssoc(java.lang.Object,java.lang.Object)>
<clojure.core$accessor: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>
<clojure.lang.PersistentArrayMap: int indexOfObject(java.lang.Object)>
<clojure.lang.Util$4: boolean equiv(java.lang.Object,java.lang.Object)>
<clojure.core$_SLASH_: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,clojure.lang.ISeq)>
<clojure.core$unchecked_long__inliner__6163: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.core$sorted_set: java.lang.Object invokeStatic(clojure.lang.ISeq)>
<clojure.core.reducers$fn__12461: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.pprint$pprint_anon_func: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.instant$fn__8487: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>
<clojure.lang.PersistentArrayMap: clojure.lang.Associative assoc(java.lang.Object,java.lang.Object)>
<clojure.core$bounded_count: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>
<clojure.math$sin__inliner__12467: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.core$sorted_map_by: java.lang.Object invokeStatic(java.lang.Object,clojure.lang.ISeq)>
<clojure.lang.PersistentTreeMap: clojure.lang.PersistentTreeMap create(java.util.Comparator,clojure.lang.ISeq)>
<clojure.core$unchecked_byte__inliner__6151: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.core$print_str: java.lang.Object invokeStatic(clojure.lang.ISeq)>
<clojure.test.junit$fn__10032: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.core$agent: java.lang.Object invokeStatic(java.lang.Object,clojure.lang.ISeq)>
<clojure.pprint$pprint_ns_reference: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.pprint$pprint_ns_reference$fn__11215: java.lang.Object invoke()>
<clojure.core$line_seq: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.pprint$pprint_condp: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.pprint$pprint_condp$fn__11386: java.lang.Object invoke()>
<clojure.walk$prewalk_replace$fn__9724: java.lang.Object invoke(java.lang.Object)>
<clojure.core.reducers$drop: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>
<clojure.core$when_first: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object,clojure.lang.ISeq)>
<clojure.java.shell$stream_to_enc: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>
<clojure.java.shell$stream_to_bytes: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.java.shell$stream_to_string: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>
<clojure.core$bit_xor: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,clojure.lang.ISeq)>
<clojure.core$bit_xor: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>
<clojure.math$pow__inliner__12521: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>
<clojure.core$fn__7497: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>
<clojure.core$fn__7545: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>
<clojure.lang.Compiler$FnMethod: java.lang.String primInterface(clojure.lang.IPersistentVector)>
<clojure.lang.Compiler: clojure.lang.Symbol access$500(java.lang.Object)>
<clojure.core.reducers$mapcat: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>
<clojure.lang.Compiler$FnMethod: clojure.lang.Compiler$FnMethod parse(clojure.lang.Compiler$ObjExpr,clojure.lang.ISeq,java.lang.Object)>
<clojure.lang.RT: java.lang.Object first(java.lang.Object)>
<clojure.string$replace_by: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.core$re_groups: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.core$refer: java.lang.Object invokeStatic(java.lang.Object,clojure.lang.ISeq)>
<clojure.core$ns_interns: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.core$ns_publics: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.core$fn__7397: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>
<clojure.java.io$make_parents: java.lang.Object invokeStatic(java.lang.Object,clojure.lang.ISeq)>
<clojure.core.reducers$map: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>
<clojure.main$repl: java.lang.Object invokeStatic(clojure.lang.ISeq)>
<clojure.core$is_runtime_annotation_QMARK_: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.lang.RT: clojure.lang.ISeq vals(java.lang.Object)>
<clojure.pprint$relative_reposition: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>
<clojure.pprint$absolute_reposition: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>
<clojure.pprint$split_at_newline: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.core$assert_args: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,clojure.lang.ISeq)>
<clojure.core$list_STAR_: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>
<clojure.repl$special_doc: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.test$do_report: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.test$stacktrace_file_and_line: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.core$inc__inliner__5613: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.core$macroexpand_1: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.core$ref: java.lang.Object invokeStatic(java.lang.Object,clojure.lang.ISeq)>
<clojure.core$bit_flip: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>
<clojure.pprint$set_miser_width: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>
<clojure.core.reducers$fn__12459: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.core$bit_and_not: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,clojure.lang.ISeq)>
<clojure.core$bit_and_not: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>
<clojure.core$atom: java.lang.Object invokeStatic(java.lang.Object,clojure.lang.ISeq)>
<clojure.core$unchecked_divide_int__inliner__5691: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>
<java.lang.String: java.lang.String valueOf(java.lang.Object)>
<clojure.core$sequence: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,clojure.lang.ISeq)>
<clojure.lang.TransformerIterator: java.util.Iterator createMulti(clojure.lang.IFn,java.util.List)>
<clojure.lang.RT: clojure.lang.ISeq chunkIteratorSeq(java.util.Iterator)>
<clojure.lang.TransformerIterator: java.util.Iterator create(clojure.lang.IFn,java.util.Iterator)>
<clojure.lang.RT: java.util.Iterator iter(java.lang.Object)>
<clojure.core$sequence: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.core$when: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object,clojure.lang.ISeq)>
<clojure.pprint$ltrim: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>
<clojure.core$bigint: java.lang.Object invokeStatic(java.lang.Object)>
<java.lang.invoke.MethodType$ConcurrentWeakInternSet$WeakEntry: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object putVal(java.lang.Object,java.lang.Object,boolean)>
<clojure.zip$down: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.zip$children: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.zip$branch_QMARK_: java.lang.Object invokeStatic(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object remove(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object replaceNode(java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.core$case: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object,clojure.lang.ISeq)>
<clojure.core$odd_QMARK_: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.core$prep_ints: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>
<clojure.core$lazy_cat: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,clojure.lang.ISeq)>
<clojure.walk$prewalk_demo$fn__9703: java.lang.Object invoke(java.lang.Object)>
<clojure.pprint$ancestor_QMARK_: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>
<clojure.lang.Keyword: clojure.lang.Keyword intern(clojure.lang.Symbol)>
<clojure.lang.Keyword: void <init>(clojure.lang.Symbol)>
<java.util.concurrent.ConcurrentHashMap: boolean remove(java.lang.Object,java.lang.Object)>
<clojure.lang.Util: void clearCache(java.lang.ref.ReferenceQueue,java.util.concurrent.ConcurrentHashMap)>
<clojure.math$floor_mod__inliner__12551: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>
<clojure.java.io$fn__11613: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>
<clojure.core$unchecked_divide_int: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>
<clojure.lang.Keyword: clojure.lang.Keyword intern(java.lang.String,java.lang.String)>
<clojure.lang.Keyword: clojure.lang.Keyword intern(java.lang.String)>
<clojure.lang.Symbol: int hasheq()>
<clojure.lang.Keyword: clojure.lang.Keyword find(clojure.lang.Symbol)>
<clojure.lang.Keyword: clojure.lang.Keyword find(java.lang.String,java.lang.String)>
<clojure.lang.Keyword: clojure.lang.Keyword find(java.lang.String)>
<clojure.lang.Keyword: java.lang.Object throwArity(int)>
<clojure.java.process$capture: java.lang.Object invokeStatic(java.lang.Object,clojure.lang.ISeq)>
<clojure.lang.LispReader: java.lang.Object read(java.io.PushbackReader,java.lang.Object)>
<clojure.core$emit_deftype_STAR_: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.core.server$stop_server: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.core$add_classpath: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.test$file_position: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.core$pvalues: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,clojure.lang.ISeq)>
<clojure.java.io$escaped_utf8_urlstring__GT_str: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.data$fn__12064: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>
<clojure.core$import$fn__6120: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.core$fn__7407: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>
<clojure.pprint$pprint_code_symbol: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.pprint$downcase_writer: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.java.io$fn__11665: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>
<clojure.core$asm_type: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.pprint$end_block_t_QMARK_: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.string$replace_first_char: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.lang.Compiler$StaticFieldExpr: void emit(clojure.lang.Compiler$C,clojure.lang.Compiler$ObjExpr,clojure.asm.commons.GeneratorAdapter)>
<clojure.core$generate_proxy$fn__7236: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.core.reducers$foldcat: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.core.reducers$fold: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.pprint$translate_param: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.pprint$update_nl_state: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.lang.Compiler$ObjExpr: void compile(java.lang.String,java.lang.String[],boolean)>
<clojure.lang.RT: clojure.lang.ISeq keys(java.lang.Object)>
<clojure.lang.Compiler: void writeClassFile(java.lang.String,byte[])>
<clojure.lang.KeywordLookupSite: clojure.lang.ILookupThunk install(java.lang.Object)>
<clojure.lang.LispReader$SyntaxQuoteReader: java.lang.Object invoke(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.lang.LispReader$SyntaxQuoteReader: java.lang.Object syntaxQuote(java.lang.Object)>
<clojure.pprint$formatter_out: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.reflect.Method: clojure.lang.ILookupThunk getLookupThunk(clojure.lang.Keyword)>
<clojure.reflect.Constructor: clojure.lang.ILookupThunk getLookupThunk(clojure.lang.Keyword)>
<clojure.lang.RT: clojure.lang.ISeq list(java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.lang.Compiler: boolean isSpecial(java.lang.Object)>
<clojure.core$unchecked_double__inliner__6169: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.core$find_protocol_impl: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>
<clojure.core$super_chain: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.core$find_protocol_impl$impl__8025: java.lang.Object invoke(java.lang.Object)>
<clojure.core$fn__7489: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>
<clojure.lang.MultiFn: boolean isA(java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.lang.MultiFn: boolean dominates(java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.pprint$print_table: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>
<clojure.lang.MultiFn: clojure.lang.IFn getMethod(java.lang.Object)>
<clojure.lang.MultiFn: clojure.lang.IFn findAndCacheBestMethod(java.lang.Object)>
<clojure.set$difference: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,clojure.lang.ISeq)>
<clojure.set$difference: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>
<clojure.pprint$print_table: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.test$fn__9845: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>
<clojure.core$nthnext: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>
<clojure.lang.RT: java.lang.Object seqToTypedArray(java.lang.Class,clojure.lang.ISeq)>
<clojure.lang.RT: java.lang.Object seqToTypedArray(clojure.lang.ISeq)>
<clojure.core$aset_long: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object,clojure.lang.ISeq)>
<clojure.lang.LispReader$VectorReader: java.lang.Object invoke(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.core$aset_long: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.lang.Compiler$ObjExpr: void emitListAsObjectArray(java.lang.Object,clojure.asm.commons.GeneratorAdapter)>
<clojure.lang.Compiler$ObjExpr: void emitValue(java.lang.Object,clojure.asm.commons.GeneratorAdapter)>
<clojure.lang.ASeq: int size()>
<clojure.lang.LazySeq: int size()>
<clojure.lang.SeqIterator: boolean hasNext()>
<clojure.lang.SeqIterator: java.lang.Object next()>
<clojure.lang.RT: java.lang.String printString(java.lang.Object)>
<clojure.lang.Compiler: java.lang.Object elideMeta(java.lang.Object)>
<clojure.pprint$make_start_block_t: java.lang.Object invokeStatic(clojure.lang.ISeq)>
<clojure.core$fn__8535: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.datafy$fn__12137: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.pprint$upcase_writer: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.reflect$access_flag: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.lang.LispReader$ArgReader: java.lang.Object invoke(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.lang.LispReader: java.lang.Object access$400(java.lang.String,clojure.lang.LispReader$Resolver)>
<clojure.test$fn__9796: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.core$comp: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,clojure.lang.ISeq)>
<clojure.core$dorun: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>
<clojure.core$dorun: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.java.io$fn__11655: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>
<clojure.core$fn__7468: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>
<clojure.pprint$format_logical_block: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.java.io$fn__11653: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>
<clojure.set$superset_QMARK_: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>
<clojure.pprint$fn__10212: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>
<clojure.lang.Compiler$NumberExpr: void <init>(java.lang.Number)>
<clojure.lang.Compiler: int access$700(java.lang.Object)>
<clojure.core$sort: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.string$starts_with_QMARK_: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>
<clojure.lang.Compiler$NumberExpr: clojure.lang.Compiler$Expr parse(java.lang.Number)>
<clojure.core$cond: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,clojure.lang.ISeq)>
<clojure.core.reducers$do_curried: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.java.io$fn__11649: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>
<clojure.zip$end_QMARK_: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.core$loop: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object,clojure.lang.ISeq)>
<clojure.core$ns_unmap: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>
<clojure.lang.Namespace: void unmap(clojure.lang.Symbol)>
<clojure.java.io$fn__11643: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>
<clojure.core$byte_array: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>
<clojure.core$byte_array: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.java.io$fn__11679: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.core$nth__inliner__5604: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,clojure.lang.ISeq)>
<clojure.core$re_matches: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>
<clojure.instant$zero_fill_right: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>
<clojure.lang.Namespace: void <init>(clojure.lang.Symbol)>
<clojure.lang.Namespace: clojure.lang.Var intern(clojure.lang.Symbol)>
<clojure.lang.Namespace: boolean checkReplacement(clojure.lang.Symbol,java.lang.Object,java.lang.Object)>
<clojure.lang.Var: void <init>(clojure.lang.Namespace,clojure.lang.Symbol)>
<clojure.pprint$readable_character: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.core$transduce: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.lang.DynamicClassLoader: java.lang.Class findInMemoryClass(java.lang.String)>
<clojure.pprint$pprint_list: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.core$transduce: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.core.reducers$take: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>
<clojure.core.server$ex__GT_data: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>
<clojure.edn$read: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>
<clojure.lang.EdnReader: java.lang.Object read(java.io.PushbackReader,clojure.lang.IPersistentMap)>
<clojure.core$ancestors: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>
<clojure.edn$read: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.lang.Namespace: clojure.lang.Namespace remove(clojure.lang.Symbol)>
<clojure.core$ancestors: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.repl$dir: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.test$file_and_line: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>
<clojure.pprint$fn__10256: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.pprint$miser_nl_QMARK_: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.core$fn__7362: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>
<clojure.core$extend_type: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object,clojure.lang.ISeq)>
<clojure.core$emit_extend_type: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>
<clojure.reflect.Field: clojure.lang.IPersistentCollection empty()>
<clojure.lang.PersistentStructMap: clojure.lang.IPersistentCollection empty()>
<clojure.lang.PersistentTreeSet: clojure.lang.IPersistentCollection empty()>
<clojure.core.proxy$clojure.lang.APersistentMap$ff19274a: clojure.lang.IPersistentCollection empty()>
<clojure.reflect.Method: clojure.lang.IPersistentCollection empty()>
<clojure.reflect.Constructor: clojure.lang.IPersistentCollection empty()>
<clojure.java.io$fn__11639: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>
<clojure.core.server$prepl: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,clojure.lang.ISeq)>
<clojure.core.server$prepl$fn__9082: java.lang.Object invoke()>
<clojure.core$generate_proxy$fn__7238: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.test.junit$fn__10024: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.test.junit$finish_suite: java.lang.Object invokeStatic()>
<clojure.core.protocols$fn__8242: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.core.protocols$iter_reduce: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.core$for: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.core.protocols$fn__8242: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>
<clojure.core.protocols$iter_reduce: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>
<clojure.pprint$base_str: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>
<clojure.core$bigdec: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.core$distinct_QMARK_: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,clojure.lang.ISeq)>
<clojure.pprint$pprint_defn: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.pprint$pprint_defn$fn__11331: java.lang.Object invoke()>
<clojure.core$read_string: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>
<clojure.lang.RT: java.lang.Object readString(java.lang.String,java.lang.Object)>
<clojure.core$read_string: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.lang.RT: java.lang.Object readString(java.lang.String)>
<clojure.core$distinct_QMARK_: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>
<clojure.pprint$pprint_indent: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>
<clojure.pprint$check_enumerated_arg: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>
<clojure.pprint$indent: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.lang.LispReader$WrappingReader: java.lang.Object invoke(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.java.basis.impl$read_basis: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.java.basis.impl$read_edn: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.lang.RestFn: clojure.lang.ISeq ontoArrayPrepend(java.lang.Object[],java.lang.Object[])>
<clojure.pprint$pretty_character: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.core$bit_not: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.core$prn_str: java.lang.Object invokeStatic(clojure.lang.ISeq)>
<clojure.java.shell$with_sh_env: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object,clojure.lang.ISeq)>
<clojure.pprint$indent_t_QMARK_: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.lang.APersistentVector: boolean doEquals(clojure.lang.IPersistentVector,java.lang.Object)>
<clojure.lang.PersistentQueue$1: java.lang.Object next()>
<clojure.lang.APersistentVector: boolean doEquiv(clojure.lang.IPersistentVector,java.lang.Object)>
<clojure.lang.PersistentVector: clojure.lang.PersistentVector create(clojure.lang.IReduceInit)>
<clojure.lang.PersistentVector: clojure.lang.PersistentVector create(clojure.lang.ISeq)>
<clojure.lang.APersistentVector: boolean equiv(java.lang.Object)>
<clojure.lang.PersistentVector: clojure.lang.PersistentVector create(java.util.List)>
<clojure.lang.ASeq: java.lang.Object[] toArray()>
<clojure.lang.LazySeq: java.lang.Object[] toArray()>
<clojure.lang.PersistentVector: clojure.lang.PersistentVector create(java.lang.Iterable)>
<clojure.stacktrace$print_trace_element: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.lang.APersistentVector: java.lang.Object[] toArray(java.lang.Object[])>
<clojure.core$some_fn: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object,clojure.lang.ISeq)>
<clojure.core$map_indexed: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>
<clojure.math$floor__inliner__12512: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.core$take_last: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>
<clojure.core$_cache_protocol_fn: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.core$expand_method_impl_cache: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.core$find_protocol_method: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.inspector$old_table_model: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.core.protocols$naive_seq_reduce: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.pprint$extract_params: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>
<clojure.core$disj: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,clojure.lang.ISeq)>
<clojure.core$unchecked_add__inliner__5676: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>
<clojure.lang.PersistentHashSet: clojure.lang.IPersistentSet disjoin(java.lang.Object)>
<clojure.pprint$fn__10872: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>
<clojure.lang.EdnReader: java.lang.Object read(java.io.PushbackReader,boolean,java.lang.Object,boolean,java.lang.Object)>
<clojure.lang.EdnReader: java.lang.Object interpretToken(java.lang.String)>
<clojure.test.junit$fn__10022: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.test.junit$start_suite: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.pprint$prefix_count: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>
<clojure.core$fn__7513: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>
<clojure.core$parse_opts: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.lang.EdnReader: java.lang.Object matchSymbol(java.lang.String)>
<clojure.data$fn__12077: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>
<clojure.core$bit_or: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,clojure.lang.ISeq)>
<clojure.core$bit_or: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>
<clojure.core$bytes__6611: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.test$with_test: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object,clojure.lang.ISeq)>
<clojure.zip$append_child: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>
<clojure.zip$node: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.lang.LispReader$MetaReader: java.lang.Object invoke(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.pprint$consume_while: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>
<clojure.zip$next: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.zip$right: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.core$fn__7532: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>
<clojure.core$_GT__EQ_: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,clojure.lang.ISeq)>
<clojure.pprint$iterate_main_sublists: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.pprint$next_arg_or_nil: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.core$ints__6639: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.zip$lefts: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.core$get_method: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>
<clojure.lang.Util: boolean pcequiv(java.lang.Object,java.lang.Object)>
<clojure.core$object_array: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.lang.RT: java.lang.Object[] object_array(java.lang.Object)>
<clojure.set$join: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.set$map_invert: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.set$index: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>
<clojure.set$join: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>
<clojure.pprint$fn__10296: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.math$sqrt__inliner__12500: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.repl$namespace_doc: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.core$_EQ__EQ_: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,clojure.lang.ISeq)>
<clojure.walk$postwalk_demo: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.core$char__inliner__6148: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.stacktrace$print_cause_trace: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>
<clojure.stacktrace$print_stack_trace: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>
<clojure.stacktrace$print_cause_trace: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.core$println_str: java.lang.Object invokeStatic(clojure.lang.ISeq)>
<java.lang.invoke.MethodType: java.lang.invoke.MethodType makeImpl(java.lang.Class,java.lang.Class[],boolean)>
<java.lang.invoke.MethodTypeForm: java.lang.invoke.MethodTypeForm findForm(java.lang.invoke.MethodType)>
<java.lang.invoke.MethodType: java.lang.invoke.MethodType genericMethodType(int,boolean)>
<clojure.java.javadoc$add_remote_javadoc: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>
<java.lang.invoke.MethodType: java.lang.invoke.MethodType genericMethodType(int)>
<clojure.pprint$pprint_tab: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.core$fn__7478: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>
<clojure.core$_GT_: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,clojure.lang.ISeq)>
<clojure.core$long_array: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>
<clojure.core$long_array: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.core$unchecked_inc_int__inliner__5655: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.core$fnext__5475: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.inspector$inspect_table: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.core$binding: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object,clojure.lang.ISeq)>
<clojure.test.tap$print_diagnostics$fn__9951: java.lang.Object invoke()>
<clojure.test$test_vars: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.core$float_array__inliner__6572: java.lang.Object invokeStatic(clojure.lang.ISeq)>
<clojure.inspector$fn__9646: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.core$ns_interns$fn__6276: java.lang.Object invoke(java.lang.Object)>
<clojure.core$ns_refers$fn__6294: java.lang.Object invoke(java.lang.Object)>
<clojure.instant$fn__8478: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>
<clojure.core$sync: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object,clojure.lang.ISeq)>
<clojure.zip$rightmost: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.test$test_var: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.test$test_var$fn__9878: java.lang.Object invoke()>
<clojure.java.io$copy: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,clojure.lang.ISeq)>
<clojure.pprint$multi_defn: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>
<clojure.core$seque: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>
<clojure.core$seque: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.walk$stringify_keys: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.java.io$fn__11657: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>
<clojure.core$find_keyword: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>
<clojure.core$find_keyword: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.lang.LispReader$ReaderException: void <init>(int,int,java.lang.Throwable)>
<clojure.core$bit_test: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>
<clojure.core.protocols$fn__8252: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.core.protocols$fn__8252: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>
<clojure.core$compare__inliner__5588: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>
<clojure.core$gen_class: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,clojure.lang.ISeq)>
<clojure.core$generate_class: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.zip$insert_child: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>
<clojure.java.io$fn__11675: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.zip$root: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.java.process$from_file: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.core$defstruct: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object,clojure.lang.ISeq)>
<clojure.core$agent_errors: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.core$aset_boolean: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object,clojure.lang.ISeq)>
<clojure.core$aset_boolean: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.pprint$fn__10931: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>
<clojure.core$rem__inliner__5706: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>
<clojure.core$most_specific: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.core$with_precision: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object,clojure.lang.ISeq)>
<clojure.pprint$linear_nl_QMARK_: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.core$fn__8362: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>
<clojure.core$cond__GT_: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object,clojure.lang.ISeq)>
<clojure.core$update_vals: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>
<clojure.core$fn__7379: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>
<clojure.pprint$column_writer: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>
<clojure.pprint$column_writer: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.repl$apropos: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.java.basis.impl$update_basis_BANG_: java.lang.Object invokeStatic(java.lang.Object,clojure.lang.ISeq)>
<clojure.zip$prev: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.core$reduce: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>
<clojure.core$double_array: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>
<clojure.core$double_array: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.reflect.Method: boolean equiv(java.lang.Object)>
<clojure.core$double_array__inliner__6587: java.lang.Object invokeStatic(clojure.lang.ISeq)>
<clojure.math$tanh__inliner__12566: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.lang.PersistentHashSet: clojure.lang.PersistentHashSet create(clojure.lang.ISeq)>
<clojure.lang.PersistentHashSet: clojure.lang.PersistentHashSet createWithCheck(java.lang.Object[])>
<clojure.core$fn__7474: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>
<clojure.string$join: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>
<clojure.string$join: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.java.io$fn__11645: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>
<clojure.core$replace$fn__6512: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.lang.PersistentHashSet: clojure.lang.IPersistentSet cons(java.lang.Object)>
<clojure.pprint$start_block_t_QMARK_: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.core$sorted_set_by: java.lang.Object invokeStatic(java.lang.Object,clojure.lang.ISeq)>
<clojure.core$with_bindings_STAR_: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,clojure.lang.ISeq)>
<clojure.core$max_key: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object,clojure.lang.ISeq)>
<clojure.reflect$method__GT_map: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.core$bound_QMARK_: java.lang.Object invokeStatic(clojure.lang.ISeq)>
<clojure.java.io$fn__11615: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>
<clojure.core$fn__7425: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>
<clojure.java.io$fn__11651: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>
<clojure.core$biginteger: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.core$keep_indexed: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>
<clojure.pprint$else_separator_QMARK_: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.pprint$format_roman: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.inspector$fn__9582: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.test$is: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.test$is: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.core$import: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,clojure.lang.ISeq)>
<clojure.lang.PersistentList$EmptyList: boolean equals(java.lang.Object)>
<clojure.lang.Util: boolean equiv(java.lang.Object,double)>
<clojure.core$fn__7543: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>
<clojure.core$deref_as_map: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.lang.PersistentTreeMap: boolean equiv(java.lang.Object)>
<clojure.reflect.Constructor: boolean equiv(java.lang.Object)>
<clojure.pprint$write_buffered_output: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.pprint$write_tokens: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.core$long: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.test$with_test_out: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,clojure.lang.ISeq)>
<clojure.core.Vec: int hashCode()>
<clojure.lang.Util: int dohasheq(clojure.lang.IHashEq)>
<clojure.data$fn__12081: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>
<clojure.core$proxy_super: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object,clojure.lang.ISeq)>
<clojure.core$hash_combine: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>
<clojure.core$type: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.core$doseq: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object,clojure.lang.ISeq)>
<clojure.core$fn__7511: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>
<clojure.core$while: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object,clojure.lang.ISeq)>
<clojure.pprint$extract_param: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.core$re_find: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.core$sorted_map: java.lang.Object invokeStatic(clojure.lang.ISeq)>
<clojure.lang.PersistentTreeMap: clojure.lang.PersistentTreeMap create(clojure.lang.ISeq)>
<clojure.core$fn__7419: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>
<clojure.test.tap$with_tap_output: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,clojure.lang.ISeq)>
<clojure.core$load_lib$fn__6862: java.lang.Object invoke(java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.java.javadoc$javadoc_url: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.pprint$make_indent_t: java.lang.Object invokeStatic(clojure.lang.ISeq)>
<clojure.lang.APersistentMap$KeySeq: clojure.lang.APersistentMap$KeySeq createFromMap(clojure.lang.IPersistentMap)>
<clojure.test$run_test_var: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.java.process$ok_QMARK_: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.core$locking: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object,clojure.lang.ISeq)>
<clojure.core$filter_methods: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>
<clojure.core$filter_methods$fn__7597: java.lang.Object invoke()>
<clojure.core$unchecked_char__inliner__6157: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.core$fn__7368: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>
<clojure.core$normalize_slurp_opts: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.core$isa_QMARK_$fn__6736: java.lang.Object invoke(java.lang.Object)>
<clojure.lang.TransformerIterator: void <init>(clojure.lang.IFn,java.util.Iterator,boolean)>
<clojure.pprint$c_write_char: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>
<clojure.pprint$format_cardinal_english: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.pprint$relative_tabulation: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.core$with_bindings: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object,clojure.lang.ISeq)>
<clojure.pprint$fn__10207: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>
<clojure.core$double__inliner__6139: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.core$boolean_array: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>
<clojure.core$boolean_array: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.core$fn__8902: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>
<clojure.lang.PersistentTreeMap$Seq: clojure.lang.PersistentTreeMap$Seq create(clojure.lang.PersistentTreeMap$Node,boolean,int)>
<clojure.lang.PersistentTreeMap$Seq: clojure.lang.ISeq push(clojure.lang.PersistentTreeMap$Node,clojure.lang.ISeq,boolean)>
<clojure.core$parse_long: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.pprint$general_float: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.core$_LT__EQ_: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,clojure.lang.ISeq)>
<clojure.java.browse_ui$open_url_in_swing: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.core$thread_bound_QMARK_: java.lang.Object invokeStatic(clojure.lang.ISeq)>
<clojure.java.io$fn__11619: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>
<clojure.math$exp__inliner__12491: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.core$letfn: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object,clojure.lang.ISeq)>
<clojure.pprint$write_to_base: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,clojure.lang.ISeq)>
<clojure.core$gen_interface: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,clojure.lang.ISeq)>
<clojure.core$generate_interface: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.math$increment_exact__inliner__12539: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.core$unchecked_dec_int__inliner__5661: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.test$fn__9801: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.test.junit$start_case: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>
<clojure.set$select: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>
<clojure.pprint$format_new_roman: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.core$generate_proxy$fn__7146: java.lang.Object invoke(java.lang.Object)>
<clojure.pprint$deftype: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object,clojure.lang.ISeq)>
<clojure.pprint$pprint_ideref: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.pprint$pprint_ideref$fn__11189: java.lang.Object invoke()>
<clojure.core$bit_set: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>
<clojure.datafy$fn__12139: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.core$fn__7470: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>
<clojure.core$unchecked_multiply_int__inliner__5685: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>
<clojure.core$get__inliner__5760: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,clojure.lang.ISeq)>
<clojure.core.protocols$fn__8238: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>
<clojure.math$atan__inliner__12482: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.pprint$write: java.lang.Object invokeStatic(java.lang.Object,clojure.lang.ISeq)>
<clojure.pprint$table_ize: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>
<clojure.pprint$write$fn__10406: java.lang.Object invoke()>
<clojure.pprint$write$fn__10408: java.lang.Object invoke()>
<clojure.core$fn__5459: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,clojure.lang.ISeq)>
<clojure.core$with_redefs_fn: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>
<clojure.core$with_redefs_fn$root_bind__8829: java.lang.Object invoke(java.lang.Object)>
<clojure.core$construct_proxy: java.lang.Object invokeStatic(java.lang.Object,clojure.lang.ISeq)>
<clojure.core$pos_QMARK___inliner__5697: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.test$set_test: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object,clojure.lang.ISeq)>
<clojure.core$fn__7393: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>
<clojure.test.tap$fn__9957: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.core$when_not: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object,clojure.lang.ISeq)>
<clojure.pprint$rtrim: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>
<clojure.core$bean: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.pprint$compile_directive: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>
<clojure.pprint$get_line: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.core$unchecked_int__inliner__6160: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.core$dissoc: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,clojure.lang.ISeq)>
<clojure.inspector$tree_model: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.lang.RT: java.lang.Object dissoc(java.lang.Object,java.lang.Object)>
<clojure.data$diff: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>
<clojure.data$atom_diff: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>
<clojure.core$int: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.datafy$datafy: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.core$spread: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.java.io$append_QMARK_: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.pprint$absolute_tabulation: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.set$subset_QMARK_: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>
<clojure.string$lower_case: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.core$rsubseq: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.pprint$justify_clauses: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.pprint$render_clauses: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.core$rsubseq: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.core$floats__6632: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.core$nfirst__5473: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.core$parse_impls: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.java.shell$aconcat: java.lang.Object invokeStatic(java.lang.Object,clojure.lang.ISeq)>
<clojure.core$ns_aliases: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.lang.Compiler$FnExpr: clojure.lang.Compiler$Expr parse(clojure.lang.Compiler$C,clojure.lang.ISeq,java.lang.String)>
<clojure.core$fn__7495: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>
<clojure.core$aset_double: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object,clojure.lang.ISeq)>
<clojure.core$aset_double: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.reflect$field__GT_map: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.core$assert_same_protocol: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>
<clojure.core$assert_same_protocol$fn__8081: java.lang.Object invoke()>
<clojure.core$assert_same_protocol$fn__8079: java.lang.Object invoke()>
<clojure.core$ns: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object,clojure.lang.ISeq)>
<clojure.core$list_STAR_: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,clojure.lang.ISeq)>
<clojure.uuid$fn__8528: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>
<clojure.core$range: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.core$min_key: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object,clojure.lang.ISeq)>
<clojure.pprint$modify_case: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.core$dotimes: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object,clojure.lang.ISeq)>
<clojure.core$areduce: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.pprint$pprint_simple_default: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.core$fn__7409: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>
<clojure.core$bit_shift_right__inliner__5724: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>
<clojure.zip$remove: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.core.reducers$cat: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>
<clojure.pprint$get_sub_section: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.core$bit_shift_left__inliner__5721: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>
<clojure.pprint$binding_map: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object,clojure.lang.ISeq)>
<clojure.lang.RT: char charCast(java.lang.Object)>
<clojure.core$with_loading_context: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,clojure.lang.ISeq)>
<clojure.pprint$buffer_blob_QMARK_: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.lang.PersistentTreeMap: clojure.lang.PersistentTreeMap$Node entryAt(java.lang.Object)>
<clojure.test$fn__9869: java.lang.Object invokeStatic(java.lang.Object,clojure.lang.ISeq)>
<clojure.test$add_ns_meta: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>
<clojure.test.junit$test_name: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.test$test_all_vars: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.core$generate_class$fn__7735: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.pprint$format_old_roman: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.lang.PersistentTreeMap: int doCompare(java.lang.Object,java.lang.Object)>
<clojure.core$non_private_methods: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.core$some__GT_: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object,clojure.lang.ISeq)>
<clojure.lang.APersistentMap$ValSeq: clojure.lang.APersistentMap$ValSeq createFromMap(clojure.lang.IPersistentMap)>
<clojure.core$group_by_sig$fn__7112: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.core$aset_char: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object,clojure.lang.ISeq)>
<clojure.core$aset_char: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.core$infinite_QMARK___inliner__8984: java.lang.Object invokeStatic(java.lang.Object)>
<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode find(int,java.lang.Object,java.lang.Class)>
<clojure.core$if_let: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,clojure.lang.ISeq)>
<clojure.string$includes_QMARK_: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>
<clojure.pprint$inc_s: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.core$short: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.core$if_let: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.xml$startparse_sax_safe: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>
<clojure.core$compile: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.core$compile$fn__6927: java.lang.Object invoke()>
<clojure.core.reducers$remove: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>
<clojure.math$cosh__inliner__12563: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.pprint$right_bracket: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.core$deftype: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,clojure.lang.ISeq)>
<clojure.core$chars__6618: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.core$aclone__inliner__6223: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.core$var_set: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>
<clojure.core$extend_protocol: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object,clojure.lang.ISeq)>
<clojure.core$emit_extend_protocol: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>
<clojure.core$hash_unordered_coll: long invokeStatic(java.lang.Object)>
<clojure.core$unchecked_add_int: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>
<clojure.pprint$get_miser_width: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.pprint$process_clause: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.core$when_some: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object,clojure.lang.ISeq)>
<clojure.core$strip_ns: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.core.server$required: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>
<clojure.lang.LispReader$MapReader: java.lang.Object invoke(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.test.junit$element_content: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.test.junit$finish_element: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>
<clojure.core$__GT__GT_: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object,clojure.lang.ISeq)>
<clojure.pprint$pprint_map: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.pprint$pprint_map$fn__11173: java.lang.Object invoke()>
<java.lang.String: java.lang.String[] split(java.lang.String)>
<clojure.string$index_of: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,long)>
<clojure.java.shell$parse_args: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.string$index_of: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>
<clojure.pprint$single_defn$fn__11303: java.lang.Object doInvoke(java.lang.Object)>
<clojure.core$protected_final_methods: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.core$splitv_at: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>
<clojure.core$into: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.pprint$fn__10258: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.pprint$tokens_fit_QMARK_: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>
<clojure.lang.Cycle: clojure.lang.ISeq current()>
<clojure.test.junit$fn__10028: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.test.junit$finish_case: java.lang.Object invokeStatic()>
<clojure.pprint$get_writer: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.pprint$fn__10954: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>
<clojure.core$_LT_: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,clojure.lang.ISeq)>
<clojure.core$fn__7515: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>
<clojure.walk$keywordize_keys: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.java.io$fn__11617: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>
<clojure.core$unchecked_multiply_int: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>
<clojure.java.io$outputstream__GT_writer: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>
<clojure.reflect$fn__12146: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.core$delay: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,clojure.lang.ISeq)>
<clojure.core.protocols$fn__8248: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.core.protocols$fn__8248: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>
<clojure.core$alength: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.core.protocols$fn__8240: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.core.protocols$fn__8240: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>
<clojure.core$bit_clear: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>
<clojure.pprint$setf: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.core$fn__7464: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>
<clojure.pprint$boolean_conditional: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.core$fn__7399: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>
<clojure.zip$insert_right: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>
<clojure.core$fn__7505: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>
<clojure.core$chunk_buffer: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.core$neg_QMARK___inliner__5700: java.lang.Object invokeStatic(java.lang.Object)>
<java.util.PriorityQueue: void siftDown(int,java.lang.Object)>
<java.util.PriorityQueue: void siftDownUsingComparator(int,java.lang.Object)>
<clojure.lang.Compiler: java.lang.Object macroexpand1(java.lang.Object)>
<clojure.pprint$formatter: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.repl.deps$add_lib: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>
<clojure.repl.deps$add_lib: java.lang.Object invokeStatic(java.lang.Object)>
<java.util.PriorityQueue: void heapify()>
<clojure.core$unchecked_negate_int: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.test$fn__9867: java.lang.Object invokeStatic(java.lang.Object,clojure.lang.ISeq)>
<clojure.core$pcalls: java.lang.Object invokeStatic(clojure.lang.ISeq)>
<clojure.core$mapv: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,clojure.lang.ISeq)>
<clojure.core$mapv: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.core$mapv: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.core$mapv: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>
<clojure.repl$find_doc: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.core$fn__8397: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>
<clojure.zip$path: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.lang.RT: java.lang.Object contains(java.lang.Object,java.lang.Object)>
<clojure.java.io$fn__11663: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>
<clojure.math$sinh__inliner__12560: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.test$deftest: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object,clojure.lang.ISeq)>
<clojure.core$_: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,clojure.lang.ISeq)>
<clojure.reflect$reflect: java.lang.Object invokeStatic(java.lang.Object,clojure.lang.ISeq)>
<clojure.core$fn: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,clojure.lang.ISeq)>
<clojure.pprint$pprint_cond: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.pprint$pprint_cond$fn__11379: java.lang.Object invoke()>
<clojure.test.junit$with_junit_output: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,clojure.lang.ISeq)>
<clojure.core$valid_java_method_name: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.core$emit_protocol$fn__8102: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.core$emit_protocol$fn__8102$fn__8112: java.lang.Object invoke()>
<clojure.pprint$prerr: java.lang.Object invokeStatic(clojure.lang.ISeq)>
<clojure.datafy$fn__12141: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.core.protocols$fn__8263: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.java.io$output_stream: java.lang.Object invokeStatic(java.lang.Object,clojure.lang.ISeq)>
<clojure.core$_EQ__EQ___inliner__5641: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>
<clojure.core$test: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.pprint$check_arg_conditional: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.instant$read_instant_date: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.core$imap_cons: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>
<clojure.reflect$declared_constructors: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.core$byte_array__inliner__6578: java.lang.Object invokeStatic(clojure.lang.ISeq)>
<clojure.pprint$fn__10254: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.core$assoc_in: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.core$derive: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.core$list_STAR_: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.core$unchecked_add_int__inliner__5673: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>
<clojure.core$parents: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>
<clojure.core$parents: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.core$derive: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>
<clojure.pprint$two_forms: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.inspector$fn__9652: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.core$as__GT_: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,clojure.lang.ISeq)>
<clojure.reflect$typeref__GT_class: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>
<clojure.lang.RT: java.lang.Class classForName(java.lang.String,boolean,java.lang.ClassLoader)>
<clojure.core$unchecked_inc_int: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.core$fn__7385: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>
<clojure.core$unchecked_inc__inliner__5658: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.core$chunk_cons: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>
<clojure.zip$edit: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,clojure.lang.ISeq)>
<clojure.java.shell$as_env_strings: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.core$with_out_str: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,clojure.lang.ISeq)>
<clojure.core$or: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object,clojure.lang.ISeq)>
<clojure.core$bit_not__inliner__5710: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.string$split: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.core$fn__7487: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>
<clojure.pprint$pprint_binding_form: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.pprint$pprint_binding_form$fn__11351: java.lang.Object invoke()>
<clojure.test$run_tests: java.lang.Object invokeStatic(clojure.lang.ISeq)>
<clojure.math$log10__inliner__12497: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.java.shell$with_sh_dir: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object,clojure.lang.ISeq)>
<clojure.math$next_down__inliner__12590: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.pprint$nl: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>
<clojure.string$replace_first_str: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.pprint$format_simple_cardinal: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.core$loop__5457: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,clojure.lang.ISeq)>
<clojure.pprint$make_end_block_t: java.lang.Object invokeStatic(clojure.lang.ISeq)>
<clojure.core$int_array__inliner__6593: java.lang.Object invokeStatic(clojure.lang.ISeq)>
<clojure.core$with_local_vars: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object,clojure.lang.ISeq)>
<clojure.core$char: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.java.shell$stream_to_string: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.pprint$capitalize_string: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>
<clojure.core$boolean_array__inliner__6575: java.lang.Object invokeStatic(clojure.lang.ISeq)>
<clojure.core$max: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,clojure.lang.ISeq)>
<clojure.core$ex_info: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.core$if_some: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,clojure.lang.ISeq)>
<clojure.pprint$fn__10892: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>
<clojure.reflect.Field: int size()>
<clojure.core.proxy$clojure.lang.APersistentMap$ff19274a: int size()>
<clojure.reflect.Method: int size()>
<clojure.lang.APersistentMap: int size()>
<clojure.reflect.Constructor: int size()>
<clojure.math$ulp__inliner__12554: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.lang.APersistentMap: int mapHash(clojure.lang.IPersistentMap)>
<clojure.core$if_some: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.repl$pst: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>
<clojure.test.junit$fn__9969: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.pprint$emit_nl: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>
<clojure.core$load_string: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.core$load_reader: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.zip$leftmost: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.core$spit: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,clojure.lang.ISeq)>
<clojure.core.server$with_lock: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object,clojure.lang.ISeq)>
<clojure.test$fn__9806: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.repl$pst: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.core$proxy_call_with_super: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.pprint$iterate_main_list: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.zip$rights: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.core$fn__7501: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>
<clojure.pprint$capitalize_word_writer: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.pprint$print_length_loop: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object,clojure.lang.ISeq)>
<clojure.lang.Compiler$InvokeExpr: java.lang.Object sigTag(int,clojure.lang.Var)>
<clojure.lang.Compiler$InvokeExpr: void <init>(java.lang.String,int,int,clojure.lang.Symbol,clojure.lang.Compiler$Expr,clojure.lang.IPersistentVector,boolean)>
<clojure.core$fn__7582: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>
<clojure.java.shell$sh: java.lang.Object invokeStatic(clojure.lang.ISeq)>
<clojure.math$add_exact__inliner__12530: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>
<clojure.repl$dir_fn: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.test$test_ns: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.core$defmethod: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,clojure.lang.ISeq)>
<clojure.lang.Compiler$InvokeExpr: clojure.lang.Compiler$Expr parse(clojure.lang.Compiler$C,clojure.lang.ISeq)>
<clojure.lang.RT: java.lang.Object third(java.lang.Object)>
<clojure.lang.RT: clojure.lang.ISeq listStar(java.lang.Object,java.lang.Object,clojure.lang.ISeq)>
<clojure.lang.Compiler: java.lang.Object getCompilerOption(clojure.lang.Keyword)>
<clojure.lang.Compiler$StaticInvokeExpr: clojure.lang.Compiler$Expr parse(clojure.lang.Var,clojure.lang.ISeq,java.lang.Object,boolean)>
<clojure.core$remove_ns: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.core$zero_QMARK___inliner__5595: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.core$add_doc_and_meta: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.inspector$fn__9584: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.core$_EQ___inliner__5584: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>
<clojure.pprint$set_pprint_dispatch: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.core$maybe_destructured: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>
<clojure.core$_STAR__SINGLEQUOTE_: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,clojure.lang.ISeq)>
<clojure.test.junit$suite_attrs: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>
<clojure.test.junit$package_class: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.core$fn__7381: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>
<clojure.core$inc_SINGLEQUOTE___inliner__5610: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.pprint$fn__10292: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.pprint$fn__10216: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>
<clojure.pprint$compile_format: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.math$cos__inliner__12470: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.lang.Var: java.lang.Object alterRoot(clojure.lang.IFn,clojure.lang.ISeq)>
<clojure.core$array_map: java.lang.Object invokeStatic(clojure.lang.ISeq)>
<clojure.java.io$fn__11535: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.reflect$fn__12298: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>
<clojure.core$make_array: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,clojure.lang.ISeq)>
<clojure.core$let__5455: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,clojure.lang.ISeq)>
<clojure.core$deref_as_map$fn__7537: java.lang.Object invoke()>
<clojure.inspector$fn__9588: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.core$merge_with$merge2__6046: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.core$bean$fn__7292: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<clojure.pprint$set_indent: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.core$unchecked_negate_int__inliner__5667: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.pprint$init_cap_writer: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.core$drop_last: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>
<clojure.core$resolve: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>
<clojure.core$ns_resolve: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.core$ns_resolve: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>
<clojure.java.process$exec: java.lang.Object invokeStatic(clojure.lang.ISeq)>
<clojure.test$fn__9832: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>
<java.util.ArrayList: void <init>(java.util.Collection)>
<clojure.lang.APersistentSet: java.lang.Object[] toArray()>
<clojure.lang.PersistentQueue: java.lang.Object[] toArray()>
<clojure.math$ceil__inliner__12509: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.core$bound_fn: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,clojure.lang.ISeq)>
<clojure.core$unreduced: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.core$refer_clojure: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,clojure.lang.ISeq)>
<clojure.core$disj_BANG_: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,clojure.lang.ISeq)>
<clojure.core$re_seq: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>
<clojure.core$re_seq$step__6459: java.lang.Object invoke()>
<clojure.core$float: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.inspector$inspect_tree: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.core$fn__7484: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>
<clojure.core$create_struct: java.lang.Object invokeStatic(clojure.lang.ISeq)>
<clojure.core$fn__7373: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>
<clojure.zip$seq_zip: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.core$__GT_: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object,clojure.lang.ISeq)>
<clojure.math$atan2__inliner__12518: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>
<clojure.core$load_libs: java.lang.Object invokeStatic(clojure.lang.ISeq)>
<clojure.core$prependss: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>
<clojure.core$hash_set: java.lang.Object invokeStatic(clojure.lang.ISeq)>
<clojure.core$dec__inliner__5652: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.uuid$fn__8526: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>
<clojure.core.reducers$reduce: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>
<clojure.math$hypot__inliner__12569: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>
<clojure.java.io$inputstream__GT_reader: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>
<clojure.test.junit$fn__10026: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.core$defn__5509: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object,clojure.lang.ISeq)>
<clojure.pprint$pprint_logical_block: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,clojure.lang.ISeq)>
<clojure.core$unchecked_subtract_int: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>
<clojure.core$ns_unalias: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>
<clojure.pprint$fn__10294: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.lang.Var: clojure.lang.Var intern(clojure.lang.Namespace,clojure.lang.Symbol,java.lang.Object,boolean)>
<clojure.inspector$fn__9594: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.lang.ARef: void validate(clojure.lang.IFn,java.lang.Object)>
<clojure.core$unchecked_float__inliner__6166: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.string$capitalize: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.lang.ARef: void notifyWatches(java.lang.Object,java.lang.Object)>
<clojure.lang.RT: void loadResourceScript(java.lang.Class,java.lang.String)>
<clojure.lang.RT: void loadResourceScript(java.lang.Class,java.lang.String,boolean)>
<clojure.lang.Compiler: java.lang.Object load(java.io.Reader,java.lang.String,java.lang.String)>
<clojure.core$deliver: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>
<clojure.lang.RT: void compile(java.lang.String)>
<clojure.lang.Compiler: java.lang.Object compile(java.io.Reader,java.lang.String,java.lang.String)>
<clojure.repl$doc: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.core$doall: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>
<clojure.lang.RT: void load(java.lang.String)>
<clojure.lang.RT: void load(java.lang.String,boolean)>
<clojure.core$send: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,clojure.lang.ISeq)>
<clojure.test$fn__9841: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>
<clojure.lang.Compiler$HostExpr: void emitUnboxArg(clojure.lang.Compiler$ObjExpr,clojure.asm.commons.GeneratorAdapter,java.lang.Class)>
<clojure.string$replace_first: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.string$replace_first_by: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.core$isa_QMARK_: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>
<clojure.lang.TransformerIterator: boolean hasNext()>
<clojure.lang.RT: clojure.lang.ISeq seqFrom(java.lang.Object)>
<clojure.lang.RT: java.lang.Class classForNameNonLoading(java.lang.String)>
<clojure.core.protocols$fn__8244: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.core.protocols$fn__8244: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>
<clojure.core$isa_QMARK_: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.lang.Compiler$HostExpr: java.lang.Class tagToClass(java.lang.Object)>
<clojure.lang.RT: int countFrom(java.lang.Object)>
<clojure.lang.PersistentQueue$Seq: int count()>
<clojure.reflect$type_reflect: java.lang.Object invokeStatic(java.lang.Object,clojure.lang.ISeq)>
<clojure.lang.ASeq: clojure.lang.ISeq more()>
<clojure.lang.LazySeq: clojure.lang.ISeq more()>
<clojure.lang.RT: java.lang.Object peek(java.lang.Object)>
<clojure.lang.PersistentQueue: java.lang.Object peek()>
<clojure.lang.RT: java.lang.Object getFrom(java.lang.Object,java.lang.Object)>
<clojure.core$load: java.lang.Object invokeStatic(clojure.lang.ISeq)>
<clojure.core$check_cyclic_dependency: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.core$load$fn__6922: java.lang.Object invoke()>
<clojure.core$load$fn__6920: java.lang.Object invoke()>
<clojure.template$do_template: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,clojure.lang.ISeq)>
<clojure.lang.RT: java.lang.Object getFrom(java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.core$array: java.lang.Object invokeStatic(clojure.lang.ISeq)>
<clojure.xml$startparse_sax: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>
<clojure.pprint$fn__10939: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>
<clojure.lang.RT: java.lang.Object nthFrom(java.lang.Object,int)>
<clojure.lang.RT: java.lang.Object nthFrom(java.lang.Object,int,java.lang.Object)>
<clojure.core$validate_generate_class_options: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.data$vectorize: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.core$struct_map: java.lang.Object invokeStatic(java.lang.Object,clojure.lang.ISeq)>
<clojure.core$load_lib: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,clojure.lang.ISeq)>
<clojure.core$load_lib$fn__6864: java.lang.Object invoke()>
<clojure.inspector$fn__9677: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.inspector$fn__9592: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>
<clojure.core$bytes_QMARK_: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.core$fn__7377: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>
<clojure.core$long__inliner__6133: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.lang.RT: clojure.lang.ISeq listStar(java.lang.Object,java.lang.Object,java.lang.Object,clojure.lang.ISeq)>
<clojure.lang.RT: int length(clojure.lang.ISeq)>
<clojure.core$assert_valid_fdecl: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.lang.RT: void print(java.lang.Object,java.io.Writer)>
<clojure.lang.RT: void printInnerSeq(clojure.lang.ISeq,java.io.Writer)>
<clojure.core$lazy_seq: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,clojure.lang.ISeq)>
<clojure.core$unchecked_dec__inliner__5664: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.core$inst_ms: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.core$fn__7395: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>
<clojure.core$keyword: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>
<clojure.math$to_radians__inliner__12485: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.core$ref_max_history: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>
<clojure.java.javadoc$javadoc: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.core.server$validate_opts: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.core$let: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object,clojure.lang.ISeq)>
<clojure.pprint$iterate_list_of_sublists: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.core.reducers$fold: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>
<clojure.core$count: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.stacktrace$print_stack_trace: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.pprint$make_buffer_blob: java.lang.Object invokeStatic(clojure.lang.ISeq)>
<clojure.pprint$pprint_set: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.pprint$pprint_set$fn__11181: java.lang.Object invoke()>
<clojure.pprint$write_token_string: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>
<clojure.java.io$input_stream: java.lang.Object invokeStatic(java.lang.Object,clojure.lang.ISeq)>
<clojure.core$dissoc_BANG_: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,clojure.lang.ISeq)>
<clojure.core$fn__7482: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>
<clojure.core$shift_mask: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.lang.LispReader: java.lang.Object read(java.io.PushbackReader,boolean,java.lang.Object,boolean,java.lang.Object)>
<clojure.java.io$fn__11641: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>
<clojure.lang.LispReader: java.lang.Object read(java.io.PushbackReader,boolean,java.lang.Object,java.lang.Character,java.lang.Object,boolean,java.lang.Object,java.lang.Object,clojure.lang.LispReader$Resolver)>
<clojure.lang.LispReader: java.lang.Object installPlatformFeature(java.lang.Object)>
<clojure.lang.LispReader: java.lang.Object interpretToken(java.lang.String,clojure.lang.LispReader$Resolver)>
<clojure.core$resultset_seq: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.core$resultset_seq$thisfn__6793: java.lang.Object invoke()>
<clojure.lang.LispReader: java.lang.Object matchSymbol(java.lang.String,clojure.lang.LispReader$Resolver)>
<clojure.core$reify: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,clojure.lang.ISeq)>
<clojure.java.io$delete_file: java.lang.Object invokeStatic(java.lang.Object,clojure.lang.ISeq)>
<clojure.math$to_degrees__inliner__12488: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.core.reducers$rfn: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.reflect$parse_method_descriptor: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.core$io_BANG_: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,clojure.lang.ISeq)>
<clojure.core.server$start_server$fn__9021: java.lang.Object invoke()>
<clojure.core$short__inliner__6142: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.math$asin__inliner__12476: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.pprint$dollar_float: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.lang.Compiler$SetExpr: clojure.lang.Compiler$Expr parse(clojure.lang.Compiler$C,clojure.lang.IPersistentSet)>
<clojure.core$dosync: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,clojure.lang.ISeq)>
<clojure.core$unchecked_dec_int: java.lang.Object invokeStatic(java.lang.Object)>
<java.lang.invoke.MethodTypeForm: void <init>(java.lang.invoke.MethodType)>
<java.lang.invoke.MethodTypeForm: java.lang.invoke.MethodType canonicalize(java.lang.invoke.MethodType,int,int)>
<clojure.lang.Compiler: java.lang.Object maybeResolveIn(clojure.lang.Namespace,clojure.lang.Symbol)>
<clojure.core$unchecked_remainder_int: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>
<clojure.lang.Compiler: java.lang.Object load(java.io.Reader)>
<clojure.core$shuffle: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.core$emit_impl: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.core.reducers$defcurried: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,clojure.lang.ISeq)>
<clojure.core$slurp: java.lang.Object invokeStatic(java.lang.Object,clojure.lang.ISeq)>
<clojure.core$fn__7472: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>
<clojure.core$unchecked_multiply__inliner__5688: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>
<clojure.test$successful_QMARK_: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.core$proxy: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,clojure.lang.ISeq)>
<clojure.core$to_array_2d: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.data$fn__12079: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>
<clojure.repl$source_fn: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.core$aclone: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.pprint$set_max_column: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>
<clojure.core$iterator_seq: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.core$quot__inliner__5703: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>
<clojure.lang.Compiler: clojure.lang.Compiler$Expr analyze(clojure.lang.Compiler$C,java.lang.Object,java.lang.String)>
<clojure.lang.Compiler: clojure.lang.Compiler$Expr analyzeSeq(clojure.lang.Compiler$C,clojure.lang.ISeq,java.lang.String)>
<clojure.lang.Compiler: clojure.lang.Compiler$KeywordExpr registerKeyword(clojure.lang.Keyword)>
<clojure.lang.Compiler: clojure.lang.Compiler$Expr analyzeSymbol(clojure.lang.Symbol)>
<clojure.lang.Compiler: clojure.lang.Var isMacro(java.lang.Object)>
<clojure.lang.Compiler: clojure.lang.Var lookupVar(clojure.lang.Symbol,boolean,boolean)>
<clojure.lang.Compiler: clojure.lang.Compiler$LocalBinding referenceLocal(clojure.lang.Symbol)>
<clojure.lang.Compiler: clojure.lang.IFn isInline(java.lang.Object,int)>
<clojure.lang.Compiler: clojure.lang.Var lookupVar(clojure.lang.Symbol,boolean)>
<clojure.lang.Compiler: boolean namesStaticMember(clojure.lang.Symbol)>
<clojure.lang.Compiler: clojure.lang.Namespace namespaceFor(clojure.lang.Symbol)>
<clojure.lang.Compiler: java.lang.Object preserveTag(clojure.lang.ISeq,java.lang.Object)>
<clojure.lang.Compiler: clojure.lang.Symbol tagOf(java.lang.Object)>
<clojure.lang.Compiler: void checkSpecs(clojure.lang.Var,clojure.lang.ISeq)>
<clojure.lang.Compiler: clojure.lang.Var ensureMacroCheck()>
<clojure.lang.Compiler: java.lang.Object macroexpand(java.lang.Object)>
<clojure.lang.Compiler: java.lang.Object eval(java.lang.Object,boolean)>
<clojure.lang.Compiler: int registerConstant(java.lang.Object)>
<clojure.lang.Compiler: java.lang.Object resolve(clojure.lang.Symbol)>
<clojure.lang.Compiler: void registerVar(clojure.lang.Var)>
<clojure.lang.Compiler: java.lang.Object resolveIn(clojure.lang.Namespace,clojure.lang.Symbol,boolean)>
<clojure.lang.Compiler: clojure.lang.Namespace namespaceFor(clojure.lang.Namespace,clojure.lang.Symbol)>
<clojure.lang.Compiler: void closeOver(clojure.lang.Compiler$LocalBinding,clojure.lang.Compiler$ObjMethod)>
<clojure.lang.Compiler: void compile1(clojure.asm.commons.GeneratorAdapter,clojure.lang.Compiler$ObjExpr,java.lang.Object)>
<clojure.test.junit$fn__10030: java.lang.Object invokeStatic(java.lang.Object)>
<clojure.core$unsigned_bit_shift_right: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>
<clojure.pprint$fn__10967: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>
<clojure.instant$construct_date: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.core$bit_shift_right: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object)>
<clojure.instant$fail: java.lang.Object invokeStatic(java.lang.Object,java.lang.Object,java.lang.Object)>
<clojure.core$fn__8896: java.lang.Object invokeStatic()>
<clojure.core.protocols$fn__8288: java.lang.Object invokeStatic()>
<clojure.walk$fn__9693: java.lang.Object invokeStatic()>
<clojure.test$run_all_tests: java.lang.Object invokeStatic()>
<clojure.core$generate_proxy$fn__7154$fn__7158: java.lang.Object invoke()>
<clojure.repl$set_break_handler_BANG_: java.lang.Object invokeStatic()>
<clojure.repl$thread_stopper: java.lang.Object invokeStatic()>
<clojure.math$random__inliner__12527: java.lang.Object invokeStatic()>
<clojure.pprint$fn__10248: java.lang.Object invokeStatic()>
<clojure.pprint$fn__10194: java.lang.Object invokeStatic()>
<clojure.core.protocols$fn__8189: java.lang.Object invokeStatic()>
<clojure.pprint$indent$fn__10372: java.lang.Object invoke()>
<clojure.java.javadoc$fn__11869: java.lang.Object invokeStatic()>
<clojure.java.shell$fn__11821: java.lang.Object invokeStatic()>
<clojure.data$fn__12048: java.lang.Object invokeStatic()>
<clojure.java.browse$xdg_open_loc: java.lang.Object invokeStatic()>
<clojure.java.browse$xdg_open_loc$fn__11855: java.lang.Object invoke()>
<clojure.reflect$fn__12204: java.lang.Object invokeStatic()>
<clojure.test.junit$fn__10018: java.lang.Object invokeStatic()>
<clojure.pprint$fn__10219$fn__10220: java.lang.Object invoke()>
<clojure.inspector$fn__9574: java.lang.Object invokeStatic()>
<clojure.java.io$fn__11549: java.lang.Object invokeStatic()>
<clojure.test.junit$fn__9966: java.lang.Object invokeStatic()>
<clojure.core$loaded_libs: java.lang.Object invokeStatic()>
<clojure.core$fn__8942: java.lang.Object invokeStatic()>
<clojure.core.server$repl_init: java.lang.Object invokeStatic()>
<clojure.core$fn__8924: java.lang.Object invokeStatic()>
<clojure.java.basis.impl$fn__11960: java.lang.Object invokeStatic()>
<clojure.core$fn__8366: java.lang.Object invokeStatic()>
<clojure.pprint$set_logical_block_callback$fn__10381: java.lang.Object invoke()>
<clojure.core$fn__8350: java.lang.Object invokeStatic()>
<clojure.pprint$set_miser_width$fn__10378: java.lang.Object invoke()>
<clojure.pprint$write_white_space$fn__10314: java.lang.Object invoke()>
<clojure.pprint$set_max_column$fn__10149: java.lang.Object invoke()>
<clojure.pprint$write_initial_lines$fn__10319: java.lang.Object invoke()>
<clojure.pprint$update_nl_state$fn__10275: java.lang.Object invoke()>
<clojure.pprint$add_to_buffer$fn__10309: java.lang.Object invoke()>
<clojure.pprint$emit_nl$fn__10278: java.lang.Object invoke()>
<clojure.pprint$nl$fn__10369: java.lang.Object invoke()>
<clojure.pprint$p_write_char$fn__10336: java.lang.Object invoke()>
<clojure.pprint$fn__10200$fn__10201: java.lang.Object invoke()>
<clojure.pprint$c_write_char$fn__10153: java.lang.Object invoke()>
<clojure.stacktrace$e: java.lang.Object invokeStatic()>
<clojure.inspector$fn__9564: java.lang.Object invokeStatic()>
<clojure.core$fn__8945: java.lang.Object invokeStatic()>
<clojure.lang.Var: clojure.lang.Associative getThreadBindings()>
<clojure.core$fn__8948: java.lang.Object invokeStatic()>
<clojure.java.basis.impl$fn__11962: java.lang.Object invokeStatic()>
<clojure.core$fn__5451: java.lang.Object invokeStatic()>
<clojure.core$fn__8336: java.lang.Object invokeStatic()>
<clojure.pprint$fn__10142: java.lang.Object invokeStatic()>
<clojure.test$fn__9765: java.lang.Object invokeStatic()>
<clojure.lang.LazySeq: void force()>
<clojure.lang.LazySeq: void realize()>
<clojure.edn$fn__9397: java.lang.Object invokeStatic()>
<clojure.core.protocols$fn__8268: java.lang.Object invokeStatic()>
<clojure.inspector$fn__9568: java.lang.Object invokeStatic()>
<clojure.java.browse_ui$fn__11946: java.lang.Object invokeStatic()>
<clojure.java.io$fn__11495: java.lang.Object invokeStatic()>
<clojure.pprint$fn__10042: java.lang.Object invokeStatic()>
<clojure.core.reducers$fn__12326: java.lang.Object invokeStatic()>
<clojure.java.process$fn__11932: java.lang.Object invokeStatic()>
<clojure.core.server$stop_server: java.lang.Object invokeStatic()>
<clojure.java.process$fn__11900: java.lang.Object invokeStatic()>
<clojure.instant$fn__8480: java.lang.Object invokeStatic()>
<clojure.core.protocols$fn__8215: java.lang.Object invokeStatic()>
<clojure.java.process$fn__11902: java.lang.Object invokeStatic()>
<clojure.core.server$fn__8989: java.lang.Object invokeStatic()>
<clojure.lang.Namespace: clojure.lang.ISeq all()>
<clojure.edn$read: java.lang.Object invokeStatic()>
<clojure.java.process$fn__11926: java.lang.Object invokeStatic()>
<clojure.core$clojure_version: java.lang.Object invokeStatic()>
<clojure.reflect$fn__12108: java.lang.Object invokeStatic()>
<clojure.core$fn__8437: java.lang.Object invokeStatic()>
<clojure.inspector$fn__9560: java.lang.Object invokeStatic()>
<clojure.pprint$fn__11440: java.lang.Object invokeStatic()>
<clojure.pprint$fn__11163: java.lang.Object invokeStatic()>
<clojure.test$fn__9781: java.lang.Object invokeStatic()>
<clojure.pprint$fn__11372: java.lang.Object invokeStatic()>
<clojure.inspector$fn__9636: java.lang.Object invokeStatic()>
<clojure.reflect$fn__12169: java.lang.Object invokeStatic()>
<clojure.instant$fn__8441: java.lang.Object invokeStatic()>
<clojure.core$fn__6834: java.lang.Object invokeStatic()>
<clojure.data$fn__12032: java.lang.Object invokeStatic()>
<clojure.pprint$fn__11293: java.lang.Object invokeStatic()>
<clojure.inspector$fn__9673: java.lang.Object invokeStatic()>
<clojure.instant$fn__8464: java.lang.Object invokeStatic()>
<clojure.reflect$fn__12242: java.lang.Object invokeStatic()>
<clojure.math$fn__12465: java.lang.Object invokeStatic()>
<clojure.zip$fn__9462: java.lang.Object invokeStatic()>
<clojure.string$fn__11973: java.lang.Object invokeStatic()>
<clojure.core$fn__6831: java.lang.Object invokeStatic()>
<clojure.lang.TransformerIterator: boolean step()>
<clojure.core$fn__6187: java.lang.Object invokeStatic()>
<clojure.java.io$fn__11667: java.lang.Object invokeStatic()>
<clojure.core$fn__8341: java.lang.Object invokeStatic()>
<clojure.test.tap$fn__9945: java.lang.Object invokeStatic()>
<clojure.test.tap$fn__9933: java.lang.Object invokeStatic()>
<clojure.set$fn__9325: java.lang.Object invokeStatic()>
<clojure.java.basis$initial_basis: java.lang.Object invokeStatic()>
<clojure.core.server$fn__8991: java.lang.Object invokeStatic()>
<clojure.core$fn__8345: java.lang.Object invokeStatic()>
<clojure.uuid$fn__8523: java.lang.Object invokeStatic()>
<clojure.repl.deps$fn__12620: java.lang.Object invokeStatic()>
<clojure.datafy$fn__12132: java.lang.Object invokeStatic()>
<clojure.pprint$fn__10288: java.lang.Object invokeStatic()>
<clojure.pprint$fresh_line: java.lang.Object invokeStatic()>
<clojure.core$fn__8343: java.lang.Object invokeStatic()>
<clojure.xml$fn__9406: java.lang.Object invokeStatic()>
<clojure.java.basis.impl$fn__11955: java.lang.Object invokeStatic()>
<clojure.stacktrace$fn__9735: java.lang.Object invokeStatic()>
<clojure.core$fn__8597: java.lang.Object invokeStatic()>
<clojure.reflect$fn__12282: java.lang.Object invokeStatic()>
<clojure.repl$fn__11724: java.lang.Object invokeStatic()>
<clojure.test$run_tests: java.lang.Object invokeStatic()>
<clojure.core$fn__6828: java.lang.Object invokeStatic()>
<clojure.java.javadoc$fn__11872: java.lang.Object invokeStatic()>
<clojure.pprint$fn__11204: java.lang.Object invokeStatic()>
<clojure.core$fn__8501: java.lang.Object invokeStatic()>
<clojure.repl$pst: java.lang.Object invokeStatic()>
<clojure.xml$fn__9403: java.lang.Object invokeStatic()>
<clojure.test$fn__9767: java.lang.Object invokeStatic()>
<clojure.test$fn__9824: java.lang.Object invokeStatic()>
<clojure.test$fn__9861: java.lang.Object invokeStatic()>
<clojure.core$load_data_readers: java.lang.Object invokeStatic()>
<clojure.data$fn__12004: java.lang.Object invokeStatic()>
<clojure.core$fn__8939: java.lang.Object invokeStatic()>
<clojure.core.protocols$fn__8185: java.lang.Object invokeStatic()>
<clojure.core.server$repl: java.lang.Object invokeStatic()>
<clojure.core.protocols$fn__8312: java.lang.Object invokeStatic()>
<clojure.core$fn__6193: java.lang.Object invokeStatic()>
<clojure.reflect$fn__12090: java.lang.Object invokeStatic()>
<clojure.pprint$fn__11195: java.lang.Object invokeStatic()>
<clojure.core.reducers$fn__12430: java.lang.Object invokeStatic()>
<clojure.reflect$fn__12302: java.lang.Object invokeStatic()>
<clojure.reflect$fn__12274: java.lang.Object invokeStatic()>
<clojure.pprint$fn__10384: java.lang.Object invokeStatic()>
<clojure.core.reducers$fn__12337: java.lang.Object invokeStatic()>
<clojure.reflect$fn__12086: java.lang.Object invokeStatic()>
<clojure.core.server$stop_servers: java.lang.Object invokeStatic()>
<clojure.tools.deps.interop$fn__12598: java.lang.Object invokeStatic()>
<clojure.template$fn__9757: java.lang.Object invokeStatic()>
<clojure.core.server$fn__8994: java.lang.Object invokeStatic()>
<clojure.java.browse$fn__11852: java.lang.Object invokeStatic()>
<clojure.java.basis$fn__11967: java.lang.Object invokeStatic()>
<clojure.java.io$fn__11489: java.lang.Object invokeStatic()>
<java.io.FileOutputStream: void write(byte[])>

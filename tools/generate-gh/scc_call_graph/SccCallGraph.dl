
.type Node <: symbol
.type Lable <: symbol

/**
 * 导入 
*/

.decl import_links(label: Lable, A:Node, B:Node)
.input import_links(filename="PotentialVulnGraph.csv")

.decl links(A:Node, B:Node)
.output links(filename="CallGraph.csv")

links(A, B) :-
	import_links(_, A, B).

.decl nodes(A:Node)
nodes(A) :-
  links(A,_) ; links(_,A). 

.decl reaches(A:Node, B:Node)
reaches(A, B) :-
  links(A, B).
reaches(A, B) :-
  links(A, C), reaches(C, B).

.decl mutually_reaching(A:Node, B:Node)

mutually_reaching(A, B) :-
  reaches(A, B), reaches(B, A).
mutually_reaching(A,A) :-
  nodes(A).

.decl chain(A:Node, B:Node)
// .output chain

// 注意此处，让 chain 产生有序排列, 且破坏了顺序
chain(A,B) :-
  mutually_reaching(A,B), ord(A) < ord(B).


// 表示 每一个 scc 中最小的值
.decl leader(A:Node)
leader(A) :-
  nodes(A), !chain(_,A).

.decl count_scc(A:Node, n:number)
.output count_scc()


count_scc(A, S) :-
  leader(A), S = count : {mutually_reaching(A,_)}.

.decl connect_scc(scc: Node, d: Node)
// .output connect_scc

// 计算scc的d向量, d为不同的scc向量
connect_scc(scc, d) :-
  count_scc(scc, _),
  mutually_reaching(scc, scc_o),
  links(scc_o, d),
  leader(d),
  !mutually_reaching(scc, d).

.decl start_node(node: Node)
start_node("<Start Method>").

.decl end_node(node: Node)
end_node("<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>").

// 给n>1的scc 进行标签
.decl label_scc(scc:Node, label: Node)

label_scc(scc, lable) :-
  count_scc(scc, n),
  (
    (
      n > 1,
      lable = cat(cat(scc, ":: SCC :: "), to_string(n))
    );
    (
      n = 1,
      lable =  scc
    )
  ).

// scc
.decl scc_call_graph(parent: Node, children: Node)
.output scc_call_graph

scc_call_graph(a, b_label) :-
  start_node(a),
  connect_scc(a, b),
  label_scc(b, b_label).

scc_call_graph(b_label, c_label) :-
  scc_call_graph(_, b_label),
  label_scc(b, b_label),
  connect_scc(b, c),
  label_scc(c, c_label).

scc_call_graph(b_label, c_label) :-
  scc_call_graph(_, b_label),
  label_scc(b, b_label),
  // b 不在 scc, 查询 scc，并补充edge
  !count_scc(b, _),
  mutually_reaching(scc, b),
  connect_scc(scc, c),
  label_scc(c, c_label).

// 用 scc 表示有个问题，会丢失细节
// Context-insensitive pointer analysis with on-the-fly call graph discovery

#include "../../main/single-phase-analysis.dl"
#include "../../main/configuration.dl"
 
// This analysis has no context for either method calls or heap objects.
// This is emulated by creating a single Context object and a single HContext
// object, which are used everywhere.


.comp ContextInsensitiveConfiguration : AbstractConfiguration {

  .type Context = symbol
  .type HContext = symbol

// 关闭 ContextResponse
//   ContextResponse(?callerCtx, ?hctx, ?invo, ?value, ?tomethod, ?calleeCtx) :-
//     ContextRequest(?callerCtx, ?hctx, ?invo, ?value, ?tomethod, _),
//     ?calleeCtx = ?callerCtx.

//   StaticContextResponse(?callerCtx, ?invo, ?calleeCtx) :-
//     StaticContextRequest(?callerCtx, ?invo),
//     ?calleeCtx = ?callerCtx.
      
   /**
    * Some library modules are generically defined, and need the macro
    * definitions for the context-sensitive pointer analysis they are
    * used in. For a context-insensitive pointer analysis we just
    * generate constant contexts.
    */
  RecordContextResponse(?ctx, ?value, ?var, ?hctx) :-
    RecordContextRequest(?ctx, ?value, ?var),
    isImmutableHContext(?hctx).

  InitContextResponse(?s, ?ctx) :-
    ?ctx = "<<immutable-context>>",
    InitContextRequest(?s).

  InitHContextResponse(?s, ?hctx) :-
    ?hctx = "<<immutable-hcontext>>",
    InitHContextRequest(?s).

#ifdef HEAPDLS
    DynamicContextToHContext(?hctx, ?dynCtx) :-
      isDynamicContext(?dynCtx),
      isImmutableHContext(?hctx).

    DynamicContextToContext(?ctx, ?dynCtx) :-
      isDynamicContext(?dynCtx),
      isImmutableContext(?ctx).
#endif // HEAPDLS
}

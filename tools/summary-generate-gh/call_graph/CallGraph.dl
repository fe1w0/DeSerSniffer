.type Method = symbol
.type Label = symbol
.type ReferenceType = symbol
.type Type = symbol
.type Var = symbol
.type JVMDescriptor = symbol

/**
 * 表示那些SourceMethod, 可以事实上控制SinkMethod
*/
.decl TaintedSinkMethod(SourceMethod: Method, SinkMethod: Method)
.input TaintedSinkMethod(filename="TaintedSinkMethod.csv")

/**
 * 自低向上，构建 ReachableTaintedCallGraph(NodeMethod, Variable, SinkMethod)
*/
.decl ReachableTaintedCallGraph(NodeMethod: Method, from_var: Var, ToMethod: Method, to_var: Var, SinkMethod: Method)
.input ReachableTaintedCallGraph(filename="ReachableTaintedCallGraph.csv")

.decl TmpCallGraph(FromMethod: Method, ToMethod: Method, SourceMethod: Method, SinkMethod: Method, neo4j_label: Label)
.printsize TmpCallGraph

TmpCallGraph(SourceMethod, ToMethod, SourceMethod, SinkMethod, neo4j_label) :-
	ReachableTaintedCallGraph(SourceMethod, _, ToMethod, _, SinkMethod),
	TaintedSinkMethod(SourceMethod, SinkMethod),
	neo4j_label = "CONNECTS_TO".

TmpCallGraph(FromMethod, ToMethod, SourceMethod, SinkMethod, neo4j_label) :-
	TmpCallGraph(_, FromMethod, SourceMethod, SinkMethod, neo4j_label),
	ReachableTaintedCallGraph(FromMethod, _, ToMethod, _, SinkMethod).
.plan 0:(2,1)

.decl CallGraph(FromMethod: Method, ToMethod: Method, label: Label, neo4j_label: Label)
.output CallGraph(filename="CallGraph.csv")
.printsize CallGraph

CallGraph(FromMethod, ToMethod, label, neo4j_label) :-
	label = cat(cat(SourceMethod, "->"), SinkMethod),
	TmpCallGraph(FromMethod, ToMethod, SourceMethod, SinkMethod, neo4j_label).

.decl Node(method: Method, neo4j_label: Label)
.output Node(filename="Nodes.csv")
.printsize Node

Node(method, "Node") :-
	TmpCallGraph(method, _, _, _, _) ; TmpCallGraph(_, method, _, _, _). 